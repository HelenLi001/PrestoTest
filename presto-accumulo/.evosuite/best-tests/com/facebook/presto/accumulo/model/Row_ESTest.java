/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 01:21:53 GMT 2021
 */

package com.facebook.presto.accumulo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.accumulo.model.AccumuloColumnHandle;
import com.facebook.presto.accumulo.model.Field;
import com.facebook.presto.accumulo.model.Row;
import com.facebook.presto.accumulo.model.RowSchema;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeSignature;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Row_ESTest extends Row_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(rowSchema0).getLength();
      doReturn((String) null).when(rowSchema0).toString();
      // Undeclared exception!
      try { 
        Row.fromString(rowSchema0, "kAN", '[');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of split tokens is not equal to schema length. Expected 0 received 1. Schema: null, fields {java.lang.String@0000000010}, delimiter [
         //
         verifyException("com.facebook.presto.accumulo.model.Row", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      AccumuloColumnHandle accumuloColumnHandle0 = mock(AccumuloColumnHandle.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(accumuloColumnHandle0).getType();
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      doReturn(accumuloColumnHandle0).when(rowSchema0).getColumn(anyInt());
      doReturn(1).when(rowSchema0).getLength();
      Row row0 = Row.fromString(rowSchema0, "", '9');
      int int0 = row0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Row row0 = new Row();
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(field0).toString();
      row0.addField(field0);
      List<Field> list0 = row0.getFields();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      AccumuloColumnHandle accumuloColumnHandle0 = mock(AccumuloColumnHandle.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(accumuloColumnHandle0).getType();
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      doReturn(accumuloColumnHandle0).when(rowSchema0).getColumn(anyInt());
      doReturn(1).when(rowSchema0).getLength();
      Row row0 = Row.fromString(rowSchema0, "", '9');
      Field field0 = row0.getField(0);
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Row row0 = new Row();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Row row1 = row0.addField((Object) null, type0);
      assertSame(row1, row0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Row row0 = new Row();
      // Undeclared exception!
      try { 
        row0.getField((-3185));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccumuloColumnHandle accumuloColumnHandle0 = mock(AccumuloColumnHandle.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(accumuloColumnHandle0).getType();
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      doReturn(accumuloColumnHandle0).when(rowSchema0).getColumn(anyInt());
      doReturn(1).when(rowSchema0).getLength();
      // Undeclared exception!
      try { 
        Row.fromString(rowSchema0, "INVALID_SESSION_PROPERTY", '9');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Row.fromString(rowSchema0, (String) null, '\"');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Row row0 = new Row();
      TypeSignature typeSignature0 = mock(TypeSignature.class, new ViolatedAssumptionAnswer());
      doReturn("").when(typeSignature0).getBase();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(typeSignature0, (TypeSignature) null).when(type0).getTypeSignature();
      // Undeclared exception!
      try { 
        row0.addField((Object) "", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Row row0 = new Row();
      // Undeclared exception!
      try { 
        row0.addField((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeSignature typeSignature0 = mock(TypeSignature.class, new ViolatedAssumptionAnswer());
      doReturn("").when(typeSignature0).getBase();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(typeSignature0, (TypeSignature) null).when(type0).getTypeSignature();
      AccumuloColumnHandle accumuloColumnHandle0 = mock(AccumuloColumnHandle.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(accumuloColumnHandle0).getType();
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      doReturn(accumuloColumnHandle0).when(rowSchema0).getColumn(anyInt());
      doReturn(1).when(rowSchema0).getLength();
      Row row0 = Row.fromString(rowSchema0, "", '$');
      Row row1 = null;
      try {
        row1 = new Row(row0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = Row.valueFromString("", (Type) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Row row0 = new Row();
      String string0 = "";
      row0.toString();
      TypeSignature typeSignature0 = mock(TypeSignature.class, new ViolatedAssumptionAnswer());
      doReturn("").when(typeSignature0).getBase();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(typeSignature0, (TypeSignature) null).when(type0).getTypeSignature();
      // Undeclared exception!
      try { 
        Row.valueFromString("9(VV{mI", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Object object0 = Row.valueFromString((String) null, type0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      doReturn((int)'B', (int)'B').when(rowSchema0).getLength();
      doReturn("").when(rowSchema0).toString();
      // Undeclared exception!
      try { 
        Row.fromString(rowSchema0, "", 'B');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of split tokens is not equal to schema length. Expected 66 received 1. Schema: , fields {java.lang.String@0000000010}, delimiter B
         //
         verifyException("com.facebook.presto.accumulo.model.Row", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      AccumuloColumnHandle accumuloColumnHandle0 = mock(AccumuloColumnHandle.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(accumuloColumnHandle0).getType();
      RowSchema rowSchema0 = mock(RowSchema.class, new ViolatedAssumptionAnswer());
      doReturn(accumuloColumnHandle0).when(rowSchema0).getColumn(anyInt());
      doReturn(1).when(rowSchema0).getLength();
      Row row0 = Row.fromString(rowSchema0, "", '9');
      String string0 = row0.toString();
      assertEquals("(null)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Row row0 = new Row();
      boolean boolean0 = row0.equals(row0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Row row0 = new Row();
      boolean boolean0 = row0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Row row0 = new Row();
      row0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Row row0 = new Row();
      List<Field> list0 = row0.getFields();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Row row0 = new Row();
      Row row1 = new Row(row0);
      assertTrue(row1.equals((Object)row0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Row row0 = new Row();
      int int0 = row0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Row row0 = new Row();
      Field field0 = mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(field0).toString();
      Row row1 = row0.addField(field0);
      Row row2 = new Row();
      boolean boolean0 = row1.equals(row2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Row row0 = new Row();
      // Undeclared exception!
      try { 
        row0.getField(41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
