/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 01:41:50 GMT 2021
 */

package com.facebook.presto.accumulo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.accumulo.model.WrappedRange;
import java.io.IOException;
import java.io.InvalidObjectException;
import org.apache.accumulo.core.data.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WrappedRange_ESTest extends WrappedRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-112);
      WrappedRange wrappedRange0 = WrappedRange.fromBytes(byteArray0);
      byte[] byteArray1 = wrappedRange0.toBytes();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WrappedRange wrappedRange0 = new WrappedRange((Range) null);
      Range range0 = wrappedRange0.getRange();
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-103);
      WrappedRange wrappedRange0 = WrappedRange.fromBytes(byteArray0);
      Range range0 = wrappedRange0.getRange();
      assertTrue(range0.isStartKeyInclusive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)11;
      WrappedRange wrappedRange0 = WrappedRange.fromBytes(byteArray0);
      Range range0 = wrappedRange0.getRange();
      assertTrue(range0.isInfiniteStartKey());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)77;
      WrappedRange wrappedRange0 = WrappedRange.fromBytes(byteArray0);
      Range range0 = wrappedRange0.getRange();
      assertTrue(range0.isInfiniteStopKey());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-112);
      byteArray0[3] = (byte)1;
      WrappedRange wrappedRange0 = WrappedRange.fromBytes(byteArray0);
      Range range0 = wrappedRange0.getRange();
      assertFalse(range0.isStartKeyInclusive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        WrappedRange.fromBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-56);
      // Undeclared exception!
      try { 
        WrappedRange.fromBytes(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.data.Key", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      try { 
        WrappedRange.fromBytes(byteArray0);
        fail("Expecting exception: InvalidObjectException");
      
      } catch(InvalidObjectException e) {
         //
         // Start key must be less than end key in range ( : [] 0 false,  : [] 0 false)
         //
         verifyException("org.apache.accumulo.core.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-13);
      try { 
        WrappedRange.fromBytes(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // value too long to fit in integer
         //
         verifyException("org.apache.hadoop.io.WritableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        WrappedRange.fromBytes(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.EOFException
         //
         verifyException("com.google.common.io.ByteStreams$ByteArrayDataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WrappedRange wrappedRange0 = new WrappedRange((Range) null);
      // Undeclared exception!
      try { 
        wrappedRange0.toBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.model.WrappedRange", e);
      }
  }
}
