/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 01:38:32 GMT 2021
 */

package com.facebook.presto.accumulo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.accumulo.AccumuloTransactionHandle;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AccumuloTransactionHandle_ESTest extends AccumuloTransactionHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Random.setNextRandom(134);
      AccumuloTransactionHandle accumuloTransactionHandle0 = new AccumuloTransactionHandle();
      UUID uUID0 = accumuloTransactionHandle0.getUuid();
      assertEquals("86000000-8700-4000-8800-000089000000", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AccumuloTransactionHandle accumuloTransactionHandle0 = null;
      try {
        accumuloTransactionHandle0 = new AccumuloTransactionHandle((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // uuid is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AccumuloTransactionHandle accumuloTransactionHandle0 = new AccumuloTransactionHandle();
      boolean boolean0 = accumuloTransactionHandle0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AccumuloTransactionHandle accumuloTransactionHandle0 = new AccumuloTransactionHandle(uUID0);
      boolean boolean0 = accumuloTransactionHandle0.equals(accumuloTransactionHandle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AccumuloTransactionHandle accumuloTransactionHandle0 = new AccumuloTransactionHandle();
      AccumuloTransactionHandle accumuloTransactionHandle1 = new AccumuloTransactionHandle();
      boolean boolean0 = accumuloTransactionHandle1.equals(accumuloTransactionHandle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AccumuloTransactionHandle accumuloTransactionHandle0 = new AccumuloTransactionHandle();
      UUID uUID0 = accumuloTransactionHandle0.getUuid();
      boolean boolean0 = accumuloTransactionHandle0.equals(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AccumuloTransactionHandle accumuloTransactionHandle0 = new AccumuloTransactionHandle();
      String string0 = accumuloTransactionHandle0.toString();
      assertEquals("AccumuloTransactionHandle{uuid=00000000-0100-4000-8200-000003000000}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AccumuloTransactionHandle accumuloTransactionHandle0 = new AccumuloTransactionHandle();
      accumuloTransactionHandle0.hashCode();
  }
}
