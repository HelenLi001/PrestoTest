/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 01:13:32 GMT 2021
 */

package com.facebook.presto.accumulo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.accumulo.model.Field;
import com.facebook.presto.common.type.ArrayType;
import com.facebook.presto.common.type.BigintEnumType;
import com.facebook.presto.common.type.BigintType;
import com.facebook.presto.common.type.BooleanType;
import com.facebook.presto.common.type.DateType;
import com.facebook.presto.common.type.DoubleType;
import com.facebook.presto.common.type.IntegerType;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.RealType;
import com.facebook.presto.common.type.RowType;
import com.facebook.presto.common.type.SmallintType;
import com.facebook.presto.common.type.TimeType;
import com.facebook.presto.common.type.TimeWithTimeZoneType;
import com.facebook.presto.common.type.TimestampType;
import com.facebook.presto.common.type.TinyintType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.VarbinaryType;
import com.facebook.presto.common.type.VarcharType;
import java.util.IdentityHashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Field_ESTest extends Field_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      Field field0 = new Field((Object) null, integerType0, true);
      boolean boolean0 = field0.isIndexed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getTime();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2500);
      Field field0 = null;
      try {
        field0 = new Field(integer0, (Type) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Field field0 = null;
      try {
        field0 = new Field((Object) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.isNull();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getShort();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getType();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      Field field0 = null;
      try {
        field0 = new Field(kdbTreeType0, kdbTreeType0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported PrestoType KdbTree
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      Object object0 = new Object();
      Field field0 = null;
      try {
        field0 = new Field(object0, varbinaryType0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Slice byte[], but class java.lang.Object
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeWithTimeZoneType timeWithTimeZoneType0 = TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = null;
      try {
        field0 = new Field(timeWithTimeZoneType0, tinyintType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Byte, but class com.facebook.presto.common.type.TimeWithTimeZoneType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      Field field0 = null;
      try {
        field0 = new Field(varcharType0, varcharType0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Slice or String, but class com.facebook.presto.common.type.VarcharType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      Field field0 = null;
      try {
        field0 = new Field(timestampType0, timestampType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Long or Timestamp, but class com.facebook.presto.common.type.TimestampType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long(924L);
      TimeType timeType0 = TimeType.TIME;
      Field field0 = new Field(long0, timeType0, false);
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeType timeType0 = TimeType.TIME;
      Double double0 = new Double(23.82400488197762);
      Field field0 = null;
      try {
        field0 = new Field(double0, timeType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Long or Time, but class java.lang.Double
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Field field0 = new Field(integer0, smallintType0);
      // Undeclared exception!
      try { 
        field0.getLong();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      SmallintType smallintType0 = SmallintType.SMALLINT;
      Field field0 = null;
      try {
        field0 = new Field(object0, smallintType0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Short, but class java.lang.Object
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealType realType0 = RealType.REAL;
      Field field0 = null;
      try {
        field0 = new Field(realType0, realType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Float, but class com.facebook.presto.common.type.RealType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleType doubleType0 = DoubleType.DOUBLE;
      Field field0 = null;
      try {
        field0 = new Field("", doubleType0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Double, but class java.lang.String
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(0.9999);
      DoubleType doubleType0 = DoubleType.DOUBLE;
      Field field0 = new Field(double0, doubleType0, true);
      // Undeclared exception!
      try { 
        field0.getFloat();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Float
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateType dateType0 = DateType.DATE;
      Field field0 = null;
      try {
        field0 = new Field("iB:*V0ju+", dateType0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Calendar, Date, or Long, but class java.lang.String
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      Field field0 = null;
      try {
        field0 = new Field(booleanType0, booleanType0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Boolean, but class com.facebook.presto.common.type.BooleanType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      Field field0 = null;
      try {
        field0 = new Field(integerType0, integerType0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Long or Integer, but class com.facebook.presto.common.type.IntegerType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigintType bigintType0 = BigintType.BIGINT;
      Field field0 = null;
      try {
        field0 = new Field(bigintType0, bigintType0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Long, but class com.facebook.presto.common.type.BigintType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigintType bigintType0 = BigintType.BIGINT;
      Long long0 = new Long(2147483647L);
      Field field0 = new Field(long0, bigintType0, false);
      // Undeclared exception!
      try { 
        field0.getDate();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.sql.Date
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigintType bigintType0 = BigintType.BIGINT;
      ArrayType arrayType0 = new ArrayType(bigintType0);
      List<Type> list0 = arrayType0.getTypeParameters();
      RowType rowType0 = RowType.anonymous(list0);
      Field field0 = null;
      try {
        field0 = new Field(rowType0, arrayType0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Object is not a Block, but class com.facebook.presto.common.type.RowType
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      String string0 = field0.toString();
      assertFalse(field0.isIndexed());
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      boolean boolean0 = field0.equals((Object) null);
      assertFalse(field0.isIndexed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      Field field0 = new Field((Object) null, kdbTreeType0, true);
      Field field1 = null;
      try {
        field1 = new Field(field0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type KdbTree
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      Field field0 = new Field((Object) null, varbinaryType0, true);
      Field field1 = null;
      try {
        field1 = new Field(field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      Field field0 = new Field((Object) null, varcharType0, true);
      Field field1 = new Field(field0);
      assertTrue(field0.isIndexed());
      assertFalse(field1.isIndexed());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      Field field0 = new Field((Object) null, timestampType0);
      Field field1 = null;
      try {
        field1 = new Field(field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeType timeType0 = TimeType.TIME;
      Field field0 = new Field((Object) null, timeType0);
      Field field1 = null;
      try {
        field1 = new Field(field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      Field field1 = new Field(field0);
      assertFalse(field1.isIndexed());
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleType doubleType0 = DoubleType.DOUBLE;
      Field field0 = new Field((Object) null, doubleType0);
      Field field1 = new Field(field0);
      assertFalse(field1.isIndexed());
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateType dateType0 = DateType.DATE;
      Field field0 = new Field((Object) null, dateType0);
      Field field1 = null;
      try {
        field1 = new Field(field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigintType bigintType0 = BigintType.BIGINT;
      Field field0 = new Field((Object) null, bigintType0);
      Field field1 = new Field(field0);
      assertFalse(field1.isIndexed());
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DoubleType doubleType0 = DoubleType.DOUBLE;
      ArrayType arrayType0 = new ArrayType(doubleType0);
      Field field0 = new Field((Object) null, arrayType0, false);
      Field field1 = new Field(field0);
      assertFalse(field1.isIndexed());
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      Field field0 = new Field((Object) null, smallintType0);
      field0.getInt();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getMap();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getObject();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      Field field0 = new Field((Object) null, smallintType0);
      Field field1 = new Field(field0);
      assertTrue(field1.isNull());
      
      boolean boolean0 = field0.equals(field1);
      assertFalse(field1.isIndexed());
      assertFalse(field0.isIndexed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      Field field0 = new Field((Object) null, smallintType0);
      field0.getVarbinary();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      Field field0 = new Field((Object) null, smallintType0);
      field0.getTimestamp();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DoubleType doubleType0 = DoubleType.DOUBLE;
      Field field0 = new Field((Object) null, doubleType0);
      field0.getDouble();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getLong();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      Field field0 = new Field((Object) null, varcharType0, true);
      field0.getFloat();
      assertTrue(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getDate();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getArray();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.hashCode();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Field field0 = new Field((Object) null, tinyintType0, false);
      field0.getBoolean();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      Field field0 = new Field((Object) null, smallintType0);
      field0.getVarchar();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IdentityHashMap<String, Long> identityHashMap0 = new IdentityHashMap<String, Long>();
      BigintEnumType.LongEnumMap bigintEnumType_LongEnumMap0 = new BigintEnumType.LongEnumMap("C(yEzISExbXTqQ!Q #", identityHashMap0);
      BigintEnumType bigintEnumType0 = new BigintEnumType(bigintEnumType_LongEnumMap0);
      Field field0 = new Field((Object) null, bigintEnumType0);
      field0.getByte();
      assertFalse(field0.isIndexed());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IdentityHashMap<String, Long> identityHashMap0 = new IdentityHashMap<String, Long>();
      BigintEnumType.LongEnumMap bigintEnumType_LongEnumMap0 = new BigintEnumType.LongEnumMap("C(yEzISExbXTqQ!Q #", identityHashMap0);
      BigintEnumType bigintEnumType0 = new BigintEnumType(bigintEnumType_LongEnumMap0);
      Field field0 = new Field((Object) null, bigintEnumType0);
      boolean boolean0 = field0.isIndexed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      Byte byte0 = new Byte((byte) (-10));
      Field field0 = new Field(byte0, tinyintType0, false);
      // Undeclared exception!
      try { 
        field0.getTime();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.sql.Time
         //
         verifyException("com.facebook.presto.accumulo.model.Field", e);
      }
  }
}
