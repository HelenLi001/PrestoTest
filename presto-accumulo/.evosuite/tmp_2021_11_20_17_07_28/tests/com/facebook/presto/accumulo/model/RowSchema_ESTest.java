/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 01:31:23 GMT 2021
 */

package com.facebook.presto.accumulo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.accumulo.model.AccumuloColumnHandle;
import com.facebook.presto.accumulo.model.RowSchema;
import com.facebook.presto.common.type.BigintType;
import com.facebook.presto.common.type.DecimalType;
import com.facebook.presto.common.type.HyperLogLogType;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.SmallintType;
import com.facebook.presto.common.type.TimestampWithTimeZoneType;
import com.facebook.presto.common.type.Type;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RowSchema_ESTest extends RowSchema_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      // Undeclared exception!
      try { 
        rowSchema0.getColumn(278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index must be non-negative and less than length
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      rowSchema0.addRowId("Y", hyperLogLogType0);
      int int0 = rowSchema0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowSchema.fromColumns((List<AccumuloColumnHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.accumulo.model.RowSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      // Undeclared exception!
      try { 
        rowSchema0.addRowId("Qde$LmGR<]BIT", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      // Undeclared exception!
      try { 
        rowSchema0.addColumn("i&V Q5FP", (Optional<String>) null, (Optional<String>) null, (Type) kdbTreeType0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // family is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      SmallintType smallintType0 = SmallintType.SMALLINT;
      RowSchema rowSchema1 = rowSchema0.addRowId("_O0U8#+]Jy~A#", smallintType0);
      String string0 = rowSchema1.toString();
      assertEquals("{_O0U8#+]Jy~A# smallint}", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      String string0 = rowSchema0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      TimestampWithTimeZoneType timestampWithTimeZoneType0 = TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;
      rowSchema0.addRowId("Provider<Injector>", timestampWithTimeZoneType0);
      List<AccumuloColumnHandle> list0 = rowSchema0.getColumns();
      RowSchema rowSchema1 = RowSchema.fromColumns(list0);
      assertEquals(1, rowSchema1.getLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      BigintType bigintType0 = BigintType.BIGINT;
      rowSchema0.addRowId("", bigintType0);
      AccumuloColumnHandle accumuloColumnHandle0 = rowSchema0.getColumn("");
      assertFalse(accumuloColumnHandle0.isIndexed());
      assertEquals("Accumulo row ID", accumuloColumnHandle0.getComment());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      TimestampWithTimeZoneType timestampWithTimeZoneType0 = TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;
      RowSchema rowSchema1 = rowSchema0.addRowId("P9R}zx `Sk^-(Y", timestampWithTimeZoneType0);
      // Undeclared exception!
      try { 
        rowSchema1.getColumn("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No column with name 
         //
         verifyException("com.facebook.presto.accumulo.model.RowSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      SmallintType smallintType0 = SmallintType.SMALLINT;
      rowSchema0.addRowId("_O0U8#+]Jy~A#", smallintType0);
      AccumuloColumnHandle accumuloColumnHandle0 = rowSchema0.getColumn(0);
      assertFalse(accumuloColumnHandle0.isIndexed());
      assertEquals("Accumulo row ID", accumuloColumnHandle0.getComment());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      // Undeclared exception!
      try { 
        rowSchema0.getColumn(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index must be non-negative and less than length
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      // Undeclared exception!
      try { 
        rowSchema0.getColumn((-2243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index must be non-negative and less than length
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      List<AccumuloColumnHandle> list0 = rowSchema0.getColumns();
      RowSchema rowSchema1 = RowSchema.fromColumns(list0);
      assertNotSame(rowSchema0, rowSchema1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      DecimalType decimalType0 = DecimalType.createDecimalType();
      // Undeclared exception!
      try { 
        rowSchema0.addColumn("3+cK", (Optional<String>) null, (Optional<String>) null, (Type) decimalType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // family is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RowSchema rowSchema0 = new RowSchema();
      int int0 = rowSchema0.getLength();
      assertEquals(0, int0);
  }
}
