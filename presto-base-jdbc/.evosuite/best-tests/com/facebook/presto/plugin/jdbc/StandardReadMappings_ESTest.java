/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 04:43:09 GMT 2021
 */

package com.facebook.presto.plugin.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.CharType;
import com.facebook.presto.common.type.DecimalType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.plugin.jdbc.JdbcTypeHandle;
import com.facebook.presto.plugin.jdbc.ReadMapping;
import com.facebook.presto.plugin.jdbc.StandardReadMappings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StandardReadMappings_ESTest extends StandardReadMappings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        StandardReadMappings.jdbcTypeToPrestoType((JdbcTypeHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.StandardReadMappings", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        StandardReadMappings.decimalReadMapping((DecimalType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.StandardReadMappings", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.varbinaryReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.timeReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.bigintReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.smallintReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.dateReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.doubleReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.integerReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.realReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.tinyintReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.booleanReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReadMapping readMapping0 = StandardReadMappings.timestampReadMapping();
      assertNotNull(readMapping0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        StandardReadMappings.charReadMapping((CharType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        StandardReadMappings.varcharReadMapping((VarcharType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
