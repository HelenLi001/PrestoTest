/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 04:40:55 GMT 2021
 */

package com.facebook.presto.plugin.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.BigintEnumType;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.VarcharEnumType;
import com.facebook.presto.plugin.jdbc.BaseJdbcClient;
import com.facebook.presto.plugin.jdbc.BaseJdbcConfig;
import com.facebook.presto.plugin.jdbc.ConnectionFactory;
import com.facebook.presto.plugin.jdbc.DriverConnectionFactory;
import com.facebook.presto.plugin.jdbc.JdbcConnectorId;
import com.facebook.presto.plugin.jdbc.JdbcIdentity;
import com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle;
import com.facebook.presto.spi.SchemaTableName;
import com.google.common.collect.Range;
import com.mysql.jdbc.JDBC4ReplicationMySQLConnection;
import com.mysql.jdbc.MultiHostConnectionProxy;
import com.mysql.jdbc.MultiHostMySQLConnection;
import com.mysql.jdbc.ReplicationConnectionProxy;
import com.mysql.jdbc.ReplicationMySQLConnection;
import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Optional;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.h2.Driver;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseJdbcClient_ESTest extends BaseJdbcClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optional<String> optional0 = Optional.ofNullable("");
      Optional<String> optional1 = BaseJdbcClient.escapeNamePattern(optional0, optional0);
      Optional<String> optional2 = BaseJdbcClient.escapeNamePattern(optional1, optional0);
      assertNotSame(optional2, optional0);
      assertTrue(optional2.equals((Object)optional0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("%QM5>5f");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("%QM5>5f");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "%QM5>5f", driverConnectionFactory0);
      String string0 = baseJdbcClient0.quoted("%QM5>5f");
      assertEquals("%QM5>5f%QM5>5f%QM5>5f%QM5>5f", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("com.facebook.presto.sql.gen.RowExpressionPredicateCompiler$CacheKey");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = Driver.load();
      Optional<String> optional0 = Optional.empty();
      Properties properties0 = DriverConnectionFactory.basicConnectionProperties(baseJdbcConfig0);
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, "", optional0, optional0, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "", driverConnectionFactory0);
      String string0 = baseJdbcClient0.getIdentifierQuote();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("n");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("U>`UpbBHYff");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "", driverConnectionFactory0);
      JDBC4ReplicationMySQLConnection jDBC4ReplicationMySQLConnection0 = new JDBC4ReplicationMySQLConnection((ReplicationConnectionProxy) null);
      // Undeclared exception!
      try { 
        baseJdbcClient0.toRemoteTableName((JdbcIdentity) null, jDBC4ReplicationMySQLConnection0, "SELECT host,db,table_name,grantor,user,table_priv FROM mysql.tables_priv WHERE db LIKE ? AND table_name LIKE ?.n.MpbzvnOF4nkg&W", "^iV[q,g/ N>V!qn8eR7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected table name from internal metadata to be lowercase: ^iV[q,g/ N>V!qn8eR7
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("");
      Driver driver0 = Driver.load();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "%hQ:B@jw2H9g", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.renameTable((JdbcIdentity) null, "tmp_presto_00000000010040008200000003000000", (SchemaTableName) null, (SchemaTableName) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Driver returned null connection
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId(".");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl(".");
      Driver driver0 = Driver.load();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "cancelRowUpdates", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.listTablesByLowerCase((Connection) null, ",wq^K0fOF7bV%>68[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.BaseJdbcClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("3U>eW<");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.listSchemas((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.BaseJdbcClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = Driver.load();
      Optional<String> optional0 = Optional.ofNullable("- @ya");
      Properties properties0 = new Properties();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, "", optional0, optional0, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "- @ya", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.getTableNames((JdbcIdentity) null, optional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.DriverConnectionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = Driver.load();
      Optional<String> optional0 = Optional.ofNullable("- @ya");
      Range<String> range0 = Range.closedOpen("", "");
      Optional<String> optional1 = optional0.filter(range0);
      Properties properties0 = new Properties();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, "", optional1, optional1, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "- @ya", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.getTableNames((JdbcIdentity) null, optional0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Driver returned null connection
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = Driver.load();
      Optional<String> optional0 = Optional.ofNullable("- @ya");
      Properties properties0 = new Properties();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, "", optional0, optional0, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "xuERXB{[Ps", driverConnectionFactory0);
      SchemaTableName schemaTableName0 = new SchemaTableName("`gB]_[pE8", ";PyiCa-YC/\"?7*(yCP");
      // Undeclared exception!
      try { 
        baseJdbcClient0.getTableHandle((JdbcIdentity) null, schemaTableName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.DriverConnectionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("c");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("c");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "#%Qx?._{JoUEK\"|~?uC", driverConnectionFactory0);
      Reference2ObjectOpenHashMap<String, String> reference2ObjectOpenHashMap0 = new Reference2ObjectOpenHashMap<String, String>();
      JdbcIdentity jdbcIdentity0 = new JdbcIdentity("dPL)", reference2ObjectOpenHashMap0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.getSchemaNames(jdbcIdentity0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Driver returned null connection
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("n");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("U>`UpbBHYff");
      BaseJdbcConfig baseJdbcConfig2 = baseJdbcConfig1.setPasswordCredentialName("U>`UpbBHYff");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig2, "", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.getConnection((JdbcIdentity) null, (JdbcOutputTableHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.DriverConnectionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("");
      Driver driver0 = Driver.load();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "%hQ:B@jw2H9g", driverConnectionFactory0);
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      MultiHostMySQLConnection multiHostMySQLConnection0 = new MultiHostMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.execute(multiHostMySQLConnection0, "COLUMN_SIZE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.jdbc.MultiHostMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("");
      Driver driver0 = Driver.load();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "%hQ:B@jw2H9g", driverConnectionFactory0);
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.execute(replicationMySQLConnection0, "&`#PiG1p@,");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$682303269 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseJdbcClient.escapeNamePattern((Optional<String>) null, (Optional<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.BaseJdbcClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcClient baseJdbcClient0 = null;
      try {
        baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "timestamp with timezone", (ConnectionFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectionFactory is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Optional<String> optional0 = Optional.of("varchar(");
      Optional<String> optional1 = Optional.empty();
      Optional<String> optional2 = BaseJdbcClient.escapeNamePattern(optional0, optional1);
      assertNotSame(optional2, optional1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object2ObjectOpenHashMap<String, String> object2ObjectOpenHashMap0 = new Object2ObjectOpenHashMap<String, String>();
      VarcharEnumType.VarcharEnumMap varcharEnumType_VarcharEnumMap0 = new VarcharEnumType.VarcharEnumMap(" milliseconds.", object2ObjectOpenHashMap0);
      Optional<String> optional0 = varcharEnumType_VarcharEnumMap0.getKeyForValue("~Q\"tMWhj%NAM");
      Optional<String> optional1 = BaseJdbcClient.escapeNamePattern(optional0, optional0);
      assertSame(optional0, optional1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "A`~r[UpFV", driverConnectionFactory0);
      String string0 = baseJdbcClient0.quoted("", "", "");
      assertEquals("A`~r[UpFVA`~r[UpFV", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("n");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("U>`UpbBHYff");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "", driverConnectionFactory0);
      String string0 = baseJdbcClient0.quoted("SELECT host,db,table_name,grantor,user,table_priv FROM mysql.tables_priv WHERE db LIKE ? AND table_name LIKE ?", "n", "MpbzvnOF4nkg&W");
      assertEquals("SELECT host,db,table_name,grantor,user,table_priv FROM mysql.tables_priv WHERE db LIKE ? AND table_name LIKE ?.n.MpbzvnOF4nkg&W", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId(" milliseconds.");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = new Driver();
      Object2ObjectOpenHashMap<String, String> object2ObjectOpenHashMap0 = new Object2ObjectOpenHashMap<String, String>();
      VarcharEnumType.VarcharEnumMap varcharEnumType_VarcharEnumMap0 = new VarcharEnumType.VarcharEnumMap(" milliseconds.", object2ObjectOpenHashMap0);
      Optional<String> optional0 = varcharEnumType_VarcharEnumMap0.getKeyForValue("~Q\"tMWhj%NAM");
      Properties properties0 = DriverConnectionFactory.basicConnectionProperties(baseJdbcConfig0);
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, " milliseconds.", optional0, optional0, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "cL#uGP-_7zR", driverConnectionFactory0);
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      // Undeclared exception!
      try { 
        baseJdbcClient0.toSqlType(kdbTreeType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported column type: KdbTree
         //
         verifyException("com.facebook.presto.plugin.jdbc.BaseJdbcClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("SYSTEM_SAVEPOINT_");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = Driver.load();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      BigintEnumType.LongEnumMap bigintEnumType_LongEnumMap0 = new BigintEnumType.LongEnumMap("", hashMap0);
      BigintEnumType bigintEnumType0 = new BigintEnumType(bigintEnumType_LongEnumMap0);
      Long long0 = new Long(2811L);
      Optional<String> optional0 = bigintEnumType0.getEnumKeyForValue(long0);
      Properties properties0 = DriverConnectionFactory.basicConnectionProperties(baseJdbcConfig0);
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, "", optional0, optional0, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "pm=", driverConnectionFactory0);
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.listTablesByLowerCase(replicationMySQLConnection0, "TABLE_NAME");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$682303269 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("SYSTEM_SAVEPOINT_");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = Driver.load();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      BigintEnumType.LongEnumMap bigintEnumType_LongEnumMap0 = new BigintEnumType.LongEnumMap("", hashMap0);
      BigintEnumType bigintEnumType0 = new BigintEnumType(bigintEnumType_LongEnumMap0);
      Long long0 = new Long(2811L);
      Optional<String> optional0 = bigintEnumType0.getEnumKeyForValue(long0);
      Properties properties0 = DriverConnectionFactory.basicConnectionProperties(baseJdbcConfig0);
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, "", optional0, optional0, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "pm=", driverConnectionFactory0);
      String string0 = baseJdbcClient0.getIdentifierQuote();
      assertEquals("pm=", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("html");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("html");
      Driver driver0 = Driver.load();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "html", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.listSchemasByLowerCase((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.BaseJdbcClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      Driver driver0 = Driver.load();
      Optional<String> optional0 = Optional.ofNullable("- @ya");
      Properties properties0 = new Properties();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, "", optional0, optional0, properties0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "- @ya", driverConnectionFactory0);
      baseJdbcClient0.destroy();
      assertEquals("- @ya", baseJdbcClient0.getIdentifierQuote());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("n");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("U>`UpbBHYff");
      Driver driver0 = new Driver();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.getConnection((JdbcIdentity) null, (JdbcOutputTableHandle) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Driver returned null connection
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("html");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("html");
      Driver driver0 = Driver.load();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig0);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig1, "html", driverConnectionFactory0);
      // Undeclared exception!
      try { 
        baseJdbcClient0.getPreparedStatement((Connection) null, "valueComparator was already set");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.BaseJdbcClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JdbcConnectorId jdbcConnectorId0 = new JdbcConnectorId("");
      BaseJdbcConfig baseJdbcConfig0 = new BaseJdbcConfig();
      BaseJdbcConfig baseJdbcConfig1 = baseJdbcConfig0.setConnectionUrl("");
      Driver driver0 = Driver.load();
      DriverConnectionFactory driverConnectionFactory0 = new DriverConnectionFactory(driver0, baseJdbcConfig1);
      BaseJdbcClient baseJdbcClient0 = new BaseJdbcClient(jdbcConnectorId0, baseJdbcConfig0, "%hQ:B@jw2H9g", driverConnectionFactory0);
      String string0 = baseJdbcClient0.generateTemporaryTableName();
      assertEquals("tmp_presto_00000000010040008200000003000000", string0);
      assertEquals("%hQ:B@jw2H9g", baseJdbcClient0.getIdentifierQuote());
  }
}
