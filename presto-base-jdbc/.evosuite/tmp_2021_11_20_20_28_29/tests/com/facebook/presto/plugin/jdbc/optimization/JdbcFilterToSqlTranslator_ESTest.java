/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 04:46:27 GMT 2021
 */

package com.facebook.presto.plugin.jdbc.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.expressions.translator.FunctionTranslator;
import com.facebook.presto.expressions.translator.RowExpressionTreeTranslator;
import com.facebook.presto.expressions.translator.TranslatedExpression;
import com.facebook.presto.plugin.jdbc.optimization.JdbcExpression;
import com.facebook.presto.plugin.jdbc.optimization.JdbcFilterToSqlTranslator;
import com.facebook.presto.spi.ColumnHandle;
import com.facebook.presto.spi.function.FunctionMetadataManager;
import com.facebook.presto.spi.relation.CallExpression;
import com.facebook.presto.spi.relation.ConstantExpression;
import com.facebook.presto.spi.relation.LambdaDefinitionExpression;
import com.facebook.presto.spi.relation.SpecialFormExpression;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JdbcFilterToSqlTranslator_ESTest extends JdbcFilterToSqlTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator(functionMetadataManager0, functionTranslator0, "`+}?YA;^B{t5MG$5*W");
      CallExpression callExpression0 = mock(CallExpression.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(callExpression0).getArguments();
      RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>> rowExpressionTreeTranslator0 = (RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>>) mock(RowExpressionTreeTranslator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jdbcFilterToSqlTranslator0.translateCall(callExpression0, (Map<VariableReferenceExpression, ColumnHandle>) null, rowExpressionTreeTranslator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.optimization.JdbcFilterToSqlTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator(functionMetadataManager0, functionTranslator0, "");
      RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>> rowExpressionTreeTranslator0 = (RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>>) mock(RowExpressionTreeTranslator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jdbcFilterToSqlTranslator0.translateLambda((LambdaDefinitionExpression) null, (Map<VariableReferenceExpression, ColumnHandle>) null, rowExpressionTreeTranslator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator(functionMetadataManager0, functionTranslator0, "");
      ConstantExpression constantExpression0 = mock(ConstantExpression.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(constantExpression0).getType();
      RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>> rowExpressionTreeTranslator0 = (RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>>) mock(RowExpressionTreeTranslator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jdbcFilterToSqlTranslator0.translateConstant(constantExpression0, (Map<VariableReferenceExpression, ColumnHandle>) null, rowExpressionTreeTranslator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = null;
      try {
        jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator((FunctionMetadataManager) null, functionTranslator0, "G._&RPn7,v)r,-ySUb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // functionMetadataManager is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator(functionMetadataManager0, functionTranslator0, "");
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(specialFormExpression0).getArguments();
      RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>> rowExpressionTreeTranslator0 = (RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>>) mock(RowExpressionTreeTranslator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jdbcFilterToSqlTranslator0.translateSpecialForm(specialFormExpression0, (Map<VariableReferenceExpression, ColumnHandle>) null, rowExpressionTreeTranslator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.optimization.JdbcFilterToSqlTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator(functionMetadataManager0, functionTranslator0, "");
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      ConstantExpression constantExpression0 = mock(ConstantExpression.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(constantExpression0).getType();
      RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>> rowExpressionTreeTranslator0 = (RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>>) mock(RowExpressionTreeTranslator.class, new ViolatedAssumptionAnswer());
      TranslatedExpression<JdbcExpression> translatedExpression0 = jdbcFilterToSqlTranslator0.translateConstant(constantExpression0, (Map<VariableReferenceExpression, ColumnHandle>) null, rowExpressionTreeTranslator0);
      assertNotNull(translatedExpression0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator(functionMetadataManager0, functionTranslator0, "");
      LambdaDefinitionExpression lambdaDefinitionExpression0 = mock(LambdaDefinitionExpression.class, new ViolatedAssumptionAnswer());
      RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>> rowExpressionTreeTranslator0 = (RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>>) mock(RowExpressionTreeTranslator.class, new ViolatedAssumptionAnswer());
      TranslatedExpression<JdbcExpression> translatedExpression0 = jdbcFilterToSqlTranslator0.translateLambda(lambdaDefinitionExpression0, (Map<VariableReferenceExpression, ColumnHandle>) null, rowExpressionTreeTranslator0);
      assertNotNull(translatedExpression0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      FunctionTranslator<JdbcExpression> functionTranslator0 = (FunctionTranslator<JdbcExpression>) mock(FunctionTranslator.class, new ViolatedAssumptionAnswer());
      JdbcFilterToSqlTranslator jdbcFilterToSqlTranslator0 = new JdbcFilterToSqlTranslator(functionMetadataManager0, functionTranslator0, "(n'2.g");
      VariableReferenceExpression variableReferenceExpression0 = mock(VariableReferenceExpression.class, new ViolatedAssumptionAnswer());
      RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>> rowExpressionTreeTranslator0 = (RowExpressionTreeTranslator<JdbcExpression, Map<VariableReferenceExpression, ColumnHandle>>) mock(RowExpressionTreeTranslator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jdbcFilterToSqlTranslator0.translateVariable(variableReferenceExpression0, (Map<VariableReferenceExpression, ColumnHandle>) null, rowExpressionTreeTranslator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.jdbc.optimization.JdbcFilterToSqlTranslator", e);
      }
  }
}
