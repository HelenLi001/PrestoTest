/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:32:44 GMT 2021
 */

package com.facebook.presto.benchmark.driver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.benchmark.driver.BenchmarkQuery;
import com.facebook.presto.benchmark.driver.BenchmarkQueryResult;
import com.facebook.presto.benchmark.driver.Stat;
import com.facebook.presto.benchmark.driver.Suite;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BenchmarkQueryResult_ESTest extends BenchmarkQueryResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(suite0).getName();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(benchmarkQuery0).getName();
      doReturn((String) null).when(benchmarkQuery0).toString();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "+&-m!P@& J$ER");
      BenchmarkQuery benchmarkQuery1 = benchmarkQueryResult0.getBenchmarkQuery();
      Stat stat0 = benchmarkQueryResult0.getWallTimeNanos();
      // Undeclared exception!
      try { 
        BenchmarkQueryResult.passResult(suite0, benchmarkQuery1, (Stat) null, stat0, (Stat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // wallTimeNanos is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(suite0).getName();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(benchmarkQuery0).getName();
      doReturn((String) null).when(benchmarkQuery0).toString();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "");
      BenchmarkQuery benchmarkQuery1 = benchmarkQueryResult0.getBenchmarkQuery();
      Stat stat0 = benchmarkQueryResult0.getQueryCpuTimeNanos();
      // Undeclared exception!
      try { 
        BenchmarkQueryResult.passResult(suite0, benchmarkQuery1, stat0, stat0, (Stat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // queryCpuTimeNanos is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        BenchmarkQueryResult.failResult((Suite) null, (BenchmarkQuery) null, "RY^+(h-'a`4g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suite is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i", "+o[googlecomon.ase.ChaHMatcher$c%i").when(suite0).getName();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i", "+o[googlecomon.ase.ChaHMatcher$c%i").when(benchmarkQuery0).getName();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "+o[googlecomon.ase.ChaHMatcher$c%i");
      // Undeclared exception!
      try { 
        benchmarkQueryResult0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is not a number
         //
         verifyException("io.airlift.units.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i").when(suite0).getName();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i").when(benchmarkQuery0).getName();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "+o[googlecomon.ase.ChaHMatcher$c%i");
      Stat stat0 = benchmarkQueryResult0.getProcessCpuTimeNanos();
      assertEquals(Double.NaN, stat0.getMedian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i").when(suite0).getName();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i").when(benchmarkQuery0).getName();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "+o[googlecomon.ase.ChaHMatcher$c%i");
      BenchmarkQueryResult.Status benchmarkQueryResult_Status0 = benchmarkQueryResult0.getStatus();
      assertEquals(BenchmarkQueryResult.Status.FAIL, benchmarkQueryResult_Status0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i").when(suite0).getName();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn("+o[googlecomon.ase.ChaHMatcher$c%i").when(benchmarkQuery0).getName();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "+o[googlecomon.ase.ChaHMatcher$c%i");
      Optional<String> optional0 = benchmarkQueryResult0.getErrorMessage();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(suite0).getName();
      doReturn((String) null).when(suite0).toString();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(benchmarkQuery0).getName();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "");
      Suite suite1 = benchmarkQueryResult0.getSuite();
      assertSame(suite1, suite0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(suite0).getName();
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(benchmarkQuery0).getName();
      doReturn((String) null).when(benchmarkQuery0).toString();
      BenchmarkQueryResult benchmarkQueryResult0 = BenchmarkQueryResult.failResult(suite0, benchmarkQuery0, "");
      BenchmarkQuery benchmarkQuery1 = benchmarkQueryResult0.getBenchmarkQuery();
      Stat stat0 = benchmarkQueryResult0.getQueryCpuTimeNanos();
      BenchmarkQueryResult benchmarkQueryResult1 = BenchmarkQueryResult.passResult(suite0, benchmarkQuery1, stat0, stat0, stat0);
      assertNotSame(benchmarkQueryResult0, benchmarkQueryResult1);
  }
}
