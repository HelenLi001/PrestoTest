/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:28:29 GMT 2021
 */

package com.facebook.presto.benchmark.driver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.benchmark.driver.BenchmarkQueryRunner;
import com.google.common.net.HostAndPort;
import java.net.URI;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BenchmarkQueryRunner_ESTest extends BenchmarkQueryRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HostAndPort hostAndPort0 = HostAndPort.fromHost("");
      Optional<HostAndPort> optional0 = Optional.ofNullable(hostAndPort0);
      BenchmarkQueryRunner benchmarkQueryRunner0 = null;
      try {
        benchmarkQueryRunner0 = new BenchmarkQueryRunner(1536, 1536, true, 0, uRI0, optional0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.facebook.airlift.stats.QuantileDigest
         //
         verifyException("com.facebook.airlift.stats.TimeDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Optional<HostAndPort> optional0 = Optional.empty();
      BenchmarkQueryRunner benchmarkQueryRunner0 = null;
      try {
        benchmarkQueryRunner0 = new BenchmarkQueryRunner(79, 79, false, 79, uRI0, optional0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.facebook.airlift.stats.QuantileDigest
         //
         verifyException("com.facebook.airlift.stats.TimeDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Optional<HostAndPort> optional0 = Optional.empty();
      BenchmarkQueryRunner benchmarkQueryRunner0 = null;
      try {
        benchmarkQueryRunner0 = new BenchmarkQueryRunner(3081, 3081, true, (-921), uRI0, optional0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFailures must be at least 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      BenchmarkQueryRunner benchmarkQueryRunner0 = null;
      try {
        benchmarkQueryRunner0 = new BenchmarkQueryRunner(1, 1, false, 1, uRI0, (Optional<HostAndPort>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // socksProxy is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      BenchmarkQueryRunner benchmarkQueryRunner0 = null;
      try {
        benchmarkQueryRunner0 = new BenchmarkQueryRunner(0, 0, true, 0, uRI0, (Optional<HostAndPort>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // runs must be at least 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Optional<HostAndPort> optional0 = Optional.empty();
      BenchmarkQueryRunner benchmarkQueryRunner0 = null;
      try {
        benchmarkQueryRunner0 = new BenchmarkQueryRunner((-17), (-17), false, (-17), uRI0, optional0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // warm is negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
