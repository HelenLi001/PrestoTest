/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:31:23 GMT 2021
 */

package com.facebook.presto.benchmark.driver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.benchmark.driver.BenchmarkQuery;
import com.facebook.presto.benchmark.driver.BenchmarkQueryResult;
import com.facebook.presto.benchmark.driver.BenchmarkResultsPrinter;
import com.facebook.presto.benchmark.driver.BenchmarkSchema;
import com.facebook.presto.benchmark.driver.Suite;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BenchmarkResultsPrinter_ESTest extends BenchmarkResultsPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Iterator<Suite> iterator0 = (Iterator<Suite>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Iterable<Suite> iterable0 = (Iterable<Suite>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      Iterable<BenchmarkQuery> iterable1 = (Iterable<BenchmarkQuery>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      BenchmarkResultsPrinter benchmarkResultsPrinter0 = new BenchmarkResultsPrinter(iterable0, iterable1);
      BenchmarkSchema benchmarkSchema0 = mock(BenchmarkSchema.class, new ViolatedAssumptionAnswer());
      BenchmarkQuery benchmarkQuery0 = mock(BenchmarkQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(benchmarkQuery0).getTags();
      BenchmarkQueryResult benchmarkQueryResult0 = mock(BenchmarkQueryResult.class, new ViolatedAssumptionAnswer());
      doReturn(benchmarkQuery0).when(benchmarkQueryResult0).getBenchmarkQuery();
      // Undeclared exception!
      try { 
        benchmarkResultsPrinter0.store(benchmarkSchema0, benchmarkQueryResult0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Suite suite0 = mock(Suite.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, (List) null, (List) null, (List) null, (List) null).when(suite0).getSchemaNameTemplates();
      doReturn((List) null, (List) null, (List) null, (List) null, (List) null).when(suite0).selectQueries(anyIterable());
      Iterator<Suite> iterator0 = (Iterator<Suite>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(iterator0).hasNext();
      doReturn(suite0, (Object) null, (Object) null, (Object) null, (Object) null).when(iterator0).next();
      Iterable<Suite> iterable0 = (Iterable<Suite>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      BenchmarkResultsPrinter benchmarkResultsPrinter0 = new BenchmarkResultsPrinter(iterable0, (Iterable<BenchmarkQuery>) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BenchmarkResultsPrinter benchmarkResultsPrinter0 = null;
      try {
        benchmarkResultsPrinter0 = new BenchmarkResultsPrinter((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // tagNames is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
