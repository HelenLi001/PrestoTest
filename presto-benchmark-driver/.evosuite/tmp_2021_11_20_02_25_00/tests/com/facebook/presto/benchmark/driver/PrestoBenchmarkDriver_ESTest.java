/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:27:33 GMT 2021
 */

package com.facebook.presto.benchmark.driver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.airlift.log.Logging;
import com.facebook.presto.benchmark.driver.BenchmarkQuery;
import com.facebook.presto.benchmark.driver.BenchmarkResultsStore;
import com.facebook.presto.benchmark.driver.PrestoBenchmarkDriver;
import com.facebook.presto.benchmark.driver.Suite;
import io.airlift.airline.Accessor;
import io.airlift.airline.HelpOption;
import io.airlift.airline.model.ArgumentsMetadata;
import io.airlift.airline.model.CommandMetadata;
import io.airlift.airline.model.OptionMetadata;
import java.nio.file.NoSuchFileException;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrestoBenchmarkDriver_ESTest extends PrestoBenchmarkDriver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrestoBenchmarkDriver prestoBenchmarkDriver0 = new PrestoBenchmarkDriver();
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "benchmarkDriverOptions", (Object) prestoBenchmarkDriver0.benchmarkDriverOptions);
      HelpOption helpOption0 = new HelpOption();
      HashSet<OptionMetadata> hashSet0 = new HashSet<OptionMetadata>();
      LinkedList<Accessor> linkedList0 = new LinkedList<Accessor>();
      Class<Suite> class0 = Suite.class;
      CommandMetadata commandMetadata0 = new CommandMetadata("nLLup$!OOqd4{(F ~g", "com.facebook.presto", (boolean) helpOption0.help, hashSet0, hashSet0, hashSet0, (ArgumentsMetadata) null, linkedList0, class0);
      Injector.inject(helpOption0, (Class<?>) HelpOption.class, "commandMetadata", (Object) commandMetadata0);
      Injector.validateBean(helpOption0, (Class<?>) HelpOption.class);
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "helpOption", (Object) helpOption0);
      Injector.validateBean(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class);
      Logging.initialize();
      String[] stringArray0 = new String[0];
      try { 
        prestoBenchmarkDriver0.run(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot read file: suite.json
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrestoBenchmarkDriver prestoBenchmarkDriver0 = new PrestoBenchmarkDriver();
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "benchmarkDriverOptions", (Object) prestoBenchmarkDriver0.benchmarkDriverOptions);
      HelpOption helpOption0 = new HelpOption();
      HashSet<OptionMetadata> hashSet0 = new HashSet<OptionMetadata>();
      LinkedList<Accessor> linkedList0 = new LinkedList<Accessor>();
      Class<Suite> class0 = Suite.class;
      CommandMetadata commandMetadata0 = new CommandMetadata("nLLup$!OOqd4{(F ~g", "com.facebook.presto", (boolean) helpOption0.help, hashSet0, hashSet0, hashSet0, (ArgumentsMetadata) null, linkedList0, class0);
      Injector.inject(helpOption0, (Class<?>) HelpOption.class, "commandMetadata", (Object) commandMetadata0);
      Injector.validateBean(helpOption0, (Class<?>) HelpOption.class);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("suite.json");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "key");
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "helpOption", (Object) helpOption0);
      Injector.validateBean(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class);
      String[] stringArray0 = new String[0];
      try { 
        prestoBenchmarkDriver0.run(stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrestoBenchmarkDriver prestoBenchmarkDriver0 = new PrestoBenchmarkDriver();
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "benchmarkDriverOptions", (Object) prestoBenchmarkDriver0.benchmarkDriverOptions);
      HelpOption helpOption0 = new HelpOption();
      LinkedHashSet<OptionMetadata> linkedHashSet0 = new LinkedHashSet<OptionMetadata>(10);
      TreeSet<Accessor> treeSet0 = new TreeSet<Accessor>();
      Class<Suite> class0 = Suite.class;
      CommandMetadata commandMetadata0 = new CommandMetadata("com.facebook.presto", "helen", false, linkedHashSet0, linkedHashSet0, linkedHashSet0, (ArgumentsMetadata) null, treeSet0, class0);
      Injector.inject(helpOption0, (Class<?>) HelpOption.class, "commandMetadata", (Object) commandMetadata0);
      Injector.validateBean(helpOption0, (Class<?>) HelpOption.class);
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "helpOption", (Object) helpOption0);
      Injector.validateBean(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class);
      String[] stringArray0 = new String[2];
      try { 
        prestoBenchmarkDriver0.run(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrestoBenchmarkDriver prestoBenchmarkDriver0 = new PrestoBenchmarkDriver();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "c}";
      stringArray0[1] = "Functions.forPredicate(";
      stringArray0[2] = "c$o=";
      stringArray0[3] = "Tr>zJFsoq8?nN-TU|sq";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "-ouoYMJPW5D,z&";
      stringArray0[7] = "(";
      try { 
        prestoBenchmarkDriver0.run(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Found unexpected parameters: [c}, Functions.forPredicate(, c$o=, Tr>zJFsoq8?nN-TU|sq, , , -ouoYMJPW5D,z&, (]
         //
         verifyException("io.airlift.airline.SingleCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("suite.json");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[0];
      try { 
        PrestoBenchmarkDriver.main(stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        PrestoBenchmarkDriver.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        PrestoBenchmarkDriver.main(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Found unexpected parameters: [java.lang.String@0000000348]
         //
         verifyException("io.airlift.airline.SingleCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrestoBenchmarkDriver prestoBenchmarkDriver0 = new PrestoBenchmarkDriver();
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "benchmarkDriverOptions", (Object) prestoBenchmarkDriver0.benchmarkDriverOptions);
      HelpOption helpOption0 = new HelpOption();
      HashSet<OptionMetadata> hashSet0 = new HashSet<OptionMetadata>(0, 10);
      Vector<OptionMetadata> vector0 = new Vector<OptionMetadata>(hashSet0);
      LinkedHashSet<Accessor> linkedHashSet0 = new LinkedHashSet<Accessor>();
      Class<String> class0 = String.class;
      CommandMetadata commandMetadata0 = new CommandMetadata("B*V9q)]:st$t@)XZ", "B*V9q)]:st$t@)XZ", (boolean) helpOption0.help, hashSet0, hashSet0, vector0, (ArgumentsMetadata) null, linkedHashSet0, class0);
      Injector.inject(helpOption0, (Class<?>) HelpOption.class, "commandMetadata", (Object) commandMetadata0);
      Injector.validateBean(helpOption0, (Class<?>) HelpOption.class);
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "helpOption", (Object) helpOption0);
      Injector.validateBean(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class);
      TreeSet<BenchmarkQuery> treeSet0 = new TreeSet<BenchmarkQuery>();
      // Undeclared exception!
      try { 
        prestoBenchmarkDriver0.getResultsStore((List<Suite>) null, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.benchmark.driver.BenchmarkResultsPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrestoBenchmarkDriver.initializeLogging(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrestoBenchmarkDriver.initializeLogging(true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        PrestoBenchmarkDriver.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot read file: suite.json
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrestoBenchmarkDriver prestoBenchmarkDriver0 = new PrestoBenchmarkDriver();
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "benchmarkDriverOptions", (Object) prestoBenchmarkDriver0.benchmarkDriverOptions);
      HelpOption helpOption0 = new HelpOption();
      LinkedHashSet<OptionMetadata> linkedHashSet0 = new LinkedHashSet<OptionMetadata>();
      LinkedList<Accessor> linkedList0 = new LinkedList<Accessor>();
      Class<Suite> class0 = Suite.class;
      CommandMetadata commandMetadata0 = new CommandMetadata("V*-", "V*-", (boolean) helpOption0.help, linkedHashSet0, linkedHashSet0, linkedHashSet0, (ArgumentsMetadata) null, linkedList0, class0);
      Injector.inject(helpOption0, (Class<?>) HelpOption.class, "commandMetadata", (Object) commandMetadata0);
      Injector.validateBean(helpOption0, (Class<?>) HelpOption.class);
      Injector.inject(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class, "helpOption", (Object) helpOption0);
      Injector.validateBean(prestoBenchmarkDriver0, (Class<?>) PrestoBenchmarkDriver.class);
      Vector<Suite> vector0 = new Vector<Suite>();
      LinkedHashSet<BenchmarkQuery> linkedHashSet1 = new LinkedHashSet<BenchmarkQuery>();
      BenchmarkResultsStore benchmarkResultsStore0 = prestoBenchmarkDriver0.getResultsStore(vector0, linkedHashSet1);
      assertNotNull(benchmarkResultsStore0);
  }
}
