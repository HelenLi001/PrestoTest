/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 09:36:59 GMT 2021
 */

package com.facebook.presto.benchmark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.benchmark.FormatUtils;
import io.airlift.units.DataSize;
import io.airlift.units.Duration;
import java.text.DecimalFormat;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.GIGABYTE;
      DataSize dataSize0 = DataSize.succinctDataSize(100.0, dataSize_Unit0);
      String string0 = FormatUtils.formatDataSize(dataSize0, true);
      assertEquals("100GB", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.BYTE;
      DataSize dataSize0 = DataSize.succinctDataSize(10.0, dataSize_Unit0);
      String string0 = FormatUtils.formatDataSize(dataSize0, true);
      assertEquals("10B", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataSize dataSize0 = DataSize.succinctBytes(1125899906842624L);
      String string0 = FormatUtils.formatDataSize(dataSize0, true);
      assertEquals("1PB", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataSize dataSize0 = DataSize.succinctBytes(1099511627776L);
      String string0 = FormatUtils.formatDataSize(dataSize0, true);
      assertEquals("1TB", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.GIGABYTE;
      DataSize dataSize0 = new DataSize(1.0, dataSize_Unit0);
      String string0 = FormatUtils.formatDataSize(dataSize0, true);
      assertEquals("1GB", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.MEGABYTE;
      DataSize dataSize0 = DataSize.succinctDataSize(1L, dataSize_Unit0);
      String string0 = FormatUtils.formatDataSize(dataSize0, false);
      assertEquals("1M", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Duration duration0 = Duration.succinctDuration(1000.0, timeUnit0);
      String string0 = FormatUtils.formatCountRate(1000.0, duration0, false);
      assertEquals("1000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.formatDataSize((DataSize) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.benchmark.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.PETABYTE;
      DataSize dataSize0 = new DataSize(2.833252352E9, dataSize_Unit0);
      // Undeclared exception!
      try { 
        FormatUtils.formatDataSize(dataSize0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size is too large to be represented in bytes as a long
         //
         verifyException("io.airlift.units.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataSize dataSize0 = DataSize.succinctBytes(0L);
      // Undeclared exception!
      try { 
        FormatUtils.formatDataRate(dataSize0, (Duration) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.benchmark.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.PETABYTE;
      DataSize dataSize0 = new DataSize(2.833252352E9, dataSize_Unit0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Duration duration0 = Duration.succinctDuration(625.7, timeUnit0);
      // Undeclared exception!
      try { 
        FormatUtils.formatDataRate(dataSize0, duration0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size is too large to be represented in bytes as a long
         //
         verifyException("io.airlift.units.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.formatCountRate((-2704.25405317909), (Duration) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.benchmark.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecimalFormat decimalFormat0 = FormatUtils.getFormat(51L);
      assertEquals(1, decimalFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecimalFormat decimalFormat0 = FormatUtils.getFormat(0.001);
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataSize dataSize0 = DataSize.succinctBytes(1024L);
      String string0 = FormatUtils.formatDataSize(dataSize0, false);
      assertEquals("1K", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = FormatUtils.formatCount(806L);
      assertEquals("806", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DecimalFormat decimalFormat0 = FormatUtils.getFormat(1125899906842669L);
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataSize dataSize0 = DataSize.succinctBytes(0L);
      Duration duration0 = Duration.succinctNanos(0L);
      String string0 = FormatUtils.formatDataRate(dataSize0, duration0, false);
      assertEquals("0B", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.GIGABYTE;
      DataSize dataSize0 = new DataSize(3631.6241422799626, dataSize_Unit0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Duration duration0 = new Duration(60034.61056927182, timeUnit0);
      String string0 = FormatUtils.formatDataRate(dataSize0, duration0, true);
      assertEquals("60.5GB/s", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataSize dataSize0 = DataSize.succinctBytes(1125899906842669L);
      String string0 = FormatUtils.formatDataSize(dataSize0, true);
      assertEquals("1PB", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataSize dataSize0 = DataSize.succinctBytes(1125899906842669L);
      Duration duration0 = Duration.succinctNanos(0L);
      String string0 = FormatUtils.formatDataRate(dataSize0, duration0, true);
      assertEquals("0B/s", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Duration duration0 = new Duration(60034.61056927182, timeUnit0);
      String string0 = FormatUtils.formatCountRate(3631.6241422799626, duration0, true);
      assertEquals("60/s", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.succinctNanos(0L);
      String string0 = FormatUtils.formatCountRate(1125899906842669L, duration0, true);
      assertEquals("0/s", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = FormatUtils.formatCount(1125899906842669L);
      assertEquals("1.13Q", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.succinctNanos(0L);
      String string0 = FormatUtils.formatCountRate(0L, duration0, false);
      assertEquals("0", string0);
  }
}
