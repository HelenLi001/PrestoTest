/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:33:51 GMT 2021
 */

package com.facebook.presto.plugin.bigquery;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.plugin.bigquery.BigQuerySplit;
import com.facebook.presto.spi.ColumnHandle;
import com.facebook.presto.spi.HostAddress;
import java.util.List;
import java.util.OptionalLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BigQuerySplit_ESTest extends BigQuerySplit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(2484L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = new BigQuerySplit("j]CF[Uw", "B+/", list0, (-457L));
      boolean boolean0 = bigQuerySplit1.representsEmptyProjection();
      assertEquals("j]CF[Uw", bigQuerySplit1.getStreamName());
      assertTrue(boolean0);
      assertEquals("B+/", bigQuerySplit1.getAvroSchema());
      assertEquals(2484L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQuerySplit.emptyProjection(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // checkArgument must be greater than 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1463L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = BigQuerySplit.forStream("This connector does not support create role", "", list0);
      String string0 = bigQuerySplit1.getStreamName();
      assertEquals("", bigQuerySplit1.getAvroSchema());
      assertEquals("This connector does not support create role", string0);
      assertEquals(1463L, bigQuerySplit0.getEmptyRowsToGenerate());
      assertEquals((-1L), bigQuerySplit1.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = new BigQuerySplit("PROPERTIES", "PROPERTIES", list0, 0L);
      bigQuerySplit1.getEmptyRowsToGenerate();
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1463L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = BigQuerySplit.forStream("", "", list0);
      long long0 = bigQuerySplit1.getEmptyRowsToGenerate();
      assertEquals((-1L), long0);
      assertEquals(1463L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQuerySplit.forStream("hfu", "", (List<ColumnHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columns cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = null;
      try {
        bigQuerySplit0 = new BigQuerySplit("", ",`D$q1,", (List<ColumnHandle>) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columns cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      boolean boolean0 = bigQuerySplit0.representsEmptyProjection();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = BigQuerySplit.forStream("hostPortString is null", "hostPortString is null", list0);
      boolean boolean0 = bigQuerySplit1.representsEmptyProjection();
      assertFalse(boolean0);
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(232L);
      BigQuerySplit bigQuerySplit1 = BigQuerySplit.emptyProjection(2546L);
      boolean boolean0 = bigQuerySplit0.equals(bigQuerySplit1);
      assertEquals(2546L, bigQuerySplit1.getEmptyRowsToGenerate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(856L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = new BigQuerySplit("", "Zw`TB($oy*-PObvM", list0, 856L);
      boolean boolean0 = bigQuerySplit1.equals(bigQuerySplit0);
      assertEquals(856L, bigQuerySplit0.getEmptyRowsToGenerate());
      assertFalse(boolean0);
      assertEquals("", bigQuerySplit1.getStreamName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = BigQuerySplit.forStream("hostPortString is null", "hostPortString is null", list0);
      boolean boolean0 = bigQuerySplit1.equals(bigQuerySplit0);
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
      assertFalse(boolean0);
      assertEquals((-1L), bigQuerySplit1.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      BigQuerySplit bigQuerySplit1 = BigQuerySplit.emptyProjection(1L);
      boolean boolean0 = bigQuerySplit0.equals(bigQuerySplit1);
      assertTrue(boolean0);
      assertEquals(1L, bigQuerySplit1.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(861L);
      boolean boolean0 = bigQuerySplit0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(861L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      boolean boolean0 = bigQuerySplit0.equals(bigQuerySplit0);
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      OptionalLong optionalLong0 = bigQuerySplit0.getSplitSizeInBytes();
      boolean boolean0 = bigQuerySplit0.equals(optionalLong0);
      assertFalse(boolean0);
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQuerySplit.emptyProjection((-1059L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // checkArgument must be greater than 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      BigQuerySplit bigQuerySplit1 = (BigQuerySplit)bigQuerySplit0.getInfo();
      assertEquals(1L, bigQuerySplit1.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      String string0 = bigQuerySplit0.toString();
      assertEquals("BigQuerySplit{streamName=, avroSchema=, columns=[], emptyRowsToGenerate=1}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      long long0 = bigQuerySplit0.getEmptyRowsToGenerate();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      bigQuerySplit0.getStreamName();
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      List<ColumnHandle> list0 = bigQuerySplit0.getColumns();
      BigQuerySplit bigQuerySplit1 = BigQuerySplit.forStream("", "BigQuerySplit{streamName=, avroSchema=, columns=[], emptyRowsToGenerate=1}", list0);
      String string0 = bigQuerySplit1.getAvroSchema();
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
      assertEquals("", bigQuerySplit1.getStreamName());
      assertEquals((-1L), bigQuerySplit1.getEmptyRowsToGenerate());
      assertEquals("BigQuerySplit{streamName=, avroSchema=, columns=[], emptyRowsToGenerate=1}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1L);
      bigQuerySplit0.getAvroSchema();
      assertEquals(1L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1023L);
      bigQuerySplit0.hashCode();
      assertEquals(1023L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(2402L);
      bigQuerySplit0.getPreferredNodes((List<HostAddress>) null);
      assertEquals(2402L, bigQuerySplit0.getEmptyRowsToGenerate());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigQuerySplit bigQuerySplit0 = BigQuerySplit.emptyProjection(1023L);
      bigQuerySplit0.getNodeSelectionStrategy();
      assertEquals(1023L, bigQuerySplit0.getEmptyRowsToGenerate());
  }
}
