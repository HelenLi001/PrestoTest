/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:31:31 GMT 2021
 */

package com.facebook.presto.plugin.bigquery;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.predicate.TupleDomain;
import com.facebook.presto.execution.TestSqlTaskExecution;
import com.facebook.presto.plugin.bigquery.BigQueryTableHandle;
import com.facebook.presto.spi.ColumnHandle;
import com.google.cloud.bigquery.Field;
import com.google.cloud.bigquery.MaterializedViewDefinition;
import com.google.cloud.bigquery.Schema;
import com.google.cloud.bigquery.StandardTableDefinition;
import com.google.cloud.bigquery.TableId;
import com.google.cloud.bigquery.TableInfo;
import com.google.cloud.bigquery.UserDefinedFunction;
import com.google.cloud.bigquery.ViewDefinition;
import java.util.List;
import java.util.Optional;
import java.util.OptionalLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BigQueryTableHandle_ESTest extends BigQueryTableHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableId tableId0 = TableId.of("projectedColumns", "com.google.common.cache.CacheLoader", "com.google.common.cache.CacheLoader");
      Field[] fieldArray0 = new Field[0];
      Schema schema0 = Schema.of(fieldArray0);
      StandardTableDefinition standardTableDefinition0 = StandardTableDefinition.of(schema0);
      TableInfo tableInfo0 = TableInfo.of(tableId0, standardTableDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      String string0 = bigQueryTableHandle0.getProjectId();
      assertEquals("com.google.common.cache.CacheLoader", bigQueryTableHandle0.getSchemaName());
      assertEquals("TABLE", bigQueryTableHandle0.getType());
      assertEquals("projectedColumns", string0);
      assertEquals("com.google.common.cache.CacheLoader", bigQueryTableHandle0.getTableName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TableId tableId0 = TableId.of("com.facebook.presto.common.type.TypeSignature", "_8>Z`Q57=r47=<J[?K", "dCX/]A`Xd1xG}4A1h");
      UserDefinedFunction[] userDefinedFunctionArray0 = new UserDefinedFunction[2];
      UserDefinedFunction userDefinedFunction0 = UserDefinedFunction.inline("com.facebook.presto.common.type.TypeSignature");
      userDefinedFunctionArray0[0] = userDefinedFunction0;
      userDefinedFunctionArray0[1] = userDefinedFunctionArray0[0];
      ViewDefinition viewDefinition0 = ViewDefinition.of("_8>Z`Q57=r47=<J[?K", userDefinedFunctionArray0);
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      // Undeclared exception!
      try { 
        bigQueryTableHandle0.withConstraint((TupleDomain<ColumnHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // constraint is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TableId tableId0 = TableId.of("", "=DK2E5olg#:rOs5e", "7f}5$2");
      MaterializedViewDefinition materializedViewDefinition0 = MaterializedViewDefinition.of("PjvvfbP8cL>");
      TableInfo tableInfo0 = TableInfo.of(tableId0, materializedViewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      TupleDomain<ColumnHandle> tupleDomain0 = bigQueryTableHandle0.getConstraint();
      Optional<List<ColumnHandle>> optional0 = bigQueryTableHandle0.getProjectedColumns();
      TestSqlTaskExecution.TestingSplit testSqlTaskExecution_TestingSplit0 = new TestSqlTaskExecution.TestingSplit((-2485), (-2231));
      OptionalLong optionalLong0 = testSqlTaskExecution_TestingSplit0.getSplitSizeInBytes();
      BigQueryTableHandle bigQueryTableHandle1 = new BigQueryTableHandle("", "", "", "7f}5$2", tupleDomain0, optional0, optionalLong0);
      // Undeclared exception!
      try { 
        bigQueryTableHandle1.getTableId();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Provided dataset is null or empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQueryTableHandle.from((TableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.of(0L);
      BigQueryTableHandle bigQueryTableHandle0 = null;
      try {
        bigQueryTableHandle0 = new BigQueryTableHandle("Zsp6I_ BB", "constraint", "excludedCipherSuites is null", "constraint", (TupleDomain<ColumnHandle>) null, (Optional<List<ColumnHandle>>) null, optionalLong0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // constraint is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableId tableId0 = TableId.of("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle");
      MaterializedViewDefinition materializedViewDefinition0 = MaterializedViewDefinition.of("tu{VH=Etew");
      TableInfo tableInfo0 = TableInfo.of(tableId0, materializedViewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      TupleDomain<ColumnHandle> tupleDomain0 = bigQueryTableHandle0.getConstraint();
      Optional<List<ColumnHandle>> optional0 = bigQueryTableHandle0.getProjectedColumns();
      TestSqlTaskExecution.TestingSplit testSqlTaskExecution_TestingSplit0 = new TestSqlTaskExecution.TestingSplit(6, 6);
      OptionalLong optionalLong0 = testSqlTaskExecution_TestingSplit0.getSplitSizeInBytes();
      BigQueryTableHandle bigQueryTableHandle1 = new BigQueryTableHandle("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle", tupleDomain0, optional0, optionalLong0);
      boolean boolean0 = bigQueryTableHandle1.equals(bigQueryTableHandle0);
      assertTrue(boolean0);
      assertFalse(bigQueryTableHandle0.equals((Object)bigQueryTableHandle1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TableId tableId0 = TableId.of("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle");
      MaterializedViewDefinition materializedViewDefinition0 = MaterializedViewDefinition.of("tu{VH=Etew");
      TableInfo tableInfo0 = TableInfo.of(tableId0, materializedViewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      TupleDomain<ColumnHandle> tupleDomain0 = bigQueryTableHandle0.getConstraint();
      BigQueryTableHandle bigQueryTableHandle1 = bigQueryTableHandle0.withConstraint(tupleDomain0);
      boolean boolean0 = bigQueryTableHandle0.equals(bigQueryTableHandle1);
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle1.getSchemaName());
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle1.getProjectId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableId tableId0 = TableId.of("", "8j#,/d%KoV", "8j#,/d%KoV");
      UserDefinedFunction[] userDefinedFunctionArray0 = new UserDefinedFunction[8];
      UserDefinedFunction userDefinedFunction0 = UserDefinedFunction.fromUri("8j#,/d%KoV");
      userDefinedFunctionArray0[0] = userDefinedFunction0;
      userDefinedFunctionArray0[1] = userDefinedFunction0;
      userDefinedFunctionArray0[2] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[3] = userDefinedFunctionArray0[1];
      userDefinedFunctionArray0[4] = userDefinedFunction0;
      userDefinedFunctionArray0[5] = userDefinedFunctionArray0[4];
      userDefinedFunctionArray0[6] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[7] = userDefinedFunctionArray0[0];
      ViewDefinition viewDefinition0 = ViewDefinition.of("8j#,/d%KoV", userDefinedFunctionArray0);
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      boolean boolean0 = bigQueryTableHandle0.equals(integer0);
      assertEquals("8j#,/d%KoV", bigQueryTableHandle0.getTableName());
      assertEquals("8j#,/d%KoV", bigQueryTableHandle0.getSchemaName());
      assertFalse(boolean0);
      assertEquals("VIEW", bigQueryTableHandle0.getType());
      assertEquals("", bigQueryTableHandle0.getProjectId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableId tableId0 = TableId.of("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle");
      MaterializedViewDefinition materializedViewDefinition0 = MaterializedViewDefinition.of("tu{VH=Etew");
      TableInfo tableInfo0 = TableInfo.of(tableId0, materializedViewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      boolean boolean0 = bigQueryTableHandle0.equals(bigQueryTableHandle0);
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle0.getTableName());
      assertTrue(boolean0);
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle0.getProjectId());
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle0.getSchemaName());
      assertEquals("MATERIALIZED_VIEW", bigQueryTableHandle0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableId tableId0 = TableId.of("\"by4QOMTa`c!s;", "Eu axArZZ9tT>yaqL", "type");
      ViewDefinition viewDefinition0 = ViewDefinition.of("projectedColumns is null");
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      boolean boolean0 = bigQueryTableHandle0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("VIEW", bigQueryTableHandle0.getType());
      assertEquals("\"by4QOMTa`c!s;", bigQueryTableHandle0.getProjectId());
      assertEquals("Eu axArZZ9tT>yaqL", bigQueryTableHandle0.getSchemaName());
      assertEquals("type", bigQueryTableHandle0.getTableName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TableId tableId0 = TableId.of("\"by4QOMTa`c!s;", "Eu axArZZ9tT>yaqL", "type");
      ViewDefinition viewDefinition0 = ViewDefinition.of("projectedColumns is null");
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      bigQueryTableHandle0.getLimit();
      assertEquals("\"by4QOMTa`c!s;", bigQueryTableHandle0.getProjectId());
      assertEquals("Eu axArZZ9tT>yaqL", bigQueryTableHandle0.getSchemaName());
      assertEquals("type", bigQueryTableHandle0.getTableName());
      assertEquals("VIEW", bigQueryTableHandle0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TableId tableId0 = TableId.of("", "8j#,/d%KoV", "8j#,/d%KoV");
      UserDefinedFunction[] userDefinedFunctionArray0 = new UserDefinedFunction[8];
      UserDefinedFunction userDefinedFunction0 = UserDefinedFunction.fromUri("8j#,/d%KoV");
      userDefinedFunctionArray0[0] = userDefinedFunction0;
      userDefinedFunctionArray0[1] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[2] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[3] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[4] = userDefinedFunctionArray0[2];
      userDefinedFunctionArray0[5] = userDefinedFunctionArray0[1];
      userDefinedFunctionArray0[6] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[7] = userDefinedFunctionArray0[2];
      ViewDefinition viewDefinition0 = ViewDefinition.of("8j#,/d%KoV", userDefinedFunctionArray0);
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      String string0 = bigQueryTableHandle0.getProjectId();
      assertEquals("", string0);
      assertEquals("VIEW", bigQueryTableHandle0.getType());
      assertEquals("8j#,/d%KoV", bigQueryTableHandle0.getTableName());
      assertEquals("8j#,/d%KoV", bigQueryTableHandle0.getSchemaName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TableId tableId0 = TableId.of("\"by4QOMTa`c!s;", "Eu axArZZ9tT>yaqL", "type");
      ViewDefinition viewDefinition0 = ViewDefinition.of("projectedColumns is null");
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      // Undeclared exception!
      try { 
        bigQueryTableHandle0.withProjectedColumns((List<ColumnHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TableId tableId0 = TableId.of("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle", "com.facebook.presto.plugin.bigquery.BigQueryTableHandle");
      MaterializedViewDefinition materializedViewDefinition0 = MaterializedViewDefinition.of("tu{VH=Etew");
      TableInfo tableInfo0 = TableInfo.of(tableId0, materializedViewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      String string0 = bigQueryTableHandle0.getType();
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle0.getProjectId());
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle0.getSchemaName());
      assertEquals("com.facebook.presto.plugin.bigquery.BigQueryTableHandle", bigQueryTableHandle0.getTableName());
      assertEquals("MATERIALIZED_VIEW", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableId tableId0 = TableId.of("projectedColumns", "com.google.common.cache.CacheLoader", "com.google.common.cache.CacheLoader");
      Field[] fieldArray0 = new Field[0];
      Schema schema0 = Schema.of(fieldArray0);
      StandardTableDefinition standardTableDefinition0 = StandardTableDefinition.of(schema0);
      TableInfo tableInfo0 = TableInfo.of(tableId0, standardTableDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      String string0 = bigQueryTableHandle0.getSchemaName();
      assertEquals("com.google.common.cache.CacheLoader", bigQueryTableHandle0.getTableName());
      assertEquals("projectedColumns", bigQueryTableHandle0.getProjectId());
      assertEquals("com.google.common.cache.CacheLoader", string0);
      assertEquals("TABLE", bigQueryTableHandle0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableId tableId0 = TableId.of("", "8j#,/d%KoV", "8j#,/d%KoV");
      UserDefinedFunction[] userDefinedFunctionArray0 = new UserDefinedFunction[8];
      UserDefinedFunction userDefinedFunction0 = UserDefinedFunction.fromUri("8j#,/d%KoV");
      userDefinedFunctionArray0[0] = userDefinedFunction0;
      userDefinedFunctionArray0[1] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[2] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[3] = userDefinedFunctionArray0[0];
      userDefinedFunctionArray0[4] = userDefinedFunctionArray0[2];
      userDefinedFunctionArray0[5] = userDefinedFunctionArray0[2];
      userDefinedFunctionArray0[6] = userDefinedFunctionArray0[2];
      userDefinedFunctionArray0[7] = userDefinedFunctionArray0[3];
      ViewDefinition viewDefinition0 = ViewDefinition.of("8j#,/d%KoV", userDefinedFunctionArray0);
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      bigQueryTableHandle0.hashCode();
      assertEquals("8j#,/d%KoV", bigQueryTableHandle0.getSchemaName());
      assertEquals("8j#,/d%KoV", bigQueryTableHandle0.getTableName());
      assertEquals("", bigQueryTableHandle0.getProjectId());
      assertEquals("VIEW", bigQueryTableHandle0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TableId tableId0 = TableId.of("\"by4QOMTa`c!s;", "Eu axArZZ9tT>yaqL", "type");
      ViewDefinition viewDefinition0 = ViewDefinition.of("projectedColumns is null");
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      String string0 = bigQueryTableHandle0.getTableName();
      assertEquals("\"by4QOMTa`c!s;", bigQueryTableHandle0.getProjectId());
      assertEquals("Eu axArZZ9tT>yaqL", bigQueryTableHandle0.getSchemaName());
      assertEquals("type", string0);
      assertEquals("VIEW", bigQueryTableHandle0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableId tableId0 = TableId.of("\"by4QOMTa`c!s;", "Eu axArZZ9tT>yaqL", "type");
      ViewDefinition viewDefinition0 = ViewDefinition.of("projectedColumns is null");
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      TableId tableId1 = bigQueryTableHandle0.getTableId();
      assertTrue(tableId1.equals((Object)tableId0));
      assertEquals("VIEW", bigQueryTableHandle0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TableId tableId0 = TableId.of("\"by4QOMTa`c!s;", "Eu axArZZ9tT>yaqL", "type");
      ViewDefinition viewDefinition0 = ViewDefinition.of("projectedColumns is null");
      TableInfo tableInfo0 = TableInfo.of(tableId0, viewDefinition0);
      BigQueryTableHandle bigQueryTableHandle0 = BigQueryTableHandle.from(tableInfo0);
      String string0 = bigQueryTableHandle0.toString();
      assertEquals("BigQueryTableHandle{projectId=\"by4QOMTa`c!s;, schemaName=Eu axArZZ9tT>yaqL, tableName=type, type=VIEW, constraint=TupleDomain{NONE}, projectedColumns=Optional.empty, limit=OptionalLong.empty}", string0);
  }
}
