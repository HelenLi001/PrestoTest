/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:39:38 GMT 2021
 */

package com.facebook.presto.plugin.bigquery;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.RowType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.plugin.bigquery.BigQueryColumnHandle;
import com.facebook.presto.plugin.bigquery.BigQueryType;
import com.google.cloud.bigquery.Field;
import java.time.format.DateTimeParseException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BigQueryType_ESTest extends BigQueryType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.RECORD;
      Field.Mode field_Mode0 = Field.Mode.REPEATED;
      ArrayList<BigQueryColumnHandle> arrayList0 = new ArrayList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("kX/USka Ah", bigQueryType0, field_Mode0, arrayList0, "kX/USka Ah");
      Field.Mode field_Mode1 = bigQueryColumnHandle0.getMode();
      assertEquals(Field.Mode.REPEATED, field_Mode1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.INTEGER;
      Field.Mode field_Mode0 = Field.Mode.REQUIRED;
      LinkedList<BigQueryColumnHandle> linkedList0 = new LinkedList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("", bigQueryType0, field_Mode0, linkedList0, "");
      BigQueryType bigQueryType1 = bigQueryColumnHandle0.getBigQueryType();
      assertSame(bigQueryType0, bigQueryType1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.INTEGER;
      Field.Mode field_Mode0 = Field.Mode.REPEATED;
      LinkedList<BigQueryColumnHandle> linkedList0 = new LinkedList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("Asking description for unknown command: ", bigQueryType0, field_Mode0, linkedList0, "Asking description for unknown command: ");
      Map<String, BigQueryType.Adaptor> map0 = bigQueryColumnHandle0.getBigQuerySubTypes();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigQueryType[] bigQueryTypeArray0 = BigQueryType.values();
      assertEquals(12, bigQueryTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.valueOf("BYTES");
      assertEquals(BigQueryType.BYTES, bigQueryType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.BOOLEAN;
      Field.Mode field_Mode0 = Field.Mode.NULLABLE;
      ArrayList<BigQueryColumnHandle> arrayList0 = new ArrayList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("", bigQueryType0, field_Mode0, arrayList0, (String) null);
      RowType.Field rowType_Field0 = BigQueryType.toRawTypeField("", bigQueryColumnHandle0);
      assertNotNull(rowType_Field0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQueryType.toRawTypeField((Map.Entry<String, BigQueryType.Adaptor>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.bigquery.BigQueryType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.NUMERIC;
      Field.Mode field_Mode0 = Field.Mode.REPEATED;
      LinkedList<BigQueryColumnHandle> linkedList0 = new LinkedList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("N8*XG6|H'OAJ29oZUq8", bigQueryType0, field_Mode0, linkedList0, "N8*XG6|H'OAJ29oZUq8");
      // Undeclared exception!
      try { 
        BigQueryType.toRawTypeField((String) null, bigQueryColumnHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQueryType.toPrestoTimestamp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.bigquery.BigQueryType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQueryType.toLocalDateTime("7^");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '7^' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQueryType.toLocalDateTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.bigquery.BigQueryType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.BOOLEAN;
      Field.Mode field_Mode0 = Field.Mode.NULLABLE;
      ArrayList<BigQueryColumnHandle> arrayList0 = new ArrayList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("", bigQueryType0, field_Mode0, arrayList0, (String) null);
      Type type0 = bigQueryColumnHandle0.getPrestoType();
      assertTrue(type0.isComparable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.STRING;
      Field.Mode field_Mode0 = Field.Mode.REQUIRED;
      Stack<BigQueryColumnHandle> stack0 = new Stack<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("}-]0Se.e", bigQueryType0, field_Mode0, stack0, "}-]0Se.e");
      VarcharType varcharType0 = (VarcharType)bigQueryType0.getNativeType(bigQueryColumnHandle0);
      assertTrue(varcharType0.isUnbounded());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.TIMESTAMP;
      Field.Mode field_Mode0 = Field.Mode.REPEATED;
      ArrayList<BigQueryColumnHandle> arrayList0 = new ArrayList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("", bigQueryType0, field_Mode0, arrayList0, "");
      Type type0 = bigQueryColumnHandle0.getPrestoType();
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.RECORD;
      Field.Mode field_Mode0 = Field.Mode.REPEATED;
      Vector<BigQueryColumnHandle> vector0 = new Vector<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle(";pbGzFn", bigQueryType0, field_Mode0, vector0, ";pbGzFn");
      // Undeclared exception!
      try { 
        BigQueryType.toRawTypeField("Malformed content: signature not valid, starts with 0x3a but followed by 0x", bigQueryColumnHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a record or struct must have sub-fields
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigQueryType.toPrestoTimestamp("9P^w@YahO0%X.;x");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '9P^w@YahO0%X' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigQueryType bigQueryType0 = BigQueryType.BOOLEAN;
      Field.Mode field_Mode0 = Field.Mode.NULLABLE;
      ArrayList<BigQueryColumnHandle> arrayList0 = new ArrayList<BigQueryColumnHandle>();
      BigQueryColumnHandle bigQueryColumnHandle0 = new BigQueryColumnHandle("", bigQueryType0, field_Mode0, arrayList0, (String) null);
      AbstractMap.SimpleEntry<String, BigQueryColumnHandle> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, BigQueryColumnHandle>("TC^9DbRTXlC~PXms{", bigQueryColumnHandle0);
      AbstractMap.SimpleEntry<String, BigQueryType.Adaptor> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, BigQueryType.Adaptor>(abstractMap_SimpleEntry0);
      RowType.Field rowType_Field0 = BigQueryType.toRawTypeField(abstractMap_SimpleEntry1);
      assertNotNull(rowType_Field0);
  }
}
