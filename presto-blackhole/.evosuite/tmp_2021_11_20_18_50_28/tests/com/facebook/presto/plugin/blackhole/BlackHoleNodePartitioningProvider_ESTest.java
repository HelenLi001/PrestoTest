/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 03:03:23 GMT 2021
 */

package com.facebook.presto.plugin.blackhole;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.plugin.blackhole.BlackHoleNodePartitioningProvider;
import com.facebook.presto.spi.ConnectorSession;
import com.facebook.presto.spi.Node;
import com.facebook.presto.spi.NodeManager;
import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;
import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlackHoleNodePartitioningProvider_ESTest extends BlackHoleNodePartitioningProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NodeManager nodeManager0 = mock(NodeManager.class, new ViolatedAssumptionAnswer());
      doReturn((Set<Node>) null).when(nodeManager0).getRequiredWorkerNodes();
      BlackHoleNodePartitioningProvider blackHoleNodePartitioningProvider0 = new BlackHoleNodePartitioningProvider(nodeManager0);
      ConnectorTransactionHandle connectorTransactionHandle0 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle0 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        blackHoleNodePartitioningProvider0.getBucketNodeMap(connectorTransactionHandle0, connectorSession0, connectorPartitioningHandle0, (List<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.blackhole.BlackHoleNodePartitioningProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BlackHoleNodePartitioningProvider blackHoleNodePartitioningProvider0 = null;
      try {
        blackHoleNodePartitioningProvider0 = new BlackHoleNodePartitioningProvider((NodeManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeManager is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NodeManager nodeManager0 = mock(NodeManager.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeManager0).getRequiredWorkerNodes();
      BlackHoleNodePartitioningProvider blackHoleNodePartitioningProvider0 = new BlackHoleNodePartitioningProvider(nodeManager0);
      ConnectorTransactionHandle connectorTransactionHandle0 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle0 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        blackHoleNodePartitioningProvider0.getBucketCount(connectorTransactionHandle0, connectorSession0, connectorPartitioningHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.blackhole.BlackHoleNodePartitioningProvider", e);
      }
  }
}
