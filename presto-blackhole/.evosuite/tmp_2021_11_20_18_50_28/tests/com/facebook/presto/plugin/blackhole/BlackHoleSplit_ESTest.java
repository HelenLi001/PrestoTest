/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:58:57 GMT 2021
 */

package com.facebook.presto.plugin.blackhole;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.plugin.blackhole.BlackHoleSplit;
import com.facebook.presto.spi.HostAddress;
import io.airlift.units.Duration;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlackHoleSplit_ESTest extends BlackHoleSplit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit(91, 0, 0, duration0);
      int int0 = blackHoleSplit0.getRowsPerPage();
      assertEquals(0, blackHoleSplit0.getFieldsLength());
      assertEquals(91, blackHoleSplit0.getPagesCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-2563), 1, 0, duration0);
      int int0 = blackHoleSplit0.getRowsPerPage();
      assertEquals((-2563), blackHoleSplit0.getPagesCount());
      assertEquals(0, blackHoleSplit0.getFieldsLength());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit(109, 754, 754, duration0);
      int int0 = blackHoleSplit0.getPagesCount();
      assertEquals(754, blackHoleSplit0.getFieldsLength());
      assertEquals(754, blackHoleSplit0.getRowsPerPage());
      assertEquals(109, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-2563), 1, 0, duration0);
      int int0 = blackHoleSplit0.getPagesCount();
      assertEquals(1, blackHoleSplit0.getRowsPerPage());
      assertEquals((-2563), int0);
      assertEquals(0, blackHoleSplit0.getFieldsLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit(0, 0, 0, duration0);
      int int0 = blackHoleSplit0.getFieldsLength();
      assertEquals(0, blackHoleSplit0.getRowsPerPage());
      assertEquals(0, int0);
      assertEquals(0, blackHoleSplit0.getPagesCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-105), (-105), 5, duration0);
      int int0 = blackHoleSplit0.getFieldsLength();
      assertEquals((-105), blackHoleSplit0.getPagesCount());
      assertEquals((-105), blackHoleSplit0.getRowsPerPage());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlackHoleSplit blackHoleSplit0 = null;
      try {
        blackHoleSplit0 = new BlackHoleSplit(2508, 0, 2, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pageProcessingDelay is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit(0, 0, 0, duration0);
      int int0 = blackHoleSplit0.getPagesCount();
      assertEquals(0, blackHoleSplit0.getFieldsLength());
      assertEquals(0, int0);
      assertEquals(0, blackHoleSplit0.getRowsPerPage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-957), (-957), (-957), duration0);
      Duration duration1 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit1 = new BlackHoleSplit((-957), (-2686), (-2686), duration1);
      boolean boolean0 = blackHoleSplit0.equals(blackHoleSplit1);
      assertFalse(boolean0);
      assertEquals((-957), blackHoleSplit1.getPagesCount());
      assertEquals((-2686), blackHoleSplit1.getRowsPerPage());
      assertEquals((-2686), blackHoleSplit1.getFieldsLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      BlackHoleSplit blackHoleSplit1 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      boolean boolean0 = blackHoleSplit0.equals(blackHoleSplit1);
      assertTrue(boolean0);
      assertEquals((-28), blackHoleSplit1.getRowsPerPage());
      assertEquals((-28), blackHoleSplit1.getFieldsLength());
      assertEquals((-1077), blackHoleSplit1.getPagesCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit(49, 49, 49, duration0);
      boolean boolean0 = blackHoleSplit0.equals(">{([qwhZeCl0y");
      assertEquals(49, blackHoleSplit0.getPagesCount());
      assertEquals(49, blackHoleSplit0.getFieldsLength());
      assertFalse(boolean0);
      assertEquals(49, blackHoleSplit0.getRowsPerPage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit(49, 49, 49, duration0);
      boolean boolean0 = blackHoleSplit0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(49, blackHoleSplit0.getFieldsLength());
      assertEquals(49, blackHoleSplit0.getPagesCount());
      assertEquals(49, blackHoleSplit0.getRowsPerPage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      boolean boolean0 = blackHoleSplit0.equals(blackHoleSplit0);
      assertEquals((-1077), blackHoleSplit0.getPagesCount());
      assertEquals((-28), blackHoleSplit0.getFieldsLength());
      assertTrue(boolean0);
      assertEquals((-28), blackHoleSplit0.getRowsPerPage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      blackHoleSplit0.hashCode();
      assertEquals((-28), blackHoleSplit0.getFieldsLength());
      assertEquals((-28), blackHoleSplit0.getRowsPerPage());
      assertEquals((-1077), blackHoleSplit0.getPagesCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit(49, 49, 49, duration0);
      blackHoleSplit0.getPreferredNodes((List<HostAddress>) null);
      assertEquals(49, blackHoleSplit0.getRowsPerPage());
      assertEquals(49, blackHoleSplit0.getPagesCount());
      assertEquals(49, blackHoleSplit0.getFieldsLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      blackHoleSplit0.getNodeSelectionStrategy();
      assertEquals((-1077), blackHoleSplit0.getPagesCount());
      assertEquals((-28), blackHoleSplit0.getRowsPerPage());
      assertEquals((-28), blackHoleSplit0.getFieldsLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(duration0).toString();
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-957), (-957), (-957), duration0);
      blackHoleSplit0.getPageProcessingDelay();
      assertEquals((-957), blackHoleSplit0.getFieldsLength());
      assertEquals((-957), blackHoleSplit0.getPagesCount());
      assertEquals((-957), blackHoleSplit0.getRowsPerPage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      Duration duration1 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit1 = new BlackHoleSplit((-28), (-28), (-28), duration1);
      boolean boolean0 = blackHoleSplit1.equals(blackHoleSplit0);
      assertEquals((-28), blackHoleSplit0.getRowsPerPage());
      assertFalse(boolean0);
      assertEquals((-28), blackHoleSplit0.getFieldsLength());
      assertEquals((-1077), blackHoleSplit0.getPagesCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      BlackHoleSplit blackHoleSplit1 = (BlackHoleSplit)blackHoleSplit0.getInfo();
      assertEquals((-28), blackHoleSplit1.getRowsPerPage());
      assertEquals((-1077), blackHoleSplit1.getPagesCount());
      assertEquals((-28), blackHoleSplit1.getFieldsLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      int int0 = blackHoleSplit0.getRowsPerPage();
      assertEquals((-28), blackHoleSplit0.getFieldsLength());
      assertEquals((-1077), blackHoleSplit0.getPagesCount());
      assertEquals((-28), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      BlackHoleSplit blackHoleSplit0 = new BlackHoleSplit((-1077), (-28), (-28), duration0);
      int int0 = blackHoleSplit0.getFieldsLength();
      assertEquals((-28), int0);
      assertEquals((-1077), blackHoleSplit0.getPagesCount());
      assertEquals((-28), blackHoleSplit0.getRowsPerPage());
  }
}
