/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 03:11:29 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.BytecodeVisitor;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.Comment;
import com.facebook.presto.bytecode.FieldDefinition;
import com.facebook.presto.bytecode.MethodDefinition;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.OpCode;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.StaticTypeBytecodeExpression;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.control.DoWhileLoop;
import com.facebook.presto.bytecode.control.ForLoop;
import com.facebook.presto.bytecode.control.IfStatement;
import com.facebook.presto.bytecode.control.WhileLoop;
import com.facebook.presto.bytecode.instruction.LabelNode;
import java.lang.invoke.MethodType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.util.ASMifier;
import org.objectweb.asm.util.CheckMethodAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BytecodeBlock_ESTest extends BytecodeBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      bytecodeBlock0.visitLineNumber(141);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getField(class0, "short", class1);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Type type0 = Type.BYTE_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>(0);
      Class<Parameter> class0 = Parameter.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType1 = ParameterizedType.type(class0, classArray0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(parameterizedType0, "+4wK:|;bMHS;%_D", parameterizedType1, (Iterable<ParameterizedType>) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: +4wK:|;bMHS;%_D
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(parameterizedType0, (String) null, (ParameterizedType) null, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<OpCode> class0 = OpCode.class;
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      Class<Variable>[] classArray0 = (Class<Variable>[]) Array.newInstance(Class.class, 3);
      Class<Variable> class1 = Variable.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = class1;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      parameterizedTypeArray0[0] = parameterizedType0;
      ArrayList<ParameterizedType> arrayList0 = new ArrayList<ParameterizedType>();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeInterface(parameterizedTypeArray0[0], "Gk7QN`O8n#m=it", (ParameterizedType) null, (Iterable<ParameterizedType>) arrayList0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("Z{\"2");
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("Z{\"2");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(parameterizedType0, "Z{\"2", parameterizedType1, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("D\"RIG#I!@`F ");
      Class<ParameterizedType> class0 = ParameterizedType.class;
      ServiceLoader<ParameterizedType> serviceLoader0 = ServiceLoader.load(class0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeVirtual(parameterizedType0, "D\"RIG#I!@`F ", (ParameterizedType) null, (Iterable<ParameterizedType>) serviceLoader0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Type type0 = Type.BYTE_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("");
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(parameterizedType1, "", parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<OpCode> class0 = OpCode.class;
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      Class<Variable>[] classArray0 = (Class<Variable>[]) Array.newInstance(Class.class, 3);
      Class<Variable> class1 = Variable.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = class1;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ArrayList<ParameterizedType> arrayList0 = new ArrayList<ParameterizedType>();
      LinkedList<ParameterizedType> linkedList0 = new LinkedList<ParameterizedType>(arrayList0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeStatic(parameterizedType0, "Gk7QN`O8n#m=it", parameterizedTypeArray0[1], (Iterable<ParameterizedType>) linkedList0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[5];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(parameterizedType0, "LSTORE_0", parameterizedTypeArray0[1], parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ForLoop forLoop0 = new ForLoop("", objectArray0);
      BytecodeBlock bytecodeBlock0 = forLoop0.body();
      Class<ParameterizedType> class0 = ParameterizedType.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = classArray0[0];
      classArray0[3] = classArray0[0];
      classArray0[4] = classArray0[2];
      classArray0[5] = classArray0[1];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      Access access0 = Access.STATIC;
      EnumSet<Access> enumSet0 = EnumSet.range(access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[9];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedTypeArray0[4];
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      parameterizedTypeArray0[8] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "Xa;RI~%wb}s^0G", parameterizedTypeArray0[1]);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putStaticField(parameterizedType0, fieldDefinition0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.push("");
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeVirtual(classArray0[0], "variable must be an byte, short or int, but is %s", class0, classArray0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      Class<OpCode> class0 = OpCode.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedTypeArray0[0];
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeVirtual(parameterizedTypeArray0[0], "hO#I5X'YKK", parameterizedTypeArray0[0], parameterizedTypeArray0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      ArrayList<Parameter> arrayList0 = new ArrayList<Parameter>();
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "Unknown type '%s'", parameterizedType0, arrayList0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeVirtual(methodDefinition0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("O UjmFO");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeStatic(parameterizedType0, "O UjmFO", parameterizedType0, parameterizedTypeArray0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("currentLineNumber must be positive");
      Access access0 = Access.ABSTRACT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "currentLineNumber must be positive", parameterizedType0, parameterizedTypeArray0);
      LinkedHashSet<Parameter> linkedHashSet0 = new LinkedHashSet<Parameter>();
      PriorityQueue<Parameter> priorityQueue0 = new PriorityQueue<Parameter>(linkedHashSet0);
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "currentLineNumber must be positive", parameterizedType0, priorityQueue0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeStatic(methodDefinition0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("%:F] #z&@}g31/,QD");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedTypeArray0[0];
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeSpecial(parameterizedType0, "LXWdu ^P~", parameterizedType0, parameterizedTypeArray0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("JnH1YL(");
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(147);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeSpecial(parameterizedType0, "JnH1YL(", parameterizedType0, (Iterable<ParameterizedType>) linkedHashSet0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("Z{\"2");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeInterface(parameterizedType0, "Z{\"2", parameterizedType0, parameterizedTypeArray0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<String> class0 = String.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      MethodType methodType0 = MethodType.methodType(class0, class0, classArray0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeDynamic("Invalid frame type ", methodType0, (Method) null, (Object[]) classArray0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Class<StaticTypeBytecodeExpression>[] classArray0 = (Class<StaticTypeBytecodeExpression>[]) Array.newInstance(Class.class, 4);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeConstructor(class0, classArray0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Type type0 = Type.BYTE_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedTypeArray0[0];
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeConstructor(parameterizedType0, parameterizedTypeArray0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Integer> class0 = Integer.TYPE;
      Parameter parameter0 = Parameter.arg("'c#Y;1U[", class0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.incrementVariable(parameter0, (byte)30);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[5];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      Access access0 = Access.TRANSIENT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "d>O{\"<`", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "d>O{\"<`", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getStaticField(fieldDefinition0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName(";#&+i}~)x$Pw$u");
      Variable variable0 = new Variable(";#&+i}~)x$Pw$u", parameterizedType0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.putVariable(variable0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.putVariable((Variable) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("D\"RIG#I!y@`F ");
      Parameter parameter0 = Parameter.arg("X", parameterizedType0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.putVariable((Variable) parameter0, (ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Type type0 = Type.BOOLEAN_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.putStaticField(parameterizedType0, (FieldDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Access access0 = Access.SYNCHRONIZED;
      Access[] accessArray0 = new Access[3];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("n,{ZVq]I$");
      FieldDefinition fieldDefinition0 = new FieldDefinition((ClassDefinition) null, enumSet0, "", parameterizedType0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.putStaticField(fieldDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.putField((FieldDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.push((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ForLoop forLoop0 = new ForLoop("short", objectArray0);
      BytecodeBlock bytecodeBlock0 = forLoop0.body();
      // Undeclared exception!
      try { 
        bytecodeBlock0.push((ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.body();
      // Undeclared exception!
      try { 
        bytecodeBlock0.pop((ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(class0, "Unknown type '%s'", class0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      Class<BytecodeBlock>[] classArray0 = (Class<BytecodeBlock>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(class0, "J7r='B:hb>EB,?9pbH", class0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: J7r='B:hb>EB,?9pbH
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Throwable> class0 = Throwable.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(parameterizedType0, "java/lang/Object", parameterizedType0, (ParameterizedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Type type0 = Type.BYTE_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(parameterizedTypeArray0[2], "", parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Class<ParameterizedType> class0 = ParameterizedType.class;
      ServiceLoader<ParameterizedType> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(parameterizedType0, (String) null, parameterizedType0, (Iterable<ParameterizedType>) serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ForLoop forLoop0 = new ForLoop("@:fn4'!G8*U]oVm", objectArray0);
      BytecodeBlock bytecodeBlock0 = forLoop0.body();
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>();
      HashSet<ParameterizedType> hashSet0 = new HashSet<ParameterizedType>(arrayDeque0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(parameterizedType0, "", parameterizedType0, (Iterable<ParameterizedType>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual((MethodDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<OpCode> class0 = OpCode.class;
      Class<ParameterizedType> class1 = ParameterizedType.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 4);
      Class<Parameter> class2 = Parameter.class;
      classArray0[0] = class2;
      classArray0[1] = class2;
      classArray0[2] = classArray0[0];
      classArray0[3] = classArray0[0];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(class0, (String) null, class1, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<OpCode> class0 = OpCode.class;
      Class<ParameterizedType> class1 = ParameterizedType.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(class0, (String) null, class1, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Class<Parameter> class1 = Parameter.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      classArray0[1] = class2;
      classArray0[2] = class2;
      classArray0[3] = classArray0[1];
      classArray0[4] = classArray0[0];
      classArray0[5] = classArray0[4];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(class0, ">X.ib/[", class1, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: >X.ib/[
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.body();
      Type type0 = Type.INT_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(parameterizedType0, (String) null, parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("com.facebook.presto.bytecode.expression.OrBytecodeExpression");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(parameterizedType0, "", parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Class<Comment>[] classArray0 = (Class<Comment>[]) Array.newInstance(Class.class, 1);
      Class<Comment> class1 = Comment.class;
      classArray0[0] = class1;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>();
      Vector<ParameterizedType> vector0 = new Vector<ParameterizedType>(priorityQueue0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(parameterizedType0, (String) null, parameterizedType0, (Iterable<ParameterizedType>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      Vector<ParameterizedType> vector0 = new Vector<ParameterizedType>(0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(parameterizedType0, "", parameterizedType0, (Iterable<ParameterizedType>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Access access0 = Access.BRIDGE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[8];
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("", class0);
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[0];
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameterArray0[1];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic(methodDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement("-slp>V11N^@f@Y", (Object[]) null);
      BytecodeBlock bytecodeBlock0 = ifStatement0.condition();
      Class<OpCode> class0 = OpCode.class;
      Class<StaticTypeBytecodeExpression> class1 = StaticTypeBytecodeExpression.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 8);
      Class<Parameter> class2 = Parameter.class;
      classArray0[0] = class2;
      classArray0[1] = classArray0[0];
      classArray0[2] = classArray0[1];
      classArray0[3] = class2;
      classArray0[4] = classArray0[1];
      classArray0[5] = classArray0[0];
      classArray0[6] = classArray0[4];
      classArray0[7] = classArray0[4];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(class0, (String) null, class1, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(class0, "%s (%s) must not be negative", class0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<String> class0 = String.class;
      Class<StaticTypeBytecodeExpression> class1 = StaticTypeBytecodeExpression.class;
      Class<OpCode>[] classArray0 = (Class<OpCode>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(class0, "2iks-x/kI,;B={g4F", class1, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: 2iks-x/kI,;B={g4F
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName(" = ");
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(parameterizedType0, "3", parameterizedType0, (ParameterizedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(parameterizedType0, "D8DiFAwB@IzVb-v%l[", parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: D8DiFAwB@IzVb-v%l[
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Comment> class0 = Comment.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(parameterizedType0, (String) null, parameterizedType0, (Iterable<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial((MethodDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[5];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      Access access0 = Access.TRANSIENT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[4];
      Parameter parameter0 = Parameter.arg("nJ+", parameterizedType0);
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(methodDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.condition();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(class0, "int", class0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Class<Variable> class1 = Variable.class;
      Class<OpCode>[] classArray0 = (Class<OpCode>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(class0, "egiN{3v4d#)uS$", class1, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Integer> class0 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(class0, "7*@__c.2OfF{_", class0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: 7*@__c.2OfF{_
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("8");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(parameterizedType0, "", parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("tIXy01b%`*O");
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(parameterizedType0, "v9wE\"g&2?0x}88@", parameterizedType0, (Iterable<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface((MethodDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("currentLineNumber must be positive");
      Access access0 = Access.PUBLIC;
      Access[] accessArray0 = new Access[3];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "currentLineNumber must be positive", parameterizedType0, parameterizedTypeArray0);
      Vector<Parameter> vector0 = new Vector<Parameter>();
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "", parameterizedType0, vector0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(methodDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<String> class0 = String.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      MethodType methodType0 = MethodType.methodType(class0, class0, classArray0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeDynamic((String) null, methodType0, (Method) null, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<String> class0 = String.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      MethodType methodType0 = MethodType.methodType(class0, class0, classArray0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeDynamic("", methodType0, (Method) null, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop();
      BytecodeBlock bytecodeBlock0 = whileLoop0.body();
      Class<Variable> class0 = Variable.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeConstructor(class0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("D?Q_`zFG2 K *3'o/G");
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeConstructor(parameterizedType0, (ParameterizedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeConstructor((ParameterizedType) null, (Iterable<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.initializeVariable((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      Parameter parameter0 = Parameter.arg("^MnJh=", class0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.incrementVariable(parameter0, (byte)32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // variable must be an byte, short or int, but is com/facebook/presto/bytecode/BytecodeBlock
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.getStaticField(parameterizedType0, (FieldDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.getField((FieldDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      // Undeclared exception!
      try { 
        bytecodeBlock0.comment(" f`>mV\"x%'wBQy", (Object[]) parameterizedTypeArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.comment((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      String[] stringArray0 = new String[0];
      MethodNode methodNode0 = new MethodNode(185, (String) null, "", "7o", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      Class<String> class0 = String.class;
      Parameter parameter0 = Parameter.arg("7o", class0);
      bytecodeBlock0.initializeVariable(parameter0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.accept((MethodVisitor) methodNode0, methodGenerationContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable '7o' has not been assigned a slot
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.accept((BytecodeNode) bytecodeBlock0, (BytecodeVisitor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      boolean boolean0 = bytecodeBlock0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.append(bytecodeBlock0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getField(parameterizedType0, "J7r='B:hb>EB,?9pbH", parameterizedType0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      List<BytecodeNode> list0 = bytecodeBlock0.getChildNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.retObject();
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Type type0 = Type.BYTE_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeConstructor(parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.ret();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      LabelNode labelNode0 = new LabelNode("");
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.ifZeroGoto(labelNode0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("com.facebook.presto.bytecode.expression.OrBytecodeExpression");
      Parameter parameter0 = new Parameter("", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putVariable((Variable) parameter0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.retDouble();
      String[] stringArray0 = new String[0];
      MethodNode methodNode0 = new MethodNode(185, (String) null, "", "7o", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      bytecodeBlock1.accept((MethodVisitor) methodNode0, methodGenerationContext0);
      assertEquals(0, methodNode0.invisibleAnnotableParameterCount);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.visitLineNumber(0);
      bytecodeBlock1.visitLineNumber(0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.visitLineNumber((-206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // currentLineNumber must be positive
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Integer> class0 = Integer.TYPE;
      bytecodeBlock0.pushJavaDefault(class0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<ParameterizedType> class0 = ParameterizedType.class;
      bytecodeBlock0.pushJavaDefault(class0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      Access access0 = Access.TRANSIENT;
      Access[] accessArray0 = new Access[8];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = access0;
      accessArray0[5] = access0;
      accessArray0[6] = access0;
      accessArray0[7] = accessArray0[0];
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "n=v|^M0mS9Ilz", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putField(fieldDefinition0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Class<Access> class1 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.allOf(class1);
      FieldDefinition fieldDefinition0 = new FieldDefinition((ClassDefinition) null, enumSet0, (String) null, class0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.putField(fieldDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field is static: FieldDefinition{access=[public, private, protected, static, final, super, synchronized, volatile, bridge, varargs, transient, native, interface, abstract, strict, synthetic, annotation, enum], name='null', type=Ljava/lang/Object;}
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      bytecodeBlock0.pop(parameterizedType0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      bytecodeBlock0.pop(class0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<ParameterizedType> class0 = ParameterizedType.class;
      bytecodeBlock0.dup(class0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      assertTrue(bytecodeBlock0.isEmpty());
      
      LabelNode labelNode0 = new LabelNode();
      bytecodeBlock0.ifNotZeroGoto(labelNode0);
      boolean boolean0 = bytecodeBlock0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.newObject(parameterizedType0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop();
      BytecodeBlock bytecodeBlock0 = forLoop0.update();
      Class<Object> class0 = Object.class;
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(parameterizedType0, "%s (%s) must not be greater than size (%s)", parameterizedType0, (Iterable<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.getField((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      DoWhileLoop doWhileLoop0 = new DoWhileLoop("O>V8gVpvYqW", objectArray0);
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.condition();
      Class<Optional> class0 = Optional.class;
      Class<Parameter> class1 = Parameter.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getStaticField(class0, "O>V8gVpvYqW", class1);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic((ParameterizedType) null, "sU_gx\"@?G{+", (ParameterizedType) null, (Iterable<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      LabelNode labelNode0 = new LabelNode("com.google.common.base.CharMatcher$InRange");
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.ifNotNullGoto(labelNode0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intLeftShift();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("variable must be an byte, short or int, but is %s");
      Parameter parameter0 = new Parameter("variable must be an byte, short or int, but is %s", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putVariable((Variable) parameter0, parameterizedType0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longLeftShift();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Variable> class0 = Variable.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.ret(class0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Float float0 = new Float(1446.1F);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.push((Number) float0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.isInstanceOf((ParameterizedType) null);
      String[] stringArray0 = new String[3];
      MethodNode methodNode0 = new MethodNode((-10), "Vaez8fo", "e*+<ZK&?9l^d", "D\"RIG#I!@`F ", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      // Undeclared exception!
      try { 
        bytecodeBlock1.accept((MethodVisitor) methodNode0, methodGenerationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.TypeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intRightShift();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longCompare();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intToLong();
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.push(0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Throwable> class0 = Throwable.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getStaticField(parameterizedType0, "*D-^L'bl 2SoQ/cZW", parameterizedType0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.incrementVariable((Variable) null, (byte) (-87));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      Access access0 = Access.VARARGS;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      ArrayDeque<Parameter> arrayDeque0 = new ArrayDeque<Parameter>();
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "", parameterizedType0, arrayDeque0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(methodDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.dup();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Comment> class0 = Comment.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.newArray(class0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ASMifier aSMifier0 = new ASMifier();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeDynamic("-AX[ISx!~JX&y.re", (ParameterizedType) null, (Iterable<ParameterizedType>) null, (Method) null, aSMifier0.text);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: -AX[ISx!~JX&y.re
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      bytecodeBlock0.setDescription("");
      String string0 = bytecodeBlock0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intAdd();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.pushNull();
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic((MethodDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.doubleCompareNanLess();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longBitXor();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.retBoolean();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.condition();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intBitXor();
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      LabelNode labelNode0 = new LabelNode();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.gotoLabel(labelNode0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      Access access0 = Access.TRANSIENT;
      Access[] accessArray0 = new Access[8];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = access0;
      accessArray0[5] = access0;
      accessArray0[6] = access0;
      accessArray0[7] = accessArray0[4];
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "n=v|^M0mS9Ilz", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putStaticField(fieldDefinition0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop();
      BytecodeBlock bytecodeBlock0 = forLoop0.update();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.unsignedLongRightShift();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<String> class0 = String.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.checkCast(class0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeConstructor((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop();
      BytecodeBlock bytecodeBlock0 = whileLoop0.body();
      Class<Variable> class0 = Variable.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putVariable((Variable) parameter0, 1934);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[5];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      Access access0 = Access.TRANSIENT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, ", =pNS[", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, ", =pNS[", parameterizedTypeArray0[1]);
      // Undeclared exception!
      try { 
        bytecodeBlock0.putStaticField(parameterizedType0, fieldDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field is not static: FieldDefinition{access=[com.facebook.presto.bytecode.Access@0000000017], name=', =pNS[', type=Lint;}
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      WhileLoop whileLoop0 = new WhileLoop();
      BytecodeBlock bytecodeBlock0 = whileLoop0.body();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getIntArrayElement();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      LabelNode labelNode0 = new LabelNode("");
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.ifFalseGoto(labelNode0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<OpCode> class0 = OpCode.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.isInstanceOf(class0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      DoWhileLoop doWhileLoop0 = new DoWhileLoop("O>V8gVpvYqW", objectArray0);
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.condition();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longRightShift();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.body();
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.newObject(class0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      DoWhileLoop doWhileLoop0 = new DoWhileLoop("O>V8gVpvYqW", objectArray0);
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.condition();
      Class<ParameterizedType> class0 = ParameterizedType.class;
      Class<StaticTypeBytecodeExpression>[] classArray0 = (Class<StaticTypeBytecodeExpression>[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.push(parameterizedType0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.push(class0);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.retLong();
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.checkCast((ParameterizedType) null);
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      Variable variable0 = new Variable("int", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getVariable(variable0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      bytecodeBlock0.longToInt();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.setDescription("com.facebook.presto.bytecode.BytecodeBlock");
      assertEquals("com.facebook.presto.bytecode.BytecodeBlock", bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.retInt();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      LabelNode labelNode0 = new LabelNode();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.ifNullGoto(labelNode0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      LabelNode labelNode0 = new LabelNode();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.ifTrueGoto(labelNode0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      Class<Access> class1 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.allOf(class1);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[9];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedTypeArray0[0];
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      parameterizedTypeArray0[8] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, " N^j,0~I", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "HjDG!+Ze^j&Le", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getStaticField(parameterizedType0, fieldDefinition0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      String string0 = bytecodeBlock0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      bytecodeBlock0.doubleCompareNanGreater();
      String[] stringArray0 = new String[8];
      MethodNode methodNode0 = new MethodNode((-11), (String) null, "", "", stringArray0);
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      CheckMethodAdapter checkMethodAdapter0 = new CheckMethodAdapter((-11), "", "org.objectweb.asm.tree.analysis.BasicInterpreter", methodNode0, hashMap0);
      // Undeclared exception!
      try { 
        bytecodeBlock0.accept((MethodVisitor) checkMethodAdapter0, (MethodGenerationContext) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot visit instructions before visitCode has been called.
         //
         verifyException("org.objectweb.asm.util.CheckMethodAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<Optional> class1 = Optional.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeInterface(class0, " N^j,0~I", class1, classArray0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putIntArrayElement();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual(classArray0[0], "variable must be an byte, short or int, but is %s", class0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Comment> class0 = Comment.class;
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeConstructor(class0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Comment> class0 = Comment.class;
      Class<Object> class1 = Object.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putField(class0, "bGWz=^bZVjG", class1);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Parameter> class0 = Parameter.class;
      Class<Object> class1 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeSpecial(class0, " N^j,0~I", class1, classArray0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putStaticField(parameterizedType0, "", parameterizedType0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.swap();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<String> class0 = String.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeStatic(class0, " N^j,0~I", class0, classArray0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.push(true);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.condition();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.pop();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      BytecodeBlock bytecodeBlock0 = doWhileLoop0.condition();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.throwObject();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longNegate();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intNegate();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longAdd();
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      Class<Access> class1 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.allOf(class1);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[9];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      parameterizedTypeArray0[8] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, " N^j,0~I", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "HjDG!+Ze^j&Le", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getField(fieldDefinition0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeVisitor<Object> bytecodeVisitor0 = new BytecodeVisitor<Object>();
      Object object0 = bytecodeBlock0.accept((BytecodeNode) bytecodeBlock0, bytecodeVisitor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putField((ParameterizedType) null, "", (ParameterizedType) null);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Object[] objectArray0 = new Object[3];
      ForLoop forLoop0 = new ForLoop("Invalid type reference sort 0x", objectArray0);
      LabelNode labelNode0 = forLoop0.getContinueLabel();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.visitLabel(labelNode0);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ForLoop forLoop0 = new ForLoop("", objectArray0);
      BytecodeBlock bytecodeBlock0 = forLoop0.initialize();
      // Undeclared exception!
      try { 
        bytecodeBlock0.push((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      Variable variable0 = new Variable("int", parameterizedType0);
      Integer integer0 = new Integer(0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putVariable(variable0, (Number) integer0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop();
      BytecodeBlock bytecodeBlock0 = forLoop0.update();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putObjectArrayElement();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.getObjectArrayElement();
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      Parameter parameter0 = Parameter.arg("short", class0);
      Class<Integer> class1 = Integer.class;
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putVariable((Variable) parameter0, (Class<?>) class1);
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.putField((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("Invalid type reference sort 0x");
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeConstructor(parameterizedType0, (Iterable<ParameterizedType>) linkedHashSet0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ForLoop forLoop0 = new ForLoop();
      BytecodeBlock bytecodeBlock0 = forLoop0.update();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface((ParameterizedType) null, "", (ParameterizedType) null, (ParameterizedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("!RKg");
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>(1177);
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeInterface(parameterizedType0, "", parameterizedType0, (Iterable<ParameterizedType>) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ForLoop forLoop0 = new ForLoop("currentLineNumber must be positive", objectArray0);
      BytecodeBlock bytecodeBlock0 = forLoop0.update();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeStatic((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.getStaticField((FieldDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Object[] objectArray0 = new Object[7];
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.comment("sU_gx\"@?G{+", objectArray0);
      assertFalse(bytecodeBlock1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.comment("int");
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intBitOr();
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longBitOr();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.longBitAnd();
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("V-3a:&Aq6");
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeSpecial(parameterizedType0, "V-3a:&Aq6", parameterizedType0, (Iterable<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.retFloat();
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intBitAnd();
      assertSame(bytecodeBlock0, bytecodeBlock1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("int");
      Variable variable0 = new Variable("int", parameterizedType0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putVariable(variable0, false);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.getStaticField((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.BytecodeBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.putVariable((Variable) null, "");
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeVirtual((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Class<Optional> class0 = Optional.class;
      MethodType methodType0 = MethodType.methodType(class0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        bytecodeBlock0.invokeDynamic("-[iq&D%aU)5z4", methodType0, (Method) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = new ParameterizedType("Invalid type reference sort 0x");
      Access access0 = Access.VOLATILE;
      Access[] accessArray0 = new Access[9];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = access0;
      accessArray0[5] = access0;
      accessArray0[6] = access0;
      accessArray0[7] = access0;
      accessArray0[8] = access0;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Class<Parameter> class0 = Parameter.class;
      ServiceLoader<Parameter> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "FSTORE", parameterizedType0, serviceLoader0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeSpecial(methodDefinition0);
      assertNull(bytecodeBlock1.getDescription());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.unsignedIntRightShift();
      assertSame(bytecodeBlock1, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("variable must be an byte, short or int, but is %s");
      Access access0 = Access.VOLATILE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "bGWz=^bZVjG", parameterizedType0, parameterizedTypeArray0);
      ArrayDeque<Parameter> arrayDeque0 = new ArrayDeque<Parameter>();
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "variable must be an byte, short or int, but is %s", parameterizedType0, arrayDeque0);
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.invokeInterface(methodDefinition0);
      assertFalse(bytecodeBlock1.isEmpty());
  }
}
