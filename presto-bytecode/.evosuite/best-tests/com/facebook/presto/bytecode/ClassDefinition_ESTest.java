/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 21:58:50 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.AnnotationDefinition;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.FieldDefinition;
import com.facebook.presto.bytecode.MethodDefinition;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import java.lang.reflect.Array;
import java.sql.SQLTransientConnectionException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassDefinition_ESTest extends ClassDefinition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      Access[] accessArray0 = new Access[5];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = accessArray0[2];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, " (must not be null)", parameterizedType0, parameterizedTypeArray0);
      ClassDefinition classDefinition1 = classDefinition0.visitSource("$v<}DV`", "I8MokZ,2vL");
      assertEquals("$v<}DV`", classDefinition1.getSource());
      assertEquals(" (must not be null)", classDefinition1.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Access access1 = Access.SYNCHRONIZED;
      enumSet0.add(access1);
      ClassWriter classWriter0 = new ClassWriter(7);
      classDefinition0.visit(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Access access0 = Access.STRICT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      ParameterizedType parameterizedType0 = new ParameterizedType(">}A8|^HA{U ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      ClassDefinition classDefinition0 = null;
      try {
        classDefinition0 = new ClassDefinition(enumSet0, "interfaces is null", parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.SYNCHRONIZED;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = accessArray0[0];
      accessArray0[3] = accessArray0[0];
      Access access1 = Access.INTERFACE;
      accessArray0[4] = access1;
      accessArray0[5] = accessArray0[2];
      accessArray0[6] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      boolean boolean0 = classDefinition0.isInterface();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Access access0 = Access.TRANSIENT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0);
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      classArray0[1] = classArray0[0];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "6i$z&", parameterizedType0, parameterizedTypeArray0);
      ParameterizedType parameterizedType1 = classDefinition0.getSuperClass();
      assertEquals("java.lang.Integer", parameterizedType1.getJavaClassName());
      assertEquals("6i$z&", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.TRANSIENT;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "SKc/rW=lV;+@{+h", parameterizedType0, parameterizedTypeArray0);
      ClassDefinition classDefinition1 = classDefinition0.visitSource("XeR$.", "XeR$.");
      classDefinition1.getSource();
      assertEquals("SKc/rW=lV;+@{+h", classDefinition1.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Access access0 = Access.VOLATILE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0);
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      String string0 = classDefinition0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Access access0 = Access.STRICT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      ParameterizedType parameterizedType0 = new ParameterizedType(">}A8|^HA{U ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "interfaces is null", parameterizedType0, parameterizedTypeArray0);
      classDefinition0.declareField(enumSet0, "f", parameterizedType0);
      assertEquals("interfaces is null", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      Access[] accessArray0 = new Access[5];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = accessArray0[0];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, " (must not be null)", parameterizedType0, parameterizedTypeArray0);
      ClassDefinition classDefinition1 = classDefinition0.addField(enumSet0, " (must not be null)", parameterizedType0);
      assertEquals(" (must not be null)", classDefinition1.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      // Undeclared exception!
      try { 
        ClassDefinition.genericClassSignature(parameterizedType0, (ParameterizedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName(">&qFo/+{9");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      // Undeclared exception!
      try { 
        ClassDefinition.genericClassSignature(parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<ParameterizedType> linkedList0 = new LinkedList<ParameterizedType>();
      // Undeclared exception!
      try { 
        ClassDefinition.genericClassSignature((ParameterizedType) null, (List<ParameterizedType>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.TRANSIENT;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "SKc/rW=lV;+@{+h", parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareMethod(enumSet0, "com.facebook.presto.bytecode.ClassDefinition", parameterizedType0, (Parameter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[3];
      // Undeclared exception!
      try { 
        classDefinition0.declareMethod(enumSet0, "com.facebook.presto.bytecode.ParameterizedType@0000000002", parameterizedType0, parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("(w[: !PK?rrXQ(G");
      Access access0 = Access.TRANSIENT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[9];
      Class<AnnotationDefinition> class0 = AnnotationDefinition.class;
      Parameter parameter0 = Parameter.arg("expectedValuesPerKey", class0);
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameterArray0[0];
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameterArray0[1];
      parameterArray0[6] = parameterArray0[3];
      parameterArray0[7] = parameter0;
      parameterArray0[8] = parameterArray0[4];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "d(!PoE6lfAF!k;ehrOO", parameterizedType0, parameterArray0);
      classDefinition0.addMethod(methodDefinition0);
      // Undeclared exception!
      try { 
        classDefinition0.declareMethod(enumSet0, "d(!PoE6lfAF!k;ehrOO", parameterizedType0, parameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method with same name and signature already exists: d(!PoE6lfAF!k;ehrOO
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      HashSet<Parameter> hashSet0 = new HashSet<Parameter>(linkedList0);
      classDefinition0.declareConstructor(enumSet0, (Iterable<Parameter>) hashSet0);
      // Undeclared exception!
      try { 
        classDefinition0.declareMethod(enumSet0, (String) null, parameterizedType0, (Iterable<Parameter>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      // Undeclared exception!
      try { 
        classDefinition0.declareMethod(enumSet0, "com.facebook.presto.bytecode.ParameterizedType@0000000002", parameterizedType0, (Iterable<Parameter>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareField(enumSet0, "ClassDefinition{access=[public, private], type=Lcom/facebook/presto/bytecode/MethodDefinition;}", (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Access[] accessArray0 = new Access[4];
      Access access0 = Access.NATIVE;
      accessArray0[0] = access0;
      accessArray0[1] = accessArray0[0];
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("ClassDefinition{access=[public, protected, strict], type=Lcom/facebook/presto/bytecode/MethodDefinition;}");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedTypeArray0[1];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      classDefinition0.addMethod((MethodDefinition) null);
      // Undeclared exception!
      try { 
        classDefinition0.declareDefaultConstructor(enumSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Access[] accessArray0 = new Access[9];
      Access access0 = Access.FINAL;
      accessArray0[0] = access0;
      Access access1 = Access.STATIC;
      accessArray0[1] = access1;
      accessArray0[2] = accessArray0[1];
      accessArray0[3] = access1;
      accessArray0[4] = access1;
      accessArray0[5] = access1;
      accessArray0[6] = accessArray0[5];
      accessArray0[7] = accessArray0[1];
      accessArray0[8] = accessArray0[6];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<Access> class0 = Access.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedTypeArray0[4];
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareDefaultConstructor(enumSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Static methods do not have a 'this' variable
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      HashSet<Parameter> hashSet0 = new HashSet<Parameter>(linkedList0);
      classDefinition0.declareConstructor(enumSet0, (Iterable<Parameter>) hashSet0);
      // Undeclared exception!
      try { 
        classDefinition0.declareDefaultConstructor(enumSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method with same name and signature already exists: <init>
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.INTERFACE;
      accessArray0[0] = access0;
      accessArray0[1] = accessArray0[0];
      accessArray0[2] = accessArray0[0];
      accessArray0[3] = accessArray0[0];
      accessArray0[4] = accessArray0[1];
      accessArray0[5] = access0;
      accessArray0[6] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<AnnotationDefinition> class0 = AnnotationDefinition.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = classArray0[1];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "NEWARRAY", parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareDefaultConstructor(enumSet0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // Interface does not have method body
         //
         verifyException("com.facebook.presto.bytecode.MethodDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.VARARGS;
      accessArray0[0] = access0;
      accessArray0[1] = accessArray0[0];
      accessArray0[2] = accessArray0[0];
      accessArray0[3] = access0;
      accessArray0[4] = accessArray0[1];
      accessArray0[5] = accessArray0[2];
      accessArray0[6] = accessArray0[0];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "9hLNNk?", parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareConstructor(enumSet0, (Parameter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      Access[] accessArray0 = new Access[5];
      accessArray0[0] = access0;
      Parameter[] parameterArray0 = new Parameter[3];
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, " (must not be null)", parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareConstructor(enumSet0, parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      // Undeclared exception!
      try { 
        classDefinition0.declareConstructor((EnumSet<Access>) null, (Iterable<Parameter>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.MethodDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      HashSet<Parameter> hashSet0 = new HashSet<Parameter>();
      classDefinition0.declareConstructor(enumSet0, (Iterable<Parameter>) hashSet0);
      // Undeclared exception!
      try { 
        classDefinition0.declareConstructor(enumSet0, (Iterable<Parameter>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method with same name and signature already exists: <init>
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.PUBLIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("value ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareAnnotation((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Access access0 = Access.ABSTRACT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0);
      ParameterizedType parameterizedType0 = new ParameterizedType("/?9Wn00>8hp");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        classDefinition0.addField((EnumSet<Access>) null, (String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Access access0 = Access.SUPER;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      ClassDefinition classDefinition0 = null;
      try {
        classDefinition0 = new ClassDefinition(enumSet0, (String) null, parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.BRIDGE;
      accessArray0[0] = access0;
      accessArray0[1] = accessArray0[0];
      accessArray0[2] = accessArray0[0];
      accessArray0[3] = access0;
      accessArray0[4] = accessArray0[3];
      accessArray0[5] = access0;
      accessArray0[6] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      ClassDefinition classDefinition0 = null;
      try {
        classDefinition0 = new ClassDefinition(enumSet0, "com.google.common.collect.DiscreteDomain$BigIntegerDomain", parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name com.google.common.collect.DiscreteDomain$BigIntegerDomain
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      ClassDefinition classDefinition0 = null;
      try {
        classDefinition0 = new ClassDefinition((EnumSet<Access>) null, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // access is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Access> class0 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.allOf(class0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("r");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[9];
      ClassDefinition classDefinition0 = null;
      try {
        classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.PUBLIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("value ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Vector<Parameter> vector0 = new Vector<Parameter>();
      Parameter[] parameterArray0 = new Parameter[0];
      classDefinition0.declareMethod(enumSet0, "value ", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareMethod(enumSet0, "value ", parameterizedType0, (Iterable<Parameter>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method with same name and signature already exists: value 
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      Parameter[] parameterArray0 = new Parameter[3];
      Parameter parameter0 = Parameter.arg("ClassDefinition{access=[public, private, strict], type=Lcom/facebook/presto/bytecode/MethodDefinition;}", parameterizedType0);
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[0];
      MethodDefinition methodDefinition0 = classDefinition0.declareMethod(enumSet0, "com.facebook.presto.bytecode.ParameterizedType@0000000002", parameterizedType0, parameterArray0);
      MethodDefinition methodDefinition1 = classDefinition0.declareMethod(enumSet0, "com.facebook.presto.bytecode.ParameterizedType@0000000002", parameterizedType0, (Iterable<Parameter>) linkedList0);
      assertFalse(methodDefinition1.equals((Object)methodDefinition0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      HashSet<Parameter> hashSet0 = new HashSet<Parameter>(linkedList0);
      classDefinition0.declareConstructor(enumSet0, (Iterable<Parameter>) hashSet0);
      MethodDefinition methodDefinition0 = classDefinition0.declareMethod(enumSet0, "!W/_[;xfJ\"y", parameterizedType0, (Iterable<Parameter>) linkedList0);
      assertNull(methodDefinition0.getComment());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Access access0 = Access.PUBLIC;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareField((EnumSet<Access>) null, "com.google.common.base.CharMatcher$Negated", parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.PUBLIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("value ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      ParameterizedType parameterizedType1 = classDefinition0.getType();
      assertSame(parameterizedType1, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.SYNCHRONIZED;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = accessArray0[1];
      accessArray0[3] = accessArray0[0];
      accessArray0[4] = accessArray0[1];
      accessArray0[5] = accessArray0[3];
      accessArray0[6] = accessArray0[0];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      boolean boolean0 = classDefinition0.isInterface();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[3];
      Parameter parameter0 = Parameter.arg("end index (%s) must not be less than start index (%s)", parameterizedType0);
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameterArray0[1];
      classDefinition0.declareConstructor(enumSet0, parameterArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareConstructor(enumSet0, parameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method with same name and signature already exists: <init>
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      MethodDefinition methodDefinition0 = classDefinition0.getClassInitializer();
      classDefinition0.addMethod(methodDefinition0);
      assertEquals("<clinit>", methodDefinition0.getName());
      
      MethodDefinition methodDefinition1 = classDefinition0.declareConstructor(enumSet0, (Iterable<Parameter>) linkedList0);
      assertEquals("<init>", methodDefinition1.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.SYNCHRONIZED;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      Access access1 = Access.INTERFACE;
      accessArray0[4] = access1;
      accessArray0[5] = accessArray0[0];
      accessArray0[6] = access1;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.getClassInitializer();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // Interface does not have class initializer
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      HashSet<Parameter> hashSet0 = new HashSet<Parameter>(linkedList0);
      classDefinition0.declareConstructor(enumSet0, (Iterable<Parameter>) hashSet0);
      ClassWriter classWriter0 = new ClassWriter(7);
      classDefinition0.visit(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.PUBLIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("value ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Class<String> class0 = String.class;
      classDefinition0.declareAnnotation(class0);
      ClassWriter classWriter0 = new ClassWriter(2885);
      classDefinition0.visit(classWriter0);
      assertEquals("value ", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      classDefinition0.visitSource("ClassDefinition{access=[public, private, strict], type=Lcom/facebook/presto/bytecode/MethodDefinition;}", "ClassDefinition{access=[public, private, strict], type=Lcom/facebook/presto/bytecode/MethodDefinition;}");
      ClassWriter classWriter0 = new ClassWriter(7);
      classDefinition0.visit(classWriter0);
      assertEquals("com/facebook/presto/bytecode/MethodDefinition", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.SYNCHRONIZED;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      Access access1 = Access.INTERFACE;
      accessArray0[4] = access1;
      accessArray0[5] = accessArray0[2];
      accessArray0[6] = access1;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      ClassWriter classWriter0 = new ClassWriter(125);
      classDefinition0.visit(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.PUBLIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("value ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ParameterizedType[] parameterizedTypeArray1 = new ParameterizedType[4];
      parameterizedTypeArray1[0] = parameterizedType0;
      Class<String> class0 = String.class;
      ParameterizedType parameterizedType1 = ParameterizedType.type(class0, parameterizedTypeArray0);
      parameterizedTypeArray1[1] = parameterizedType1;
      parameterizedTypeArray1[2] = parameterizedType0;
      parameterizedTypeArray1[3] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "value ", parameterizedType0, parameterizedTypeArray1);
      ClassWriter classWriter0 = new ClassWriter(2885);
      classDefinition0.visit(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Access access0 = Access.STRICT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0);
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[5];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.visit((ClassVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.ClassDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      List<FieldDefinition> list0 = classDefinition0.getFields();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Set<Access> set0 = classDefinition0.getAccess();
      assertTrue(set0.contains(access0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      List<ParameterizedType> list0 = classDefinition0.getInterfaces();
      String string0 = ClassDefinition.genericClassSignature(parameterizedType0, list0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.BRIDGE;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = accessArray0[2];
      accessArray0[4] = access0;
      accessArray0[5] = accessArray0[2];
      accessArray0[6] = accessArray0[3];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "9hLNNk?", parameterizedType0, parameterizedTypeArray0);
      ClassDefinition classDefinition1 = classDefinition0.declareDefaultConstructor(enumSet0);
      assertEquals("9hLNNk?", classDefinition1.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.BRIDGE;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = accessArray0[0];
      accessArray0[3] = accessArray0[1];
      accessArray0[4] = access0;
      accessArray0[5] = accessArray0[1];
      accessArray0[6] = accessArray0[1];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "9hLNNk?", parameterizedType0, parameterizedTypeArray0);
      Class<Integer> class0 = Integer.class;
      ClassDefinition classDefinition1 = classDefinition0.addField(enumSet0, "", class0);
      assertEquals("9hLNNk?", classDefinition1.getName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      ParameterizedType parameterizedType1 = classDefinition0.getSuperClass();
      assertEquals("Lcom/facebook/presto/bytecode/MethodDefinition;", parameterizedType1.getType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.STATIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "SKc/rW=lV;+@{+h", parameterizedType0, parameterizedTypeArray0);
      classDefinition0.getSource();
      assertEquals("SKc/rW=lV;+@{+h", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.BRIDGE;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = accessArray0[0];
      accessArray0[3] = accessArray0[2];
      accessArray0[4] = accessArray0[0];
      accessArray0[5] = accessArray0[0];
      accessArray0[6] = accessArray0[2];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "9hLNNk?", parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.declareConstructor((EnumSet<Access>) null, (Iterable<Parameter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.STATIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "SKc/rW=lV;+@{+h", parameterizedType0, parameterizedTypeArray0);
      classDefinition0.getMethods();
      assertEquals("SKc/rW=lV;+@{+h", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      String string0 = ClassDefinition.genericClassSignature(parameterizedType0, parameterizedTypeArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.STATIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Class<Parameter>[] classArray0 = (Class<Parameter>[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "SKc/rW=lV;+@{+h", parameterizedType0, parameterizedTypeArray0);
      classDefinition0.declareAnnotation(parameterizedType0);
      assertEquals("SKc/rW=lV;+@{+h", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Access[] accessArray0 = new Access[7];
      Access access0 = Access.BRIDGE;
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = accessArray0[1];
      accessArray0[3] = accessArray0[1];
      accessArray0[4] = accessArray0[3];
      accessArray0[5] = accessArray0[2];
      accessArray0[6] = accessArray0[0];
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "9hLNNk?", parameterizedType0, parameterizedTypeArray0);
      classDefinition0.getAnnotations();
      assertEquals("9hLNNk?", classDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Access[] accessArray0 = new Access[1];
      Access access0 = Access.PUBLIC;
      accessArray0[0] = access0;
      EnumSet<Access> enumSet0 = Access.a(accessArray0);
      ParameterizedType parameterizedType0 = new ParameterizedType("value ");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "1ceGxA2Zu)v\"w,0D+", parameterizedTypeArray0[1]);
      ClassDefinition classDefinition1 = classDefinition0.addField(fieldDefinition0);
      assertSame(classDefinition0, classDefinition1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Class<Access> class1 = Access.class;
      classDefinition0.declareField(enumSet0, "ClassDefinition{access=[public, private, strict], type=Lcom/facebook/presto/bytecode/MethodDefinition;}", class1);
      ClassWriter classWriter0 = new ClassWriter(7);
      classDefinition0.visit(classWriter0);
      assertNull(classDefinition0.getSource());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      // Undeclared exception!
      try { 
        classDefinition0.addField((EnumSet<Access>) null, "|g3?g-}VF]8N/+zL", parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      String string0 = classDefinition0.toString();
      assertEquals("ClassDefinition{access=[private], type=Lcom/facebook/presto/bytecode/MethodDefinition;}", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Access access0 = Access.PRIVATE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<MethodDefinition> class0 = MethodDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      String string0 = classDefinition0.getName();
      assertEquals("com/facebook/presto/bytecode/MethodDefinition", string0);
  }
}
