/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 03:41:06 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.ClassGenerator;
import com.facebook.presto.bytecode.DynamicClassLoader;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.invoke.MethodHandle;
import java.nio.file.Path;
import java.sql.SQLClientInfoException;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.objectweb.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassGenerator_ESTest extends ClassGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator((ClassLoader) null);
      StringWriter stringWriter0 = new StringWriter();
      classGenerator0.outputTo(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      // Undeclared exception!
      try { 
        classGenerator0.dumpClassFilesTo((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      // Undeclared exception!
      try { 
        classGenerator0.defineClasses((List<ClassDefinition>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Type type0 = Type.BOOLEAN_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      LinkedList<ClassDefinition> linkedList0 = new LinkedList<ClassDefinition>();
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedTypeArray0[5];
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "+S", parameterizedType0, parameterizedTypeArray0);
      linkedList0.add(classDefinition0);
      // Undeclared exception!
      try { 
        classGenerator0.defineClasses(linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DynamicClassLoader dynamicClassLoader0 = new DynamicClassLoader(classLoader0);
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(dynamicClassLoader0);
      Stack<ClassDefinition> stack0 = new Stack<ClassDefinition>();
      Access access0 = Access.SYNCHRONIZED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      Class<Throwable> class0 = Throwable.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "H", parameterizedType0, parameterizedTypeArray0);
      stack0.add(classDefinition0);
      // Undeclared exception!
      try { 
        classGenerator0.defineClasses(stack0);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Type type0 = Type.BOOLEAN_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      LinkedList<ClassDefinition> linkedList0 = new LinkedList<ClassDefinition>();
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      linkedList0.add(classDefinition0);
      // Undeclared exception!
      try { 
        classGenerator0.defineClasses(linkedList0);
        fail("Expecting exception: ClassCircularityError");
      
      } catch(ClassCircularityError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Type type0 = Type.BOOLEAN_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Class<Object> class0 = Object.class;
      ClassDefinition classDefinition1 = classDefinition0.addField(enumSet0, (String) null, class0);
      // Undeclared exception!
      try { 
        classGenerator0.defineClass(classDefinition1, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        classGenerator0.defineClass((ClassDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Type type0 = Type.BYTE_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "+S", parameterizedType0, parameterizedTypeArray0);
      Class<StringWriter> class0 = StringWriter.class;
      // Undeclared exception!
      try { 
        classGenerator0.defineClass(classDefinition0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DynamicClassLoader dynamicClassLoader0 = new DynamicClassLoader(classLoader0);
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(dynamicClassLoader0);
      Access access0 = Access.SUPER;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Class<Long> class0 = Long.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "Failed to write generated class file: ", parameterizedType0, parameterizedTypeArray0);
      Class<Parameter> class1 = Parameter.class;
      // Undeclared exception!
      try { 
        classGenerator0.defineClass(classDefinition0, class1);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Type type0 = Type.BYTE_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedTypeArray0[4];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        classGenerator0.defineClass(classDefinition0, class0);
        fail("Expecting exception: ClassFormatError");
      
      } catch(ClassFormatError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassGenerator.classGenerator((DynamicClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // classLoader is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DynamicClassLoader dynamicClassLoader0 = new DynamicClassLoader(classLoader0);
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(dynamicClassLoader0);
      ClassGenerator classGenerator1 = classGenerator0.runAsmVerifier(true);
      Stack<ClassDefinition> stack0 = new Stack<ClassDefinition>();
      Access access0 = Access.SYNCHRONIZED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      stack0.add(classDefinition0);
      // Undeclared exception!
      try { 
        classGenerator1.defineClasses(stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name (must not be null or empty)
         //
         verifyException("org.objectweb.asm.util.CheckMethodAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DynamicClassLoader dynamicClassLoader0 = new DynamicClassLoader(classLoader0);
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(dynamicClassLoader0);
      ClassGenerator classGenerator1 = classGenerator0.fakeLineNumbers(true);
      Stack<ClassDefinition> stack0 = new Stack<ClassDefinition>();
      Access access0 = Access.SYNCHRONIZED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      Class<Throwable> class0 = Throwable.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      stack0.add(classDefinition0);
      // Undeclared exception!
      try { 
        classGenerator1.defineClasses(stack0);
        fail("Expecting exception: ClassFormatError");
      
      } catch(ClassFormatError e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassGenerator.classGenerator((ClassLoader) null, (Map<Long, MethodHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator((ClassLoader) null);
      // Undeclared exception!
      try { 
        classGenerator0.dumpClassFilesTo((Optional<Path>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // dumpClassPath is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DynamicClassLoader dynamicClassLoader0 = new DynamicClassLoader((ClassLoader) null);
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(dynamicClassLoader0);
      ClassGenerator classGenerator1 = classGenerator0.dumpRawBytecode(true);
      Stack<ClassDefinition> stack0 = new Stack<ClassDefinition>();
      Access access0 = Access.SYNCHRONIZED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      Class<Throwable> class0 = Throwable.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[6];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "1Ya>vd,A", parameterizedType0, parameterizedTypeArray0);
      stack0.add(classDefinition0);
      // Undeclared exception!
      try { 
        classGenerator1.defineClasses(stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DynamicClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DynamicClassLoader dynamicClassLoader0 = new DynamicClassLoader((ClassLoader) null);
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(dynamicClassLoader0);
      ClassGenerator classGenerator1 = classGenerator0.dumpRawBytecode(true);
      Stack<ClassDefinition> stack0 = new Stack<ClassDefinition>();
      classGenerator1.defineClasses(stack0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      ClassGenerator classGenerator1 = classGenerator0.runAsmVerifier(true);
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Type type0 = Type.BOOLEAN_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        classGenerator1.defineClass(classDefinition0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid access flags: 36
         //
         verifyException("org.objectweb.asm.util.CheckClassAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator(classLoader0);
      ClassGenerator classGenerator1 = classGenerator0.fakeLineNumbers(true);
      Access access0 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      Type type0 = Type.FLOAT_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        classGenerator1.defineClass(classDefinition0, class0);
        fail("Expecting exception: ClassCircularityError");
      
      } catch(ClassCircularityError e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator((ClassLoader) null);
      MockFile mockFile0 = new MockFile("|");
      Path path0 = mockFile0.toPath();
      classGenerator0.dumpClassFilesTo(path0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassGenerator classGenerator0 = ClassGenerator.classGenerator((ClassLoader) null);
      // Undeclared exception!
      try { 
        classGenerator0.outputTo((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // output is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
