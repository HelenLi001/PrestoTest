/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:13:25 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.BytecodeVisitor;
import com.facebook.presto.bytecode.Comment;
import com.facebook.presto.bytecode.MethodGenerationContext;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.MethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comment comment0 = new Comment("com.facebook.presto.bytecode.Comment");
      String string0 = comment0.getComment();
      assertEquals("com.facebook.presto.bytecode.Comment", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comment comment0 = new Comment("");
      String string0 = comment0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comment comment0 = new Comment("OS>11");
      List<BytecodeNode> list0 = comment0.getChildNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comment comment0 = new Comment("OS>11");
      // Undeclared exception!
      try { 
        comment0.accept((BytecodeNode) comment0, (BytecodeVisitor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comment comment0 = new Comment("OS>11");
      String string0 = comment0.toString();
      assertEquals("Comment{OS>11}", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comment comment0 = new Comment("cex0");
      comment0.accept((MethodVisitor) null, (MethodGenerationContext) null);
      assertEquals("cex0", comment0.getComment());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      String string0 = comment0.getComment();
      assertNull(string0);
  }
}
