/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 21:57:51 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.AnnotationDefinition;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.BytecodeVisitor;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.Comment;
import com.facebook.presto.bytecode.DumpBytecodeVisitor;
import com.facebook.presto.bytecode.FieldDefinition;
import com.facebook.presto.bytecode.MethodDefinition;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.OpCode;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Scope;
import com.facebook.presto.bytecode.StaticTypeBytecodeExpression;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.control.CaseStatement;
import com.facebook.presto.bytecode.control.DoWhileLoop;
import com.facebook.presto.bytecode.control.ForLoop;
import com.facebook.presto.bytecode.control.IfStatement;
import com.facebook.presto.bytecode.control.SwitchStatement;
import com.facebook.presto.bytecode.control.TryCatch;
import com.facebook.presto.bytecode.control.WhileLoop;
import com.facebook.presto.bytecode.debug.LineNumberNode;
import com.facebook.presto.bytecode.debug.LocalVariableNode;
import com.facebook.presto.bytecode.expression.ArithmeticBytecodeExpression;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.instruction.Constant;
import com.facebook.presto.bytecode.instruction.FieldInstruction;
import com.facebook.presto.bytecode.instruction.InstructionNode;
import com.facebook.presto.bytecode.instruction.InvokeInstruction;
import com.facebook.presto.bytecode.instruction.JumpInstruction;
import com.facebook.presto.bytecode.instruction.LabelNode;
import com.facebook.presto.bytecode.instruction.TypeInstruction;
import com.facebook.presto.bytecode.instruction.VariableInstruction;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.invoke.MethodType;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.util.CheckMethodAdapter;
import org.objectweb.asm.util.Textifier;
import org.objectweb.asm.util.TraceMethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DumpBytecodeVisitor_ESTest extends DumpBytecodeVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.FNEG;
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("(/MPqTG", class0);
      Class<Variable>[] classArray0 = (Class<Variable>[]) Array.newInstance(Class.class, 4);
      Class<Variable> class1 = Variable.class;
      classArray0[0] = class1;
      Class<Variable> class2 = Variable.class;
      classArray0[1] = class2;
      Class<Variable> class3 = Variable.class;
      classArray0[2] = class3;
      Class<Variable> class4 = Variable.class;
      classArray0[3] = class4;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>(1);
      TreeSet<Variable> treeSet0 = new TreeSet<Variable>();
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("(/MPqTG", parameterizedType0, (Iterable<ParameterizedType>) arrayDeque0, (Iterable<? extends BytecodeExpression>) treeSet0);
      TreeSet<CaseStatement> treeSet1 = new TreeSet<CaseStatement>();
      CaseStatement caseStatement0 = mock(CaseStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameter0).when(caseStatement0).getBody();
      doReturn((-2987)).when(caseStatement0).getKey();
      doReturn((-3737)).when(caseStatement0).compareTo(any(com.facebook.presto.bytecode.control.CaseStatement.class));
      treeSet1.add(caseStatement0);
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet1).when(switchStatement0).cases();
      doReturn(bytecodeExpression0).when(switchStatement0).expression();
      doReturn("(/MPqTG", "#w,A3Kq[yd2^,tv?ke").when(switchStatement0).getComment();
      doReturn((BytecodeNode) null).when(switchStatement0).getDefaultBody();
      dumpBytecodeVisitor0.visitSwitch(opCode0, switchStatement0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F7a:xk8{\u0003Z@{!b{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "F7a:xk8{\u0003Z@{!b{";
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "F7a:xk8{\u0003Z@{!b{", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ParameterizedType.type(class0);
      OpCode opCode0 = OpCode.ALOAD_3;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitBoxedFloatConstant(opCode0, (Constant.BoxedFloatConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "U74";
      File file0 = MockFile.createTempFile("m1gIy", "U74");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.ICONST_5;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dumpBytecodeVisitor0;
      objectArray0[1] = (Object) opCode0;
      objectArray0[2] = (Object) file0;
      WhileLoop whileLoop0 = new WhileLoop("U74", objectArray0);
      String[] stringArray0 = new String[1];
      MethodNode methodNode0 = new MethodNode(0, "m1gIy", "U74", "com.facebook.presto.bytecode.DumpBytecodeVisitor", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      methodGenerationContext0.updateLineNumber(0);
      opCode0.accept((MethodVisitor) methodNode0, methodGenerationContext0);
      LabelNode labelNode0 = whileLoop0.getContinueLabel();
      labelNode0.toString();
      dumpBytecodeVisitor0.visitLabel(opCode0, labelNode0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.printWords(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F7a:xk8{\u0003Z@{!b{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "F7a:xk8{\u0003Z@{!b{";
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "F7a:xk8{\u0003Z@{!b{", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      InstructionNode instructionNode0 = TypeInstruction.instanceOf(parameterizedType0);
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.newObject(parameterizedType0);
      BytecodeBlock bytecodeBlock2 = bytecodeBlock1.push(class0);
      TryCatch tryCatch0 = new TryCatch(instructionNode0, bytecodeBlock2, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(instructionNode0, tryCatch0);
      bytecodeBlock2.unsignedLongRightShift();
      IfStatement ifStatement0 = new IfStatement();
      dumpBytecodeVisitor0.visitIf(tryCatch0, ifStatement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.FNEG;
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("(/MPqTG", class0);
      Class<Variable>[] classArray0 = (Class<Variable>[]) Array.newInstance(Class.class, 4);
      Class<Variable> class1 = Variable.class;
      classArray0[0] = class1;
      Class<Variable> class2 = Variable.class;
      classArray0[1] = class2;
      Class<Variable> class3 = Variable.class;
      classArray0[2] = class3;
      Class<Variable> class4 = Variable.class;
      classArray0[3] = class4;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>(1);
      TreeSet<Variable> treeSet0 = new TreeSet<Variable>();
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("(/MPqTG", parameterizedType0, (Iterable<ParameterizedType>) arrayDeque0, (Iterable<? extends BytecodeExpression>) treeSet0);
      TreeSet<CaseStatement> treeSet1 = new TreeSet<CaseStatement>();
      CaseStatement caseStatement0 = mock(CaseStatement.class, new ViolatedAssumptionAnswer());
      doReturn((BytecodeNode) null).when(caseStatement0).getBody();
      doReturn(0).when(caseStatement0).getKey();
      doReturn(0).when(caseStatement0).compareTo(any(com.facebook.presto.bytecode.control.CaseStatement.class));
      treeSet1.add(caseStatement0);
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet1).when(switchStatement0).cases();
      doReturn(bytecodeExpression0).when(switchStatement0).expression();
      doReturn("(/MPqTG", "#w,A3Kq[yd2^,tv?ke").when(switchStatement0).getComment();
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitSwitch(opCode0, switchStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m");
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter1);
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(constant_BoxedIntegerConstant0).getValue();
      Access access0 = Access.SYNTHETIC;
      Access access1 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access1);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("B");
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType1;
      parameterizedTypeArray0[4] = parameterizedType1;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType1;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType1, parameterizedTypeArray0);
      Access access2 = Access.SUPER;
      EnumSet<Access> enumSet1 = EnumSet.of(access0, access1, access2);
      Class<FieldDefinition> class0 = FieldDefinition.class;
      ClassDefinition classDefinition1 = classDefinition0.addField(enumSet1, "m", class0);
      dumpBytecodeVisitor0.visitClass(classDefinition1);
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      Float float0 = new Float(2.0F);
      Constant.BoxedFloatConstant constant_BoxedFloatConstant0 = mock(Constant.BoxedFloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(constant_BoxedFloatConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedFloatConstant((BytecodeNode) null, constant_BoxedFloatConstant0);
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction((Variable) null);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitLoadVariable((BytecodeNode) null, variableInstruction_LoadVariableInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^:z}Po");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "^:z}Po", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "^:z}Po");
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '0';
      charArray0[2] = 'a';
      charArray0[3] = 'T';
      charArray0[4] = '<';
      stringWriter1.write(charArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter3 = stringWriter2.append('A');
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter3);
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      Constant.BoxedLongConstant constant_BoxedLongConstant0 = mock(Constant.BoxedLongConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(constant_BoxedLongConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedLongConstant(bytecodeBlock0, constant_BoxedLongConstant0);
      ForLoop forLoop0 = new ForLoop();
      ForLoop forLoop1 = forLoop0.condition((BytecodeNode) bytecodeBlock0);
      dumpBytecodeVisitor0.visitFor(bytecodeBlock0, forLoop1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("??{jP%},", "Funnels.stringFunnel(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "??{jP%},");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "??{jP%},";
      objectArray0[3] = (Object) dumpBytecodeVisitor0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      IfStatement ifStatement0 = new IfStatement("ARETURN", objectArray0);
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      ifStatement1.condition((BytecodeNode) ifStatement0);
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Integer integer0 = Integer.valueOf((-787));
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_BoxedIntegerConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      Access access0 = Access.SYNCHRONIZED;
      Access access1 = Access.PUBLIC;
      Access access2 = Access.VARARGS;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access1, access2);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      Type type0 = Type.INT_TYPE;
      ParameterizedType parameterizedType1 = ParameterizedType.type(type0);
      parameterizedTypeArray0[0] = parameterizedType1;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      ClassDefinition classDefinition1 = classDefinition0.addField(enumSet0, "Funnels.stringFunnel(", parameterizedType0);
      ClassDefinition classDefinition2 = classDefinition1.visitSource("Funnels.stringFunnel(", "xtisurww\"Rq\"{M['XyN");
      ClassDefinition classDefinition3 = new ClassDefinition(enumSet0, "default:", parameterizedType1, parameterizedTypeArray0);
      Class<Parameter> class1 = Parameter.class;
      ServiceLoader<Parameter> serviceLoader0 = ServiceLoader.load(class1);
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition3, enumSet0, "+.%HtX`44YTsu@@bE", parameterizedType1, serviceLoader0);
      MethodDefinition methodDefinition1 = methodDefinition0.comment("UNaP=J{Y)75|iZ~1lQ9", parameterizedTypeArray0);
      ClassDefinition classDefinition4 = classDefinition2.addMethod(methodDefinition1);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition2, enumSet0, "7-5n$eXl`n?F\"y5b0", parameterizedType1);
      ClassDefinition classDefinition5 = classDefinition4.addField(fieldDefinition0);
      dumpBytecodeVisitor0.visitField(classDefinition5, fieldDefinition0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F7a:xk8{\u0003Z@{!b{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "F7a:xk8{\u0003Z@{!b{";
      objectArray0[2] = (Object) mockFile0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("F7a:xk8{\u0003Z@{!b{");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter1);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      InstructionNode instructionNode0 = TypeInstruction.instanceOf(parameterizedType0);
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.newObject(parameterizedType0);
      BytecodeBlock bytecodeBlock2 = bytecodeBlock1.push(class0);
      bytecodeBlock0.newObject(parameterizedType0);
      TryCatch tryCatch0 = new TryCatch(instructionNode0, bytecodeBlock2, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(instructionNode0, tryCatch0);
      dumpBytecodeVisitor0.visitBlock(bytecodeBlock0, bytecodeBlock2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m");
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter1);
      Integer integer0 = new Integer((-4148));
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_BoxedIntegerConstant0).getValue();
      Access access0 = Access.SYNTHETIC;
      Access access1 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access1);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("B");
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType1;
      parameterizedTypeArray0[4] = parameterizedType1;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType1;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType1, parameterizedTypeArray0);
      Access access2 = Access.SUPER;
      EnumSet<Access> enumSet1 = EnumSet.of(access0, access1, access2);
      ClassDefinition classDefinition1 = classDefinition0.declareDefaultConstructor(enumSet1);
      dumpBytecodeVisitor0.visitClass(classDefinition1);
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      Float float0 = new Float((float) (-4148));
      Constant.BoxedFloatConstant constant_BoxedFloatConstant0 = mock(Constant.BoxedFloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(constant_BoxedFloatConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedFloatConstant((BytecodeNode) null, constant_BoxedFloatConstant0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("m1gIy", "U74");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.ICONST_5;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dumpBytecodeVisitor0;
      objectArray0[1] = (Object) opCode0;
      objectArray0[2] = (Object) file0;
      WhileLoop whileLoop0 = new WhileLoop("U74", objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U74";
      MethodNode methodNode0 = new MethodNode(0, "m1gIy", "U74", "com.facebook.presto.bytecode.DumpBytecodeVisitor", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      methodGenerationContext0.updateLineNumber(0);
      opCode0.accept((MethodVisitor) methodNode0, methodGenerationContext0);
      LabelNode labelNode0 = whileLoop0.getContinueLabel();
      labelNode0.toString();
      dumpBytecodeVisitor0.visitLabel(opCode0, labelNode0);
      dumpBytecodeVisitor0.printWords(stringArray0);
      Double double0 = new Double(0);
      Constant.BoxedDoubleConstant constant_BoxedDoubleConstant0 = mock(Constant.BoxedDoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(constant_BoxedDoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedDoubleConstant(opCode0, constant_BoxedDoubleConstant0);
      Boolean boolean0 = Boolean.valueOf(true);
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(whileLoop0, constant_BoxedBooleanConstant0);
      Float float0 = new Float((double) 0);
      Constant.FloatConstant constant_FloatConstant0 = mock(Constant.FloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(constant_FloatConstant0).getValue();
      dumpBytecodeVisitor0.visitFloatConstant(labelNode0, constant_FloatConstant0);
      Double double1 = new Double(0);
      Constant.DoubleConstant constant_DoubleConstant0 = mock(Constant.DoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn(double1).when(constant_DoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitDoubleConstant(opCode0, constant_DoubleConstant0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("U74");
      TryCatch tryCatch0 = new TryCatch(labelNode0, whileLoop0, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(whileLoop0, tryCatch0);
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>();
      InvokeInstruction invokeInstruction0 = new InvokeInstruction(opCode0, parameterizedType0, "qRN!", parameterizedType0, arrayDeque0);
      dumpBytecodeVisitor0.visitInvoke(labelNode0, invokeInstruction0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(50);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, ";k#j?ud}+.", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Optional<ParameterizedType> optional0 = Optional.empty();
      TreeSet<Parameter> treeSet0 = new TreeSet<Parameter>();
      Scope scope0 = new Scope(optional0, treeSet0);
      ParameterizedType parameterizedType0 = new ParameterizedType("load constant %s");
      Variable variable0 = scope0.declareVariable(parameterizedType0, ",*O+ !");
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitDoubleConstant(variable0, (Constant.DoubleConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("??{jP%},", "Funnels.stringFunnel(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "??{jP%},");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "??{jP%},";
      objectArray0[3] = (Object) dumpBytecodeVisitor0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      IfStatement ifStatement0 = new IfStatement("ARETURN", objectArray0);
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      ifStatement1.condition((BytecodeNode) ifStatement0);
      Class<AnnotationDefinition> class0 = AnnotationDefinition.class;
      Integer integer0 = new Integer(1);
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_BoxedIntegerConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      InstructionNode instructionNode0 = TypeInstruction.newObject(class0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitLineNumber(instructionNode0, (LineNumberNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.LSHR;
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("<]*e");
      TryCatch tryCatch0 = new TryCatch(opCode0, opCode0, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(opCode0, tryCatch0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitAnnotation((Object) null, (AnnotationDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpCode opCode0 = OpCode.JSR_W;
      Class<Integer> class0 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      Class<String> class4 = String.class;
      classArray0[3] = class4;
      Class<String> class5 = String.class;
      classArray0[4] = class5;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      TryCatch tryCatch0 = new TryCatch(opCode0, opCode0, parameterizedType0);
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8]`X:z");
      Locale locale0 = Locale.ITALY;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "8]`X:z", (Object[]) classArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitBoxedDoubleConstant(tryCatch0, (Constant.BoxedDoubleConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("??{jP%},", "Funnels.stringFunnel(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "??{jP%},");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "??{jP%},";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) dumpBytecodeVisitor0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      IfStatement ifStatement0 = new IfStatement("ARETURN", objectArray0);
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      ifStatement1.condition((BytecodeNode) ifStatement0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitIf(ifStatement0, ifStatement1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter0.flush();
      StringWriter stringWriter2 = stringWriter1.append('Y');
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter2);
      LabelNode labelNode0 = new LabelNode();
      InstructionNode instructionNode0 = JumpInstruction.jumpIfObjectSame(labelNode0);
      stringWriter1.write((-5134));
      Class<String> class0 = String.class;
      Parameter parameter0 = Parameter.arg("try {", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.pop();
      dumpBytecodeVisitor0.visitBytecodeExpression(instructionNode0, bytecodeExpression0);
      Constant.IntConstant constant_IntConstant0 = mock(Constant.IntConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(constant_IntConstant0).getValue();
      dumpBytecodeVisitor0.visitIntConstant(instructionNode0, constant_IntConstant0);
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction(parameter0);
      dumpBytecodeVisitor0.visitLoadVariable(bytecodeExpression0, variableInstruction_LoadVariableInstruction0);
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(variableInstruction_LoadVariableInstruction0, constant_BoxedBooleanConstant0);
      OpCode opCode0 = OpCode.D2I;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) stringWriter0;
      LabelNode labelNode1 = new LabelNode("S}IA?c");
      LocalVariableNode localVariableNode0 = new LocalVariableNode(parameter0, labelNode0, labelNode1);
      dumpBytecodeVisitor0.visitDebug(variableInstruction_LoadVariableInstruction0, localVariableNode0);
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) constant_IntConstant0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      objectArray0[6] = (Object) parameter0;
      ForLoop forLoop0 = new ForLoop("S}IA?c", objectArray0);
      LabelNode labelNode2 = forLoop0.getContinueLabel();
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode0, labelNode2);
      dumpBytecodeVisitor0.visitJumpInstruction(bytecodeExpression0, jumpInstruction0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I?{HlIh/:u9jIH5i");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "I?{HlIh/:u9jIH5i";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("I?{HlIh/:u9jIH5i", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Access access0 = Access.VARARGS;
      Access[] accessArray0 = new Access[9];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = access0;
      accessArray0[5] = access0;
      Access access1 = Access.SYNCHRONIZED;
      accessArray0[6] = access1;
      accessArray0[7] = access0;
      accessArray0[8] = access0;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      enumSet0.add(access0);
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      TreeSet<Parameter> treeSet0 = new TreeSet<Parameter>();
      TreeSet<Parameter> treeSet1 = new TreeSet<Parameter>((SortedSet<Parameter>) treeSet0);
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "I?{HlIh/:u9jIH5i", parameterizedType0, treeSet1);
      dumpBytecodeVisitor0.visitMethod(classDefinition0, methodDefinition0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitBoxedLongConstant((BytecodeNode) null, (Constant.BoxedLongConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7[+:");
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      printWriter0.close();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      ForLoop forLoop0 = new ForLoop("", (Object[]) null);
      BytecodeBlock bytecodeBlock0 = forLoop0.condition();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intRightShift();
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      dumpBytecodeVisitor0.visitDoWhile(bytecodeBlock0, doWhileLoop0);
      Comment comment0 = new Comment((String) null);
      dumpBytecodeVisitor0.visitComment(bytecodeBlock1, comment0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wIY<)GL[gi\"/\".s*D");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "wIY<)GL[gi\"/\".s*D");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      DoWhileLoop doWhileLoop0 = new DoWhileLoop();
      dumpBytecodeVisitor0.visitDoWhile((BytecodeNode) null, doWhileLoop0);
      Class<AnnotationDefinition> class0 = AnnotationDefinition.class;
      Class<MethodDefinition>[] classArray0 = (Class<MethodDefinition>[]) Array.newInstance(Class.class, 1);
      Class<MethodDefinition> class1 = MethodDefinition.class;
      classArray0[0] = class1;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      TryCatch tryCatch0 = new TryCatch(doWhileLoop0, doWhileLoop0, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(doWhileLoop0, tryCatch0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m");
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter1);
      Integer integer0 = new Integer((-3));
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_BoxedIntegerConstant0).getValue();
      Access access0 = Access.SYNTHETIC;
      Access access1 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access1);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("B");
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType1;
      parameterizedTypeArray0[4] = parameterizedType1;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType1;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType1, parameterizedTypeArray0);
      Access access2 = Access.SUPER;
      EnumSet.of(access0, access1, access2);
      dumpBytecodeVisitor0.visitClass(classDefinition0);
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      Float float0 = new Float((-1.0));
      Constant.BoxedFloatConstant constant_BoxedFloatConstant0 = mock(Constant.BoxedFloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(constant_BoxedFloatConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedFloatConstant((BytecodeNode) null, constant_BoxedFloatConstant0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitIf((BytecodeNode) null, (IfStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.LOOKUPSWITCH;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitTryCatch(opCode0, (TryCatch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("??{jP%},", "Funnels.stringFunnel(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "??{jP%},");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "??{jP%},";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) dumpBytecodeVisitor0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      IfStatement ifStatement0 = new IfStatement("ARETURN", objectArray0);
      BytecodeNode bytecodeNode0 = null;
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      ifStatement1.condition((BytecodeNode) ifStatement0);
      Class<Optional<AnnotationDefinition>>[] classArray0 = (Class<Optional<AnnotationDefinition>>[]) Array.newInstance(Class.class, 6);
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction((Variable) null);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitStoreVariable(ifStatement0, variableInstruction_StoreVariableInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("??{jP%},", "Funnels.stringFunnel(");
      file0.delete();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "??{jP%},");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "??{jP%},";
      printWriter0.print(0.0F);
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) dumpBytecodeVisitor0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      IfStatement ifStatement0 = new IfStatement("ARETURN", objectArray0);
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      IfStatement ifStatement2 = ifStatement1.condition((BytecodeNode) ifStatement0);
      Class<Integer> class0 = Integer.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Constant.ClassConstant constant_ClassConstant0 = mock(Constant.ClassConstant.class, new ViolatedAssumptionAnswer());
      doReturn(parameterizedType0).when(constant_ClassConstant0).getValue();
      dumpBytecodeVisitor0.visitClassConstant(ifStatement2, constant_ClassConstant0);
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(constant_BoxedIntegerConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      dumpBytecodeVisitor0.visitBlock(bytecodeBlock0, bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E9[aQe3Y-(;xODq");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      stringWriter0.append((CharSequence) "E9[aQe3Y-(;xODq");
      objectArray0[1] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("#o_.`q", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      IfStatement ifStatement0 = new IfStatement("E9[aQe3Y-(;xODq", objectArray0);
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitIf((BytecodeNode) null, ifStatement1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      String string0 = "";
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, parameterizedTypeArray0);
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.pop();
      DoWhileLoop doWhileLoop0 = new DoWhileLoop("", parameterizedTypeArray0);
      dumpBytecodeVisitor0.visitDoWhile(bytecodeExpression0, doWhileLoop0);
      TryCatch tryCatch0 = new TryCatch(doWhileLoop0, bytecodeExpression0, parameterizedType0);
      Constant.StringConstant constant_StringConstant0 = mock(Constant.StringConstant.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(constant_StringConstant0).getValue();
      dumpBytecodeVisitor0.visitStringConstant(bytecodeExpression0, constant_StringConstant0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      parameterizedType0.toString();
      dumpBytecodeVisitor0.visitDoWhile(parameter0, doWhileLoop0);
      Constant.BoxedLongConstant constant_BoxedLongConstant0 = mock(Constant.BoxedLongConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(constant_BoxedLongConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedLongConstant(doWhileLoop0, constant_BoxedLongConstant0);
      Constant.IntConstant constant_IntConstant0 = mock(Constant.IntConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(constant_IntConstant0).getValue();
      dumpBytecodeVisitor0.visitIntConstant(parameter0, constant_IntConstant0);
      dumpBytecodeVisitor0.printLine();
      dumpBytecodeVisitor0.visitTryCatch(parameter0, tryCatch0);
      dumpBytecodeVisitor0.printLine();
      EnumSet<Access> enumSet0 = null;
      ParameterizedType[] parameterizedTypeArray1 = new ParameterizedType[9];
      parameterizedTypeArray1[0] = parameterizedType0;
      parameterizedTypeArray1[1] = parameterizedType0;
      parameterizedTypeArray1[2] = parameterizedType0;
      parameterizedTypeArray1[3] = parameterizedType0;
      parameterizedTypeArray1[4] = parameterizedType0;
      parameterizedTypeArray1[5] = parameterizedType0;
      parameterizedTypeArray1[6] = parameterizedType0;
      parameterizedTypeArray1[7] = parameterizedType0;
      parameterizedTypeArray1[8] = parameterizedType0;
      ClassDefinition classDefinition0 = null;
      try {
        classDefinition0 = new ClassDefinition((EnumSet<Access>) null, parameterizedType0, parameterizedType0, parameterizedTypeArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // access is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.forLanguageTag("*YHkLj}5<)R:");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      LabelNode labelNode0 = new LabelNode();
      Textifier textifier0 = new Textifier();
      Textifier textifier1 = textifier0.visitFieldAnnotation("", true);
      Textifier textifier2 = textifier1.visitMethodAnnotation("RFP*(Vq#R8y6H{`6&G", true);
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(textifier2);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      labelNode0.accept((MethodVisitor) traceMethodVisitor0, methodGenerationContext0);
      BytecodeExpression bytecodeExpression0 = null;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitBytecodeExpression(labelNode0, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.FNEG;
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("(/MPqTG", class0);
      Class<Variable>[] classArray0 = (Class<Variable>[]) Array.newInstance(Class.class, 4);
      Class<Variable> class1 = Variable.class;
      classArray0[0] = class1;
      Class<Variable> class2 = Variable.class;
      classArray0[1] = class2;
      Class<Variable> class3 = Variable.class;
      classArray0[2] = class3;
      Class<Variable> class4 = Variable.class;
      classArray0[3] = class4;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>(1);
      TreeSet<Variable> treeSet0 = new TreeSet<Variable>();
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("(/MPqTG", parameterizedType0, (Iterable<ParameterizedType>) arrayDeque0, (Iterable<? extends BytecodeExpression>) treeSet0);
      TreeSet<CaseStatement> treeSet1 = new TreeSet<CaseStatement>();
      CaseStatement caseStatement0 = mock(CaseStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(caseStatement0).compareTo(any(com.facebook.presto.bytecode.control.CaseStatement.class));
      NavigableSet<CaseStatement> navigableSet0 = treeSet1.tailSet(caseStatement0, true);
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn(navigableSet0).when(switchStatement0).cases();
      doReturn(bytecodeExpression0).when(switchStatement0).expression();
      doReturn("(/MPqTG", "").when(switchStatement0).getComment();
      doReturn(parameter0, (BytecodeNode) null).when(switchStatement0).getDefaultBody();
      dumpBytecodeVisitor0.visitSwitch(opCode0, switchStatement0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l}n50aW+-");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.DNEG;
      Constant.StringConstant constant_StringConstant0 = mock(Constant.StringConstant.class, new ViolatedAssumptionAnswer());
      doReturn("l}n50aW+-").when(constant_StringConstant0).getValue();
      dumpBytecodeVisitor0.visitStringConstant(opCode0, constant_StringConstant0);
      dumpBytecodeVisitor0.visitInstruction(opCode0, opCode0);
      LineNumberNode lineNumberNode0 = new LineNumberNode((-174));
      mockPrintWriter0.println(", defaultValue=");
      dumpBytecodeVisitor0.visitLineNumber(opCode0, lineNumberNode0);
      Boolean boolean0 = Boolean.TRUE;
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(opCode0, constant_BoxedBooleanConstant0);
      Integer integer0 = new Integer((-174));
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_BoxedIntegerConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedIntegerConstant(opCode0, constant_BoxedIntegerConstant0);
      Object[] objectArray0 = new Object[0];
      WhileLoop whileLoop0 = new WhileLoop("", objectArray0);
      dumpBytecodeVisitor0.visitWhile(opCode0, whileLoop0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter1);
      Constant constant0 = Constant.loadBoxedInt((-3007));
      mockFile0.getAbsoluteFile();
      Constant.IntConstant constant_IntConstant0 = mock(Constant.IntConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(constant_IntConstant0).getValue();
      dumpBytecodeVisitor0.visitIntConstant(constant0, constant_IntConstant0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.FNEG;
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("(/MPqTG", class0);
      Class<Variable>[] classArray0 = (Class<Variable>[]) Array.newInstance(Class.class, 4);
      Class<Variable> class1 = Variable.class;
      classArray0[0] = class1;
      Class<Variable> class2 = Variable.class;
      classArray0[1] = class2;
      Class<Variable> class3 = Variable.class;
      classArray0[2] = class3;
      Class<Variable> class4 = Variable.class;
      classArray0[3] = class4;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>(1);
      TreeSet<Variable> treeSet0 = new TreeSet<Variable>();
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("(/MPqTG", parameterizedType0, (Iterable<ParameterizedType>) arrayDeque0, (Iterable<? extends BytecodeExpression>) treeSet0);
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn((SortedSet) null).when(switchStatement0).cases();
      doReturn(bytecodeExpression0).when(switchStatement0).expression();
      doReturn("(/MPqTG", (String) null).when(switchStatement0).getComment();
      doReturn((BytecodeNode) null).when(switchStatement0).getDefaultBody();
      dumpBytecodeVisitor0.visitSwitch(opCode0, switchStatement0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7[+:");
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      ForLoop forLoop0 = new ForLoop("", (Object[]) null);
      BytecodeBlock bytecodeBlock0 = forLoop0.condition();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.intRightShift();
      Comment comment0 = new Comment((String) null);
      dumpBytecodeVisitor0.visitComment(bytecodeBlock1, comment0);
      WhileLoop whileLoop0 = new WhileLoop("", (Object[]) null);
      WhileLoop whileLoop1 = whileLoop0.body((BytecodeNode) comment0);
      WhileLoop whileLoop2 = whileLoop1.condition((BytecodeNode) forLoop0);
      dumpBytecodeVisitor0.visitWhile(bytecodeBlock0, whileLoop2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q2_`'L'NNBO[{f$`:");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[2];
      locale0.getDisplayScript();
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "Q2_`'L'NNBO[{f$`:";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Q2_`'L'NNBO[{f$`:", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      OpCode opCode0 = OpCode.LOR;
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("Q2_`'L'NNBO[{f$`:");
      Class<Parameter> class0 = Parameter.class;
      ParameterizedType.getPathName(class0);
      TryCatch tryCatch0 = new TryCatch("SASTORE", opCode0, opCode0, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(opCode0, tryCatch0);
      Constant.LongConstant constant_LongConstant0 = mock(Constant.LongConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(constant_LongConstant0).getValue();
      dumpBytecodeVisitor0.visitLongConstant(opCode0, constant_LongConstant0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5298);
      StringWriter stringWriter1 = stringWriter0.append('A');
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter1);
      Constant constant0 = Constant.loadLong((-216L));
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = null;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitBoxedIntegerConstant(constant0, (Constant.BoxedIntegerConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      OpCode opCode0 = OpCode.DCONST_1;
      IfStatement ifStatement0 = new IfStatement();
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) opCode0);
      IfStatement ifStatement2 = ifStatement1.ifFalse((BytecodeNode) opCode0);
      dumpBytecodeVisitor0.visitIf(opCode0, ifStatement2);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitWhile(ifStatement0, (WhileLoop) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1467);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.ICONST_5;
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "";
      ForLoop forLoop0 = new ForLoop("", objectArray0);
      ForLoop forLoop1 = forLoop0.condition((BytecodeNode) opCode0);
      ForLoop forLoop2 = forLoop1.body((BytecodeNode) forLoop0);
      forLoop0.getChildNodes();
      stringWriter0.write("");
      LabelNode labelNode0 = forLoop1.getContinueLabel();
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode0, labelNode0);
      dumpBytecodeVisitor0.visitJumpInstruction(opCode0, jumpInstruction0);
      dumpBytecodeVisitor0.visitNode(forLoop2, jumpInstruction0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.printWords((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I?{HlIh/:u9jIH5i");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "I?{HlIh/:u9jIH5i";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("I?{HlIh/:u9jIH5i", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Access access0 = Access.VARARGS;
      Access[] accessArray0 = new Access[9];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = access0;
      accessArray0[5] = access0;
      Access access1 = Access.SYNCHRONIZED;
      accessArray0[6] = access1;
      accessArray0[7] = access0;
      accessArray0[8] = access0;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      TreeSet<Parameter> treeSet0 = new TreeSet<Parameter>();
      TreeSet<Parameter> treeSet1 = new TreeSet<Parameter>((SortedSet<Parameter>) treeSet0);
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "I?{HlIh/:u9jIH5i", parameterizedType0, treeSet1);
      dumpBytecodeVisitor0.visitMethod(classDefinition0, methodDefinition0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.FNEG;
      stringWriter0.append((CharSequence) null);
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn((BytecodeExpression) null).when(switchStatement0).expression();
      doReturn((String) null).when(switchStatement0).getComment();
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitSwitch(opCode0, switchStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "com.facebook.presto.bytecode.DumpBytecodeVisitor$1";
      MockFile mockFile0 = new MockFile((String) null, "com.facebook.presto.bytecode.DumpBytecodeVisitor$1");
      File file0 = MockFile.createTempFile("r4K4WVtkv\"$Ia$", "M\"x UlXCma'.", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.IAND;
      Constant.BoxedLongConstant constant_BoxedLongConstant0 = mock(Constant.BoxedLongConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(constant_BoxedLongConstant0).getValue();
      mockPrintWriter0.print((-1166.07F));
      dumpBytecodeVisitor0.visitBoxedLongConstant(opCode0, constant_BoxedLongConstant0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitInvoke(opCode0, (InvokeInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      BytecodeNode bytecodeNode0 = null;
      Constant.BooleanConstant constant_BooleanConstant0 = null;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitBooleanConstant((BytecodeNode) null, (Constant.BooleanConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z*10<{a[0k_ '5[");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      Constant constant0 = Constant.loadBoxedInt(345);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitInvoke(constant0, (InvokeInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("??{jP%},", "Funnels.stringFunnel(");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "??{jP%},");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "??{jP%},";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) dumpBytecodeVisitor0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      IfStatement ifStatement0 = new IfStatement("ARETURN", objectArray0);
      BytecodeNode bytecodeNode0 = null;
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      IfStatement ifStatement2 = ifStatement1.condition((BytecodeNode) ifStatement0);
      Constant.ClassConstant constant_ClassConstant0 = mock(Constant.ClassConstant.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterizedType) null).when(constant_ClassConstant0).getValue();
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitClassConstant(ifStatement2, constant_ClassConstant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      File file0 = MockFile.createTempFile("m1gIy", "U74");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.ICONST_5;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dumpBytecodeVisitor0;
      objectArray0[1] = (Object) opCode0;
      objectArray0[2] = (Object) file0;
      WhileLoop whileLoop0 = new WhileLoop("U74", objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U74";
      MethodNode methodNode0 = new MethodNode(0, "m1gIy", "U74", "com.facebook.presto.bytecode.DumpBytecodeVisitor", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      methodGenerationContext0.updateLineNumber(0);
      opCode0.accept((MethodVisitor) methodNode0, methodGenerationContext0);
      LabelNode labelNode0 = whileLoop0.getContinueLabel();
      labelNode0.toString();
      dumpBytecodeVisitor0.visitLabel(opCode0, labelNode0);
      dumpBytecodeVisitor0.printWords(stringArray0);
      Constant.BoxedDoubleConstant constant_BoxedDoubleConstant0 = mock(Constant.BoxedDoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(constant_BoxedDoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedDoubleConstant(opCode0, constant_BoxedDoubleConstant0);
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(whileLoop0, constant_BoxedBooleanConstant0);
      Constant.FloatConstant constant_FloatConstant0 = mock(Constant.FloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Float) null).when(constant_FloatConstant0).getValue();
      dumpBytecodeVisitor0.visitFloatConstant(labelNode0, constant_FloatConstant0);
      Constant.DoubleConstant constant_DoubleConstant0 = mock(Constant.DoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(constant_DoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitDoubleConstant(opCode0, constant_DoubleConstant0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("U74");
      TryCatch tryCatch0 = new TryCatch(labelNode0, whileLoop0, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(whileLoop0, tryCatch0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("iPOp(ob{RG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "iPOp(ob{RG");
      mockFile0.deleteOnExit();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      OpCode opCode0 = OpCode.DSTORE_3;
      WhileLoop whileLoop0 = new WhileLoop();
      WhileLoop whileLoop1 = whileLoop0.condition((BytecodeNode) opCode0);
      dumpBytecodeVisitor0.visitWhile(opCode0, whileLoop1);
      OpCode opCode1 = OpCode.IFNONNULL;
      LabelNode labelNode0 = whileLoop0.getEndLabel();
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode1, labelNode0);
      dumpBytecodeVisitor0.visitJumpInstruction(opCode0, jumpInstruction0);
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn((BytecodeExpression) null).when(switchStatement0).expression();
      doReturn((String) null).when(switchStatement0).getComment();
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitSwitch(whileLoop1, switchStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.LLOAD;
      BytecodeNode bytecodeNode0 = null;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitNode(opCode0, (BytecodeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Label ";
      stringArray0[1] = "OratN6=oh}(ip%[";
      stringArray0[2] = "1";
      stringArray0[3] = "z";
      stringArray0[4] = "";
      stringArray0[5] = " {";
      stringArray0[6] = ".&E(d|ed<^";
      stringArray0[7] = "";
      dumpBytecodeVisitor0.printWords(stringArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null, 0, 0);
      StringWriter stringWriter2 = stringWriter1.append('b');
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter2);
      OpCode opCode0 = OpCode.ISTORE;
      Class<String> class0 = String.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Parameter parameter0 = new Parameter("VM/R7#", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.ret();
      dumpBytecodeVisitor0.visitBytecodeExpression(opCode0, bytecodeExpression0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(85);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter1);
      InstructionNode instructionNode0 = TypeInstruction.newObjectArray((ParameterizedType) null);
      dumpBytecodeVisitor0.visitNode(instructionNode0, instructionNode0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IF_ICMPGT");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "IF_ICMPGT");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Constant.BooleanConstant constant_BooleanConstant0 = mock(Constant.BooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBooleanConstant((BytecodeNode) null, constant_BooleanConstant0);
      Constant.DoubleConstant constant_DoubleConstant0 = mock(Constant.DoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(constant_DoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitDoubleConstant((BytecodeNode) null, constant_DoubleConstant0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("load constant %sL");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "load constant %sL";
      objectArray0[1] = (Object) "load constant %sL";
      objectArray0[2] = (Object) "load constant %sL";
      PrintWriter printWriter0 = mockPrintWriter0.printf("load constant %sL", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      OpCode opCode0 = OpCode.IFLE;
      Class<Integer> class0 = Integer.class;
      AnnotationDefinition annotationDefinition0 = new AnnotationDefinition(class0);
      dumpBytecodeVisitor0.visitAnnotation(objectArray0[2], annotationDefinition0);
      opCode0.getChildNodes();
      OpCode opCode1 = OpCode.valueOf("POP2");
      dumpBytecodeVisitor0.printLine();
      Constant.FloatConstant constant_FloatConstant0 = mock(Constant.FloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Float) null).when(constant_FloatConstant0).getValue();
      dumpBytecodeVisitor0.visitFloatConstant(opCode0, constant_FloatConstant0);
      dumpBytecodeVisitor0.printLine("7'] fKMAEvJ{#", objectArray0);
      DoWhileLoop doWhileLoop0 = new DoWhileLoop("load constant %sL", objectArray0);
      DoWhileLoop doWhileLoop1 = doWhileLoop0.condition((BytecodeNode) opCode1);
      dumpBytecodeVisitor0.visitDoWhile(opCode0, doWhileLoop1);
      dumpBytecodeVisitor0.printLine("?8mHS=(e");
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(doWhileLoop1, constant_BoxedBooleanConstant0);
      String string0 = "load constant %s.class";
      String string1 = "";
      Class<Void> class1 = Void.class;
      Parameter.arg("load constant %s", class1);
      String string2 = " {";
      Class<MethodDefinition> class2 = MethodDefinition.class;
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[9];
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      parameterizedTypeArray0[0] = parameterizedType0;
      Type type0 = Type.LONG_TYPE;
      ParameterizedType parameterizedType1 = ParameterizedType.type(type0);
      parameterizedType1.getArrayComponentType();
      parameterizedTypeArray0[1] = null;
      ParameterizedType parameterizedType2 = ParameterizedType.type(class1);
      parameterizedTypeArray0[2] = parameterizedType2;
      ParameterizedType parameterizedType3 = new ParameterizedType("");
      parameterizedTypeArray0[3] = parameterizedType3;
      ParameterizedType parameterizedType4 = new ParameterizedType("");
      parameterizedTypeArray0[4] = parameterizedType4;
      ParameterizedType parameterizedType5 = ParameterizedType.type(type0);
      parameterizedTypeArray0[5] = parameterizedType5;
      Class<OpCode> class3 = OpCode.class;
      ParameterizedType parameterizedType6 = ParameterizedType.type(class3);
      parameterizedTypeArray0[6] = parameterizedType6;
      // Undeclared exception!
      try { 
        ParameterizedType.typeFromPathName("com.facebook.presto.bytecode.DumpBytecodeVisitor$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name com.facebook.presto.bytecode.DumpBytecodeVisitor$1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(117);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      dumpBytecodeVisitor0.printLine("`");
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromJavaClassName("");
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(3);
      linkedHashSet0.add(parameterizedType0);
      linkedHashSet0.add(parameterizedType1);
      InstructionNode instructionNode0 = InvokeInstruction.invokeInterface(parameterizedType0, "wyG", parameterizedType0, (Iterable<ParameterizedType>) linkedHashSet0);
      dumpBytecodeVisitor0.visitInstruction(instructionNode0, instructionNode0);
      Constant.IntConstant constant_IntConstant0 = null;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitIntConstant(instructionNode0, (Constant.IntConstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_n");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      Type type0 = Type.FLOAT_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      Parameter parameter0 = new Parameter("zIZkac*@q#IE&K_", parameterizedType0);
      parameterizedType0.getAsmType();
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction(parameter0);
      variableInstruction_LoadVariableInstruction0.getChildNodes();
      dumpBytecodeVisitor0.visitVariableInstruction((BytecodeNode) null, variableInstruction_LoadVariableInstruction0);
      dumpBytecodeVisitor0.printLine();
      LineNumberNode lineNumberNode0 = new LineNumberNode(8);
      dumpBytecodeVisitor0.visitLineNumber(parameter0, lineNumberNode0);
      dumpBytecodeVisitor0.printLine();
      Constant.BoxedDoubleConstant constant_BoxedDoubleConstant0 = mock(Constant.BoxedDoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(constant_BoxedDoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedDoubleConstant((BytecodeNode) null, constant_BoxedDoubleConstant0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l}n50aW+-");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.DNEG;
      Constant.StringConstant constant_StringConstant0 = mock(Constant.StringConstant.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(constant_StringConstant0).getValue();
      dumpBytecodeVisitor0.visitStringConstant(opCode0, constant_StringConstant0);
      dumpBytecodeVisitor0.visitInstruction(opCode0, opCode0);
      LineNumberNode lineNumberNode0 = new LineNumberNode((-174));
      mockPrintWriter0.println(", defaultValue=");
      dumpBytecodeVisitor0.visitLineNumber(opCode0, lineNumberNode0);
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(opCode0, constant_BoxedBooleanConstant0);
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(constant_BoxedIntegerConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedIntegerConstant(opCode0, constant_BoxedIntegerConstant0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) locale0;
      locale0.stripExtensions();
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      dumpBytecodeVisitor0.printLine();
      Class<Object> class0 = Object.class;
      FieldInstruction fieldInstruction0 = FieldInstruction.putStaticInstruction(class0, "", class0);
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitJumpInstruction(fieldInstruction0, (JumpInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}|I;}");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      ForLoop forLoop0 = new ForLoop();
      LabelNode labelNode0 = forLoop0.getEndLabel();
      InstructionNode instructionNode0 = JumpInstruction.jumpIfGreaterThanZero(labelNode0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "}|I;}";
      objectArray0[1] = (Object) forLoop0;
      DoWhileLoop doWhileLoop0 = new DoWhileLoop("}|I;}", objectArray0);
      DoWhileLoop doWhileLoop1 = doWhileLoop0.condition((BytecodeNode) labelNode0);
      dumpBytecodeVisitor0.visitDoWhile(instructionNode0, doWhileLoop1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, ".A~w2}t06I5z@$rhfp");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.FASTORE;
      ForLoop forLoop0 = new ForLoop();
      LabelNode labelNode0 = forLoop0.getContinueLabel();
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode0, labelNode0);
      dumpBytecodeVisitor0.visitJumpInstruction((BytecodeNode) null, jumpInstruction0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&tFR|`1A)");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.push("C=uqw");
      Class<Variable> class0 = Variable.class;
      BytecodeBlock bytecodeBlock2 = bytecodeBlock1.pop(class0);
      BytecodeBlock bytecodeBlock3 = bytecodeBlock2.doubleCompareNanGreater();
      Class<ParameterizedType> class1 = ParameterizedType.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class1);
      Access access0 = Access.ABSTRACT;
      Access access1 = Access.SYNCHRONIZED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access1);
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("load constant %sL");
      FieldDefinition fieldDefinition0 = new FieldDefinition((ClassDefinition) null, enumSet0, "&tFR|`1A)", parameterizedType1);
      BytecodeBlock bytecodeBlock4 = bytecodeBlock3.getStaticField(parameterizedType0, fieldDefinition0);
      OpCode opCode0 = OpCode.DSUB;
      dumpBytecodeVisitor0.visitInstruction(bytecodeBlock4, opCode0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(652);
      StringWriter stringWriter1 = stringWriter0.append(';');
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter1);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      stringWriter1.write(charArray0);
      String string0 = "%U.)2Gt";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "%U.)2Gt";
      objectArray0[3] = (Object) dumpBytecodeVisitor0;
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.printLine("%U.)2Gt", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'U'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DumpBytecodeVisitor dumpBytecodeVisitor0 = null;
      try {
        dumpBytecodeVisitor0 = new DumpBytecodeVisitor((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      OpCode opCode0 = OpCode.L2D;
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("(/MPqTG", class0);
      Class<Variable>[] classArray0 = (Class<Variable>[]) Array.newInstance(Class.class, 4);
      Class<Variable> class1 = Variable.class;
      classArray0[0] = class1;
      opCode0.getChildNodes();
      Class<Variable> class2 = Variable.class;
      classArray0[1] = class2;
      Class<Variable> class3 = Variable.class;
      classArray0[2] = class3;
      Class<Variable> class4 = Variable.class;
      classArray0[3] = class4;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ArrayDeque<ParameterizedType> arrayDeque0 = new ArrayDeque<ParameterizedType>(1);
      TreeSet<Variable> treeSet0 = new TreeSet<Variable>();
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("(/MPqTG", parameterizedType0, (Iterable<ParameterizedType>) arrayDeque0, (Iterable<? extends BytecodeExpression>) treeSet0);
      TreeSet<CaseStatement> treeSet1 = new TreeSet<CaseStatement>();
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet1).when(switchStatement0).cases();
      doReturn(bytecodeExpression0).when(switchStatement0).expression();
      doReturn("(/MPqTG", "A4T@L+7!0}V@^#H").when(switchStatement0).getComment();
      doReturn(bytecodeExpression0, (BytecodeNode) null).when(switchStatement0).getDefaultBody();
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitSwitch(opCode0, switchStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('$');
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter1);
      Constant constant0 = Constant.loadBoxedLong(741L);
      String string0 = "2%Q,asbi7]F4pfx";
      Comment comment0 = new Comment("2%Q,asbi7]F4pfx");
      dumpBytecodeVisitor0.visitComment(constant0, comment0);
      LineNumberNode lineNumberNode0 = new LineNumberNode(1);
      BytecodeVisitor<Parameter> bytecodeVisitor0 = new BytecodeVisitor<Parameter>();
      constant0.accept((BytecodeNode) lineNumberNode0, bytecodeVisitor0);
      OpCode opCode0 = OpCode.L2F;
      LabelNode labelNode0 = new LabelNode();
      LabelNode labelNode1 = new LabelNode(labelNode0);
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode0, labelNode1);
      stringWriter0.flush();
      dumpBytecodeVisitor0.visitJumpInstruction(constant0, jumpInstruction0);
      Constant.FloatConstant constant_FloatConstant0 = mock(Constant.FloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Float) null).when(constant_FloatConstant0).getValue();
      dumpBytecodeVisitor0.visitFloatConstant(opCode0, constant_FloatConstant0);
      Constant.LongConstant constant_LongConstant0 = mock(Constant.LongConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(constant_LongConstant0).getValue();
      dumpBytecodeVisitor0.visitLongConstant(labelNode1, constant_LongConstant0);
      Constant.BooleanConstant constant_BooleanConstant0 = mock(Constant.BooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBooleanConstant(jumpInstruction0, constant_BooleanConstant0);
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(constant0, constant_BoxedBooleanConstant0);
      EnumSet<Access> enumSet0 = null;
      ParameterizedType parameterizedType0 = null;
      // Undeclared exception!
      try { 
        ParameterizedType.type((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I?{HlIh/:u9jIH5i");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "I?{HlIh/:u9jIH5i";
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("I?{HlIh/:u9jIH5i", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Access access0 = Access.ABSTRACT;
      Access[] accessArray0 = new Access[9];
      accessArray0[0] = access0;
      accessArray0[1] = access0;
      accessArray0[2] = access0;
      accessArray0[3] = access0;
      accessArray0[4] = access0;
      accessArray0[5] = access0;
      Access access1 = Access.SYNCHRONIZED;
      accessArray0[6] = access1;
      accessArray0[7] = access0;
      accessArray0[8] = access0;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, accessArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[4];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      TreeSet<Parameter> treeSet0 = new TreeSet<Parameter>();
      TreeSet<Parameter> treeSet1 = new TreeSet<Parameter>((SortedSet<Parameter>) treeSet0);
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "I?{HlIh/:u9jIH5i", parameterizedType0, treeSet1);
      dumpBytecodeVisitor0.visitMethod(classDefinition0, methodDefinition0);
      dumpBytecodeVisitor0.visitMethod(classDefinition0, methodDefinition0);
      OpCode opCode0 = OpCode.LCONST_0;
      Constant.StringConstant constant_StringConstant0 = mock(Constant.StringConstant.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(constant_StringConstant0).getValue();
      dumpBytecodeVisitor0.visitStringConstant(opCode0, constant_StringConstant0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(stringWriter0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, parameterizedTypeArray0);
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.pop();
      DoWhileLoop doWhileLoop0 = new DoWhileLoop("", parameterizedTypeArray0);
      dumpBytecodeVisitor0.visitDoWhile(bytecodeExpression0, doWhileLoop0);
      TryCatch tryCatch0 = new TryCatch(doWhileLoop0, bytecodeExpression0, parameterizedType0);
      Constant.StringConstant constant_StringConstant0 = mock(Constant.StringConstant.class, new ViolatedAssumptionAnswer());
      doReturn("").when(constant_StringConstant0).getValue();
      dumpBytecodeVisitor0.visitStringConstant(bytecodeExpression0, constant_StringConstant0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      parameterizedType0.toString();
      dumpBytecodeVisitor0.visitDoWhile(parameter0, doWhileLoop0);
      Long long0 = new Long((byte) (-115));
      Constant.BoxedLongConstant constant_BoxedLongConstant0 = mock(Constant.BoxedLongConstant.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(constant_BoxedLongConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedLongConstant(doWhileLoop0, constant_BoxedLongConstant0);
      Integer integer0 = new Integer((byte) (-115));
      Constant.IntConstant constant_IntConstant0 = mock(Constant.IntConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_IntConstant0).getValue();
      dumpBytecodeVisitor0.visitIntConstant(parameter0, constant_IntConstant0);
      dumpBytecodeVisitor0.printLine();
      dumpBytecodeVisitor0.visitTryCatch(parameter0, tryCatch0);
      dumpBytecodeVisitor0.printLine();
      ParameterizedType[] parameterizedTypeArray1 = new ParameterizedType[9];
      parameterizedTypeArray1[0] = parameterizedType0;
      parameterizedTypeArray1[1] = parameterizedType0;
      parameterizedTypeArray1[2] = parameterizedType0;
      parameterizedTypeArray1[3] = parameterizedType0;
      parameterizedTypeArray1[4] = parameterizedType0;
      parameterizedTypeArray1[5] = parameterizedType0;
      parameterizedTypeArray1[6] = parameterizedType0;
      IfStatement ifStatement0 = new IfStatement();
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) tryCatch0);
      IfStatement ifStatement2 = ifStatement1.ifFalse((BytecodeNode) ifStatement0);
      // Undeclared exception!
      dumpBytecodeVisitor0.visitIf(parameter0, ifStatement2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m");
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter1);
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(constant_BoxedIntegerConstant0).getValue();
      Access access0 = Access.SYNTHETIC;
      Access access1 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access1);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("B");
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType1;
      parameterizedTypeArray0[4] = parameterizedType1;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType1;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType1, parameterizedTypeArray0);
      Access access2 = Access.SUPER;
      EnumSet<Access> enumSet1 = EnumSet.of(access0, access1, access2);
      Class<FieldDefinition> class0 = FieldDefinition.class;
      ClassDefinition classDefinition1 = classDefinition0.addField(enumSet1, "m", class0);
      dumpBytecodeVisitor0.visitClass(classDefinition1);
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      Constant.BoxedFloatConstant constant_BoxedFloatConstant0 = mock(Constant.BoxedFloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Float) null).when(constant_BoxedFloatConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedFloatConstant((BytecodeNode) null, constant_BoxedFloatConstant0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m");
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter1);
      Integer integer0 = new Integer((-4144));
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_BoxedIntegerConstant0).getValue();
      Access access0 = Access.SYNTHETIC;
      Access access1 = Access.PROTECTED;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access1);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("B");
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType1;
      parameterizedTypeArray0[4] = parameterizedType1;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType1;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType1, parameterizedTypeArray0);
      Access access2 = Access.SUPER;
      EnumSet<Access> enumSet1 = EnumSet.of(access0, access1, access2);
      Access access3 = Access.VARARGS;
      enumSet0.add(access3);
      ClassDefinition classDefinition1 = classDefinition0.declareDefaultConstructor(enumSet1);
      dumpBytecodeVisitor0.visitClass(classDefinition1);
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      Float float0 = new Float((float) (-4144));
      Constant.BoxedFloatConstant constant_BoxedFloatConstant0 = mock(Constant.BoxedFloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(constant_BoxedFloatConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedFloatConstant((BytecodeNode) null, constant_BoxedFloatConstant0);
      Variable variable0 = new Variable("Variable '%s' has not been assigned a slot", parameterizedType1);
      VariableInstruction.IncrementVariableInstruction variableInstruction_IncrementVariableInstruction0 = null;
      try {
        variableInstruction_IncrementVariableInstruction0 = new VariableInstruction.IncrementVariableInstruction(variable0, (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // variable must be an byte, short or int, but is 
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F7a:xk8{\u0003Z@{!b{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "F7a:xk8{\u0003Z@{!b{";
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "F7a:xk8{\u0003Z@{!b{", objectArray0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      InstructionNode instructionNode0 = TypeInstruction.instanceOf(parameterizedType0);
      BytecodeBlock bytecodeBlock0 = new BytecodeBlock();
      BytecodeBlock bytecodeBlock1 = bytecodeBlock0.newObject(parameterizedType0);
      BytecodeBlock bytecodeBlock2 = bytecodeBlock1.push(class0);
      TryCatch tryCatch0 = new TryCatch(instructionNode0, bytecodeBlock2, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(instructionNode0, tryCatch0);
      assertNull(tryCatch0.getComment());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockFile mockFile0 = new MockFile("??{jP%},", "??{jP%},");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "??{jP%},");
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(printWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) dumpBytecodeVisitor0;
      IfStatement ifStatement0 = new IfStatement("", objectArray0);
      IfStatement ifStatement1 = ifStatement0.ifTrue((BytecodeNode) null);
      IfStatement ifStatement2 = ifStatement1.condition((BytecodeNode) ifStatement0);
      Integer integer0 = new Integer(86);
      Constant.BoxedIntegerConstant constant_BoxedIntegerConstant0 = mock(Constant.BoxedIntegerConstant.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(constant_BoxedIntegerConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedIntegerConstant((BytecodeNode) null, constant_BoxedIntegerConstant0);
      SwitchStatement switchStatement0 = mock(SwitchStatement.class, new ViolatedAssumptionAnswer());
      doReturn((BytecodeExpression) null).when(switchStatement0).expression();
      doReturn((String) null).when(switchStatement0).getComment();
      // Undeclared exception!
      try { 
        dumpBytecodeVisitor0.visitSwitch(ifStatement2, switchStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.DumpBytecodeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      File file0 = MockFile.createTempFile("m1gIy", "U74");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      DumpBytecodeVisitor dumpBytecodeVisitor0 = new DumpBytecodeVisitor(mockPrintWriter0);
      OpCode opCode0 = OpCode.ICONST_5;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dumpBytecodeVisitor0;
      objectArray0[1] = (Object) opCode0;
      objectArray0[2] = (Object) file0;
      WhileLoop whileLoop0 = new WhileLoop("U74", objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U74";
      MethodNode methodNode0 = new MethodNode(0, "m1gIy", "U74", "com.facebook.presto.bytecode.DumpBytecodeVisitor", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      methodGenerationContext0.updateLineNumber(0);
      opCode0.accept((MethodVisitor) methodNode0, methodGenerationContext0);
      LabelNode labelNode0 = whileLoop0.getContinueLabel();
      labelNode0.toString();
      dumpBytecodeVisitor0.visitLabel(opCode0, labelNode0);
      dumpBytecodeVisitor0.printWords(stringArray0);
      Double double0 = new Double(0.0);
      Constant.BoxedDoubleConstant constant_BoxedDoubleConstant0 = mock(Constant.BoxedDoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(constant_BoxedDoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedDoubleConstant(opCode0, constant_BoxedDoubleConstant0);
      Constant.BoxedBooleanConstant constant_BoxedBooleanConstant0 = mock(Constant.BoxedBooleanConstant.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(constant_BoxedBooleanConstant0).getValue();
      dumpBytecodeVisitor0.visitBoxedBooleanConstant(whileLoop0, constant_BoxedBooleanConstant0);
      Float float0 = new Float((float) 0);
      Constant.FloatConstant constant_FloatConstant0 = mock(Constant.FloatConstant.class, new ViolatedAssumptionAnswer());
      doReturn(float0).when(constant_FloatConstant0).getValue();
      dumpBytecodeVisitor0.visitFloatConstant(labelNode0, constant_FloatConstant0);
      Double double1 = new Double(0);
      Constant.DoubleConstant constant_DoubleConstant0 = mock(Constant.DoubleConstant.class, new ViolatedAssumptionAnswer());
      doReturn(double1).when(constant_DoubleConstant0).getValue();
      dumpBytecodeVisitor0.visitDoubleConstant(opCode0, constant_DoubleConstant0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("U74");
      TryCatch tryCatch0 = new TryCatch(labelNode0, whileLoop0, parameterizedType0);
      dumpBytecodeVisitor0.visitTryCatch(whileLoop0, tryCatch0);
      dumpBytecodeVisitor0.visitWhile(labelNode0, whileLoop0);
      assertEquals("U74", whileLoop0.getComment());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = ")9XN;S6";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, ")9XN;S6");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )9XN;S6
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
