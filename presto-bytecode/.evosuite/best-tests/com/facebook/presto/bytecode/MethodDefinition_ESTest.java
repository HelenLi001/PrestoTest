/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 21:59:41 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.AnnotationDefinition;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.MethodDefinition;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Scope;
import java.lang.reflect.Array;
import java.util.EnumSet;
import java.util.List;
import java.util.MissingFormatArgumentException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.objectweb.asm.ClassVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodDefinition_ESTest extends MethodDefinition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "jDv", "").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      List<AnnotationDefinition> list0 = methodDefinition0.getParameterAnnotations(4);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).getType();
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      String string0 = MethodDefinition.methodDescription(parameterizedType0, parameterizedTypeArray0);
      assertEquals("()null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("W+", (String) null).when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = null;
      try {
        methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      String string0 = methodDefinition0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      Class<Throwable> class0 = Throwable.class;
      methodDefinition0.addException(class0);
      List<ParameterizedType> list0 = methodDefinition0.getExceptions();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      methodDefinition0.comment("vS2vf5HhW]xl\"NW", parameterArray0);
      String string0 = methodDefinition0.getComment();
      assertEquals("vS2vf5HhW]xl\"NW", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      methodDefinition0.comment("", parameterArray0);
      String string0 = methodDefinition0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).toString();
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      String string0 = MethodDefinition.genericMethodSignature(parameterizedType0, parameterizedTypeArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType1 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[9];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("qH,*Our", (String) null).when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      parameterArray0[8] = parameter0;
      MethodDefinition methodDefinition0 = null;
      try {
        methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "com.facebook.presto.bytecode.MethodDefinition", parameterizedType0, parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodDefinition.methodDescription(class0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MethodDefinition.methodDescription(parameterizedType0, (ParameterizedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MethodDefinition.methodDescription(parameterizedType0, (List<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("7n8iI`N+st0n}M;N0").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "7n8iI`N+st0n}M;N0", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.getParameterAnnotations((-1224));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index (-1224) must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(parameter0).getName();
      doReturn((ParameterizedType) null).when(parameter0).getType();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.getMethodDescriptor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterators$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MethodDefinition.genericMethodSignature(parameterizedType0, (ParameterizedType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MethodDefinition.genericMethodSignature(parameterizedType0, (List<ParameterizedType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Joiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("7n8iI`N+st0n}M;N0").when(parameter0).getName();
      doReturn((ParameterizedType) null, (ParameterizedType) null).when(parameter0).getType();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "7n8iI`N+st0n}M;N0", parameterizedType0, parameterArray0);
      ParameterizedType parameterizedType1 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      List<ParameterizedType> list0 = methodDefinition0.getParameterTypes();
      // Undeclared exception!
      try { 
        MethodDefinition.genericMethodSignature(parameterizedType1, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("uNhjYfN9s7?,x").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, (String) null, (ParameterizedType) null, parameterArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        methodDefinition0.declareParameterAnnotation(class0, 1423);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index (1423) must be less than size (1)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        methodDefinition0.declareParameterAnnotation(class0, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("com.google.common.collect.RegularImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      ParameterizedType parameterizedType1 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        methodDefinition0.declareParameterAnnotation(parameterizedType1, 878);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 878
         //
         verifyException("com.google.common.collect.RegularImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.declareAnnotation((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.comment("Expected %s params found %s", parameterArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[9];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      parameterArray0[8] = parameter0;
      MethodDefinition methodDefinition0 = null;
      try {
        methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "E", parameterizedType0, parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.MethodDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[6];
      MethodDefinition methodDefinition0 = null;
      try {
        methodDefinition0 = new MethodDefinition((ClassDefinition) null, (EnumSet<Access>) null, "org.objectweb.asm.RecordComponentVisitor", parameterizedType0, parameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      Class<Throwable> class0 = Throwable.class;
      MethodDefinition methodDefinition1 = methodDefinition0.addException(class0);
      ClassVisitor classVisitor0 = mock(ClassVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        methodDefinition1.visit(classVisitor0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.Access", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("uNhjYfN9s7?,x", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/facebook/presto/bytecode/AnnotationDefinition;").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, (String) null, (ParameterizedType) null, parameterArray0);
      List<Parameter> list0 = methodDefinition0.getParameters();
      MethodDefinition methodDefinition1 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, list0);
      assertNull(methodDefinition1.getComment());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("7n8iI`N+st0n}M;N0").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "7n8iI`N+st0n}M;N0", parameterizedType0, parameterArray0);
      List<Parameter> list0 = methodDefinition0.getParameters();
      MethodDefinition methodDefinition1 = null;
      try {
        methodDefinition1 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, (String) null, parameterizedType0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.MethodDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.toSourceString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Joiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      List<ParameterizedType> list0 = methodDefinition0.getExceptions();
      // Undeclared exception!
      try { 
        MethodDefinition.methodDescription((ParameterizedType) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.MethodDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      Class<Throwable> class0 = Throwable.class;
      methodDefinition0.addException(class0);
      ClassVisitor classVisitor0 = mock(ClassVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        methodDefinition0.visit(classVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.Access", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.getBody();
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // Interface does not have method body
         //
         verifyException("com.facebook.presto.bytecode.MethodDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      BytecodeBlock bytecodeBlock0 = methodDefinition0.getBody();
      assertTrue(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[0];
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "Na_<w7y!?", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.getParameterAnnotations(878);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 878
         //
         verifyException("com.google.common.collect.RegularImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      // Undeclared exception!
      try { 
        MethodDefinition.methodDescription(parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      Class<AnnotationDefinition> class0 = AnnotationDefinition.class;
      AnnotationDefinition annotationDefinition0 = methodDefinition0.declareAnnotation(class0);
      assertNotNull(annotationDefinition0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Joiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[8];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      parameterArray0[2] = parameter0;
      parameterArray0[3] = parameter0;
      parameterArray0[4] = parameter0;
      parameterArray0[5] = parameter0;
      parameterArray0[6] = parameter0;
      parameterArray0[7] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "", (ParameterizedType) null, parameterArray0);
      AnnotationDefinition annotationDefinition0 = methodDefinition0.declareAnnotation((ParameterizedType) null);
      assertNotNull(annotationDefinition0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      Scope scope0 = methodDefinition0.getScope();
      assertNotNull(scope0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      String string0 = methodDefinition0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      doReturn((String) null).when(classDefinition0).toString();
      Parameter[] parameterArray0 = new Parameter[0];
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "Na_<w7y!?", parameterizedType0, parameterArray0);
      ClassDefinition classDefinition1 = methodDefinition0.getDeclaringClass();
      assertNull(classDefinition1.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.getThis();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Static methods do not have a 'this' variable
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[0];
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "Na_<w7y!?", parameterizedType0, parameterArray0);
      String string0 = methodDefinition0.getName();
      assertEquals("Na_<w7y!?", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("uNhjYfN9s7?,x").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, (String) null, (ParameterizedType) null, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.declareParameterAnnotation((Class<?>) null, 1423);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn("z*").when(parameterizedType0).getType();
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      String string0 = methodDefinition0.getMethodDescriptor();
      assertEquals("()z*", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("uNhjYfN9s7?,x").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, (String) null, (ParameterizedType) null, parameterArray0);
      EnumSet<Access> enumSet0 = methodDefinition0.getAccess();
      assertNull(enumSet0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn("uNhjYfN9s7?,x").when(parameter0).getName();
      parameterArray0[0] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, (String) null, (ParameterizedType) null, parameterArray0);
      // Undeclared exception!
      try { 
        methodDefinition0.declareParameterAnnotation((ParameterizedType) null, 1423);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index (1423) must be less than size (1)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      // Undeclared exception!
      try { 
        MethodDefinition.genericMethodSignature(parameterizedType0, parameterizedTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<AnnotationDefinition> class0 = AnnotationDefinition.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = classArray0[0];
      classArray0[3] = classArray0[2];
      classArray0[4] = class1;
      classArray0[5] = class1;
      classArray0[6] = classArray0[3];
      String string0 = MethodDefinition.methodDescription(class0, classArray0);
      assertEquals("(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/facebook/presto/bytecode/AnnotationDefinition;", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassDefinition classDefinition0 = mock(ClassDefinition.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(classDefinition0).isInterface();
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, (EnumSet<Access>) null, "z*", parameterizedType0, parameterArray0);
      List<AnnotationDefinition> list0 = methodDefinition0.getAnnotations();
      assertEquals(0, list0.size());
  }
}
