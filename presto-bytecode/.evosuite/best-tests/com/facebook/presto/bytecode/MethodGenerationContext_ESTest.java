/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:00:46 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.MethodDefinition;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Scope;
import com.facebook.presto.bytecode.Variable;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.util.ASMifier;
import org.objectweb.asm.util.CheckMethodAdapter;
import org.objectweb.asm.util.TraceMethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodGenerationContext_ESTest extends MethodGenerationContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MethodNode methodNode0 = new MethodNode();
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      Optional<ParameterizedType> optional0 = Optional.empty();
      PriorityQueue<Parameter> priorityQueue0 = new PriorityQueue<Parameter>();
      Scope scope0 = new Scope(optional0, priorityQueue0);
      Class<Parameter> class0 = Parameter.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      Variable variable0 = scope0.declareVariable(parameterizedType0, "label@");
      methodGenerationContext0.enterScope(scope0);
      int int0 = methodGenerationContext0.getVariableSlot(variable0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MethodNode methodNode0 = new MethodNode(2607, "_aU,yq75mIVFS&", "6o&Fwg", "_aU,yq75mIVFS&", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      // Undeclared exception!
      try { 
        methodGenerationContext0.enterScope((Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scope is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MethodNode methodNode0 = new MethodNode();
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      CheckMethodAdapter checkMethodAdapter0 = new CheckMethodAdapter(163, "scope has already been entered", "com.facebook.presto.bytecode.expression.NewInstanceBytecodeExpression", methodNode0, hashMap0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(checkMethodAdapter0);
      Optional<ParameterizedType> optional0 = Optional.ofNullable((ParameterizedType) null);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      Scope scope0 = new Scope(optional0, stack0);
      // Undeclared exception!
      try { 
        methodGenerationContext0.enterScope(scope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot visit instructions before visitCode has been called.
         //
         verifyException("org.objectweb.asm.util.CheckMethodAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MethodGenerationContext methodGenerationContext0 = null;
      try {
        methodGenerationContext0 = new MethodGenerationContext((MethodVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodVisitor is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASMifier aSMifier0 = new ASMifier();
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(aSMifier0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      ParameterizedType parameterizedType0 = new ParameterizedType("f 2lSMv*pA201\"-");
      Optional<ParameterizedType> optional0 = Optional.of(parameterizedType0);
      Access access0 = Access.NATIVE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[2];
      Class<Integer> class0 = Integer.class;
      Parameter parameter0 = Parameter.arg("methodVisitor is null", class0);
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "methodVisitor is null", parameterizedType0, parameterArray0);
      List<Parameter> list0 = methodDefinition0.getParameters();
      Scope scope0 = new Scope(optional0, list0);
      methodGenerationContext0.enterScope(scope0);
      int int0 = methodGenerationContext0.getVariableSlot(parameter0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MethodNode methodNode0 = new MethodNode();
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      boolean boolean0 = methodGenerationContext0.updateLineNumber(0);
      boolean boolean1 = methodGenerationContext0.updateLineNumber(0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "LC@";
      stringArray0[3] = "Signature";
      stringArray0[4] = ">G$:4Rf,)";
      stringArray0[5] = "Invalid ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(24, "Signature", "", "Invalid ", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodVisitor0);
      boolean boolean0 = methodGenerationContext0.updateLineNumber((-2639));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "LC@";
      stringArray0[3] = "Signature";
      stringArray0[4] = ">G$:4Rf,)";
      stringArray0[5] = "Invalid ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(24, "Signature", "", "Invalid ", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodVisitor0);
      Type type0 = Type.SHORT_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      Parameter parameter0 = new Parameter("", parameterizedType0);
      // Undeclared exception!
      try { 
        methodGenerationContext0.getVariableSlot(parameter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable '' has not been assigned a slot
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Signature";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Signature";
      stringArray0[4] = " {4>sjU+#9~5~EIZUt;";
      stringArray0[5] = "Invalid ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(24, "Signature", "", "Invalid ", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodVisitor0);
      Optional<ParameterizedType> optional0 = Optional.empty();
      ArrayList<Parameter> arrayList0 = new ArrayList<Parameter>();
      PriorityQueue<Parameter> priorityQueue0 = new PriorityQueue<Parameter>(arrayList0);
      Scope scope0 = new Scope(optional0, priorityQueue0);
      methodGenerationContext0.enterScope(scope0);
      Vector<Parameter> vector0 = new Vector<Parameter>(109, 0);
      Scope scope1 = new Scope(optional0, vector0);
      methodGenerationContext0.enterScope(scope1);
      methodGenerationContext0.exitScope(scope1);
      // Undeclared exception!
      try { 
        methodGenerationContext0.exitScope(scope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scope is not top of the stack
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodNode methodNode0 = new MethodNode();
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      Type type0 = Type.BOOLEAN_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      Optional<ParameterizedType> optional0 = Optional.of(parameterizedType0);
      Vector<Parameter> vector0 = new Vector<Parameter>(109, 0);
      Scope scope0 = new Scope(optional0, vector0);
      methodGenerationContext0.enterScope(scope0);
      methodGenerationContext0.exitScope(scope0);
      // Undeclared exception!
      try { 
        methodGenerationContext0.exitScope(scope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Scope is not top of the stack
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASMifier aSMifier0 = new ASMifier();
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(aSMifier0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      // Undeclared exception!
      try { 
        methodGenerationContext0.exitScope((Scope) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // scope has not been entered
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASMifier aSMifier0 = new ASMifier();
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(aSMifier0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      ParameterizedType parameterizedType0 = new ParameterizedType("f 2lSMv*pA201\"-");
      Optional<ParameterizedType> optional0 = Optional.of(parameterizedType0);
      Access access0 = Access.VARARGS;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[1];
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[2];
      Class<Integer> class0 = Integer.class;
      Parameter parameter0 = Parameter.arg("methodVisitor is null", class0);
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameter0;
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "methodVisitor is null", parameterizedType0, parameterArray0);
      List<Parameter> list0 = methodDefinition0.getParameters();
      Scope scope0 = new Scope(optional0, list0);
      methodGenerationContext0.enterScope(scope0);
      Scope scope1 = new Scope(optional0, list0);
      // Undeclared exception!
      try { 
        methodGenerationContext0.enterScope(scope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'this' variable must be in slot 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MethodNode methodNode0 = new MethodNode(1851, " 4.~NO)O@g@#p37bB;", "methodVisitor is null", "`Kf_", stringArray0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      Vector<Parameter> vector0 = new Vector<Parameter>();
      Class<Object> class0 = Object.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Optional<ParameterizedType> optional0 = Optional.of(parameterizedType0);
      Scope scope0 = new Scope(optional0, vector0);
      methodGenerationContext0.enterScope(scope0);
      // Undeclared exception!
      try { 
        methodGenerationContext0.enterScope(scope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // scope has already been entered
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
