/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 03:14:52 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.MethodDefinition;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Scope;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.expression.ArrayLengthBytecodeExpression;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.CastBytecodeExpression;
import com.facebook.presto.bytecode.expression.ConstantBytecodeExpression;
import com.facebook.presto.bytecode.expression.InvokeBytecodeExpression;
import com.facebook.presto.bytecode.expression.PopBytecodeExpression;
import com.facebook.presto.bytecode.expression.ReturnBytecodeExpression;
import com.facebook.presto.bytecode.expression.SetFieldBytecodeExpression;
import com.facebook.presto.bytecode.instruction.Constant;
import java.lang.reflect.Array;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CastBytecodeExpression_ESTest extends CastBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Access access0 = Access.VOLATILE;
      EnumSet<Access> enumSet0 = EnumSet.range(access0, access0);
      Class<Integer> class0 = Integer.TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[0];
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      HashSet<Parameter> hashSet0 = new HashSet<Parameter>();
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "", parameterizedType0, hashSet0);
      Scope scope0 = methodDefinition0.getScope();
      Class<Object> class1 = Object.class;
      Variable variable0 = scope0.createTempVariable(class1);
      CastBytecodeExpression castBytecodeExpression0 = new CastBytecodeExpression(variable0, parameterizedType0);
      String string0 = castBytecodeExpression0.formatOneLine();
      assertEquals("((int) temp_0)", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CastBytecodeExpression castBytecodeExpression0 = null;
      try {
        castBytecodeExpression0 = new CastBytecodeExpression((BytecodeExpression) null, (ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("java.lang.Long");
      Constant constant0 = Constant.loadBoxedFloat(8.552922F);
      ConstantBytecodeExpression constantBytecodeExpression0 = new ConstantBytecodeExpression(parameterizedType0, constant0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(constantBytecodeExpression0, parameterizedType0, "java.lang.Long", constantBytecodeExpression0, parameterizedType0);
      CastBytecodeExpression castBytecodeExpression0 = null;
      try {
        castBytecodeExpression0 = new CastBytecodeExpression(setFieldBytecodeExpression0, parameterizedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type V can not be cast to Ljava/lang/Long;
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("java.lang.Boolean");
      Constant.NullConstant constant_NullConstant0 = new Constant.NullConstant();
      ConstantBytecodeExpression constantBytecodeExpression0 = new ConstantBytecodeExpression(parameterizedType0, constant_NullConstant0);
      CastBytecodeExpression castBytecodeExpression0 = new CastBytecodeExpression(constantBytecodeExpression0, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("java.lang.Character");
      Variable variable0 = new Variable("java.lang.Character", parameterizedType0);
      CastBytecodeExpression castBytecodeExpression0 = new CastBytecodeExpression(variable0, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("java.lang.Float");
      Variable variable0 = new Variable("java.lang.Float", parameterizedType0);
      CastBytecodeExpression castBytecodeExpression0 = new CastBytecodeExpression(variable0, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("java.lang.Byte");
      Variable variable0 = new Variable("java.lang.Byte", parameterizedType0);
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromJavaClassName("");
      CastBytecodeExpression castBytecodeExpression0 = new CastBytecodeExpression(variable0, parameterizedType1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("java.lang.Double");
      Parameter parameter0 = Parameter.arg("java.lang.Double", parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(parameter0, parameterizedType0, "java.lang.Double", parameter0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(setFieldBytecodeExpression0);
      CastBytecodeExpression castBytecodeExpression0 = null;
      try {
        castBytecodeExpression0 = new CastBytecodeExpression(returnBytecodeExpression0, parameterizedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type V can not be cast to Ljava/lang/Double;
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<ArrayLengthBytecodeExpression> class0 = ArrayLengthBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("", class0);
      Class<Object> class1 = Object.class;
      Class<ReturnBytecodeExpression>[] classArray0 = (Class<ReturnBytecodeExpression>[]) Array.newInstance(Class.class, 3);
      Class<ReturnBytecodeExpression> class2 = ReturnBytecodeExpression.class;
      classArray0[0] = class2;
      classArray0[1] = class2;
      classArray0[2] = class2;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class1, classArray0);
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>();
      Vector<PopBytecodeExpression> vector0 = new Vector<PopBytecodeExpression>();
      InvokeBytecodeExpression invokeBytecodeExpression0 = InvokeBytecodeExpression.createInvoke(parameter0, "", parameterizedType0, priorityQueue0, vector0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(invokeBytecodeExpression0);
      CastBytecodeExpression castBytecodeExpression0 = new CastBytecodeExpression(returnBytecodeExpression0, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("java.lang.Byte");
      Variable variable0 = new Variable("java.lang.Byte", parameterizedType0);
      CastBytecodeExpression castBytecodeExpression0 = new CastBytecodeExpression(variable0, parameterizedType0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)castBytecodeExpression0.getBytecode((MethodGenerationContext) null);
      assertFalse(bytecodeBlock0.isEmpty());
  }
}
