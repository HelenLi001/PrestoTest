/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:01:32 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.Comment;
import com.facebook.presto.bytecode.FieldDefinition;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.OpCode;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.StaticTypeBytecodeExpression;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.GetFieldBytecodeExpression;
import com.facebook.presto.bytecode.expression.PopBytecodeExpression;
import java.lang.reflect.Field;
import java.util.EnumSet;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.util.CheckMethodAdapter;
import org.objectweb.asm.util.Textifier;
import org.objectweb.asm.util.TraceMethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GetFieldBytecodeExpression_ESTest extends GetFieldBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      Class<Comment> class0 = Comment.class;
      Vector<Class<StaticTypeBytecodeExpression>> vector0 = new Vector<Class<StaticTypeBytecodeExpression>>();
      BytecodeExpression[] bytecodeExpressionArray0 = new BytecodeExpression[6];
      bytecodeExpressionArray0[0] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[1] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[2] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[3] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[4] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[5] = (BytecodeExpression) parameter0;
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("", (Class<?>) class0, (Iterable<? extends Class<?>>) vector0, bytecodeExpressionArray0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(bytecodeExpression0, parameterizedType0, "", parameterizedType0);
      Textifier textifier0 = new Textifier();
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(textifier0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      // Undeclared exception!
      try { 
        getFieldBytecodeExpression0.getBytecode(methodGenerationContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Parameter parameter0 = Parameter.arg(".visitEnd();\n", class0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(parameter0, (Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      Class<String> class0 = String.class;
      PopBytecodeExpression popBytecodeExpression0 = new PopBytecodeExpression(parameter0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(popBytecodeExpression0, class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Parameter parameter0 = Parameter.arg("}0\"T9MJLB*hkQ", parameterizedType0);
      BytecodeExpression[] bytecodeExpressionArray0 = new BytecodeExpression[3];
      bytecodeExpressionArray0[0] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[1] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[2] = (BytecodeExpression) parameter0;
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("}0\"T9MJLB*hkQ", class0, bytecodeExpressionArray0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(bytecodeExpression0, parameterizedType0, (String) null, parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression((BytecodeExpression) null, (FieldDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Access access0 = Access.ANNOTATION;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      Class<FieldDefinition> class0 = FieldDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      Parameter parameter0 = Parameter.arg("", parameterizedTypeArray0[1]);
      FieldDefinition fieldDefinition0 = classDefinition0.declareField(enumSet0, "", parameterizedTypeArray0[0]);
      BytecodeExpression bytecodeExpression0 = parameter0.getField(fieldDefinition0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(bytecodeExpression0, parameterizedType0, "field is null", parameterizedTypeArray0[1]);
      assertFalse(getFieldBytecodeExpression0.equals((Object)bytecodeExpression0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = new GetFieldBytecodeExpression((BytecodeExpression) null, parameterizedType0, "Lcom/facebook/presto/bytecode/StaticTypeBytecodeExpression;", parameterizedType0);
      List<BytecodeNode> list0 = getFieldBytecodeExpression0.getChildNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Access access0 = Access.STRICT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      Class<FieldDefinition> class0 = FieldDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      FieldDefinition fieldDefinition0 = classDefinition0.declareField(enumSet0, "", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.getField(fieldDefinition0);
      List<BytecodeNode> list0 = ((GetFieldBytecodeExpression) bytecodeExpression0).getChildNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = new GetFieldBytecodeExpression((BytecodeExpression) null, parameterizedType0, "Lcom/facebook/presto/bytecode/StaticTypeBytecodeExpression;", parameterizedType0);
      String string0 = getFieldBytecodeExpression0.formatOneLine();
      assertEquals("StaticTypeBytecodeExpression.Lcom/facebook/presto/bytecode/StaticTypeBytecodeExpression;", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = new GetFieldBytecodeExpression((BytecodeExpression) null, parameterizedType0, "Lcom/facebook/presto/bytecode/StaticTypeBytecodeExpression;", parameterizedType0);
      CheckMethodAdapter checkMethodAdapter0 = new CheckMethodAdapter((MethodVisitor) null);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(checkMethodAdapter0);
      BytecodeNode bytecodeNode0 = getFieldBytecodeExpression0.getBytecode(methodGenerationContext0);
      assertNotNull(bytecodeNode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Parameter parameter0 = Parameter.arg("", class0);
      ParameterizedType parameterizedType0 = parameter0.getType();
      BytecodeExpression bytecodeExpression0 = parameter0.cast(parameterizedType0);
      Access access0 = Access.INTERFACE;
      EnumSet<Access> enumSet0 = EnumSet.of(access0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[3];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = classDefinition0.declareField(enumSet0, "", parameterizedType0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(bytecodeExpression0, fieldDefinition0);
      Textifier textifier0 = new Textifier();
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(textifier0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)getFieldBytecodeExpression0.getBytecode(methodGenerationContext0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<OpCode> class0 = OpCode.class;
      Parameter parameter0 = Parameter.arg("tRw~zD8#TyS8:X!K{", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.pop();
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(bytecodeExpression0, (ParameterizedType) null, "tRw~zD8#TyS8:X!K{", parameterizedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type Lcom/facebook/presto/bytecode/OpCode; does not have fields
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Access> class0 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.allOf(class0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[8];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      parameterizedTypeArray0[7] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "declaringClass is null", class0);
      Class<Object> class1 = Object.class;
      Parameter parameter0 = Parameter.arg("", class1);
      BytecodeExpression bytecodeExpression0 = parameter0.getField(parameterizedType0, "strictfp ", parameterizedType0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression(bytecodeExpression0, fieldDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field is static: FieldDefinition{access=[public, private, protected, static, final, super, synchronized, volatile, bridge, varargs, transient, native, interface, abstract, strict, synthetic, annotation, enum], name='declaringClass is null', type=Lcom/facebook/presto/bytecode/Access;}
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Class<Access> class1 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.noneOf(class1);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "Lcom/facebook/presto/bytecode/StaticTypeBytecodeExpression;", class0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression((BytecodeExpression) null, fieldDefinition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field is not static: FieldDefinition{access=[], name='Lcom/facebook/presto/bytecode/StaticTypeBytecodeExpression;', type=Lcom/facebook/presto/bytecode/StaticTypeBytecodeExpression;}
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Access access0 = Access.STRICT;
      EnumSet<Access> enumSet0 = EnumSet.of(access0, access0, access0, access0, access0);
      Class<FieldDefinition> class0 = FieldDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[2];
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[0] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "", parameterizedType0, parameterizedTypeArray0);
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      FieldDefinition fieldDefinition0 = classDefinition0.declareField(enumSet0, "", parameterizedType0);
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = (GetFieldBytecodeExpression)parameter0.getField(fieldDefinition0);
      String string0 = getFieldBytecodeExpression0.formatOneLine();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GetFieldBytecodeExpression getFieldBytecodeExpression0 = null;
      try {
        getFieldBytecodeExpression0 = new GetFieldBytecodeExpression((BytecodeExpression) null, class0, "Type %s does not have fields");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer does not have a 'Type %s does not have fields' field
         //
         verifyException("com.facebook.presto.bytecode.expression.GetFieldBytecodeExpression", e);
      }
  }
}
