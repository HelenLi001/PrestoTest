/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:02:34 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.AnnotationDefinition;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.OpCode;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.expression.ArrayLengthBytecodeExpression;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.CastBytecodeExpression;
import com.facebook.presto.bytecode.expression.GetElementBytecodeExpression;
import com.facebook.presto.bytecode.expression.InlineIfBytecodeExpression;
import com.facebook.presto.bytecode.expression.InvokeBytecodeExpression;
import com.facebook.presto.bytecode.expression.PopBytecodeExpression;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ServiceLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.objectweb.asm.util.Printer;
import org.objectweb.asm.util.TraceMethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InvokeBytecodeExpression_ESTest extends InvokeBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<OpCode> class0 = OpCode.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Parameter parameter0 = Parameter.arg("&:]1*~n4OyVT}nsi=", parameterizedType0);
      Class<String> class1 = String.class;
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class1);
      Class<PopBytecodeExpression> class2 = PopBytecodeExpression.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<PopBytecodeExpression> serviceLoader0 = ServiceLoader.load(class2, classLoader0);
      // Undeclared exception!
      try { 
        InvokeBytecodeExpression.createInvoke(bytecodeExpression0, "&:]1*~n4OyVT}nsi=", parameterizedType0, (Iterable<ParameterizedType>) null, serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parameterTypes is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "p}256r>OVsOv>Uh";
      String string1 = "r6xB }\\0D";
      ParameterizedType parameterizedType0 = new ParameterizedType("r6xB }\u0000D");
      Variable variable0 = new Variable("p}256r>OVsOv>Uh", parameterizedType0);
      Iterator<ParameterizedType> iterator0 = (Iterator<ParameterizedType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn(parameterizedType0).when(iterator0).next();
      Iterable<ParameterizedType> iterable0 = (Iterable<ParameterizedType>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      Class<GetElementBytecodeExpression> class0 = GetElementBytecodeExpression.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<GetElementBytecodeExpression> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      InvokeBytecodeExpression invokeBytecodeExpression0 = new InvokeBytecodeExpression(variable0, parameterizedType0, "p}256r>OVsOv>Uh", parameterizedType0, iterable0, serviceLoader0);
      invokeBytecodeExpression0.getField(parameterizedType0, string0, parameterizedType0);
      Printer printer0 = null;
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(printer0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      String string2 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        invokeBytecodeExpression0.getBytecode(methodGenerationContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: p}256r>OVsOv>Uh
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterizedType parameterizedType0 = new ParameterizedType("p}256r>OVsOv>Uh");
      Variable variable0 = new Variable("p}256r>OVsOv>Uh", parameterizedType0);
      Iterator<ParameterizedType> iterator0 = (Iterator<ParameterizedType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Iterable<ParameterizedType> iterable0 = (Iterable<ParameterizedType>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      Class<GetElementBytecodeExpression> class0 = GetElementBytecodeExpression.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<GetElementBytecodeExpression> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      InvokeBytecodeExpression invokeBytecodeExpression0 = null;
      try {
        invokeBytecodeExpression0 = new InvokeBytecodeExpression(variable0, parameterizedType0, "p}256r>OVsOv>Uh", parameterizedType0, iterable0, serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterizedType parameterizedType0 = new ParameterizedType(">");
      Parameter parameter0 = Parameter.arg(">", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.ret();
      Iterable<ParameterizedType> iterable0 = (Iterable<ParameterizedType>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      Iterable<ArrayLengthBytecodeExpression> iterable1 = (Iterable<ArrayLengthBytecodeExpression>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      InvokeBytecodeExpression invokeBytecodeExpression0 = null;
      try {
        invokeBytecodeExpression0 = new InvokeBytecodeExpression(bytecodeExpression0, parameterizedType0, ">", parameterizedType0, iterable0, iterable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type L>; does not have methods
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Parameter parameter0 = Parameter.arg("x0!y", class0);
      BytecodeExpression[] bytecodeExpressionArray0 = new BytecodeExpression[0];
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("", class0, bytecodeExpressionArray0);
      List<BytecodeNode> list0 = ((InvokeBytecodeExpression) bytecodeExpression0).getChildNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParameterizedType parameterizedType0 = new ParameterizedType("r6xB }\u0000D");
      Variable variable0 = new Variable("p}256r>OVsOv>Uh", parameterizedType0);
      Iterator<ParameterizedType> iterator0 = (Iterator<ParameterizedType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Iterable<ParameterizedType> iterable0 = (Iterable<ParameterizedType>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      Class<GetElementBytecodeExpression> class0 = GetElementBytecodeExpression.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<GetElementBytecodeExpression> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      InvokeBytecodeExpression invokeBytecodeExpression0 = new InvokeBytecodeExpression(variable0, parameterizedType0, "p}256r>OVsOv>Uh", parameterizedType0, iterable0, serviceLoader0);
      String string0 = invokeBytecodeExpression0.formatOneLine();
      assertEquals("p}256r>OVsOv>Uh.p}256r>OVsOv>Uh()", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      Iterable<ParameterizedType> iterable0 = (Iterable<ParameterizedType>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(iterable0).iterator();
      Iterable<CastBytecodeExpression> iterable1 = (Iterable<CastBytecodeExpression>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      InvokeBytecodeExpression invokeBytecodeExpression0 = null;
      try {
        invokeBytecodeExpression0 = new InvokeBytecodeExpression((BytecodeExpression) null, parameterizedType0, "", parameterizedType0, iterable0, iterable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<String> class0 = String.class;
      AnnotationDefinition annotationDefinition0 = new AnnotationDefinition(class0);
      ParameterizedType parameterizedType0 = annotationDefinition0.getType();
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      Class<ArrayLengthBytecodeExpression> class1 = ArrayLengthBytecodeExpression.class;
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class1);
      Iterable<ParameterizedType> iterable0 = (Iterable<ParameterizedType>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      HashSet<InlineIfBytecodeExpression> hashSet0 = new HashSet<InlineIfBytecodeExpression>();
      // Undeclared exception!
      try { 
        InvokeBytecodeExpression.createInvoke(bytecodeExpression0, "", parameterizedType0, iterable0, hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type Ljava/lang/String; does not have methods
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
