/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:03:25 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.GetElementBytecodeExpression;
import com.facebook.presto.bytecode.expression.InlineIfBytecodeExpression;
import com.facebook.presto.bytecode.expression.InstanceOfBytecodeExpression;
import com.facebook.presto.bytecode.expression.NegateBytecodeExpression;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NegateBytecodeExpression_ESTest extends NegateBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BytecodeExpression bytecodeExpression0 = mock(BytecodeExpression.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterizedType) null).when(bytecodeExpression0).getType();
      NegateBytecodeExpression negateBytecodeExpression0 = null;
      try {
        negateBytecodeExpression0 = new NegateBytecodeExpression(bytecodeExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<InlineIfBytecodeExpression> class0 = InlineIfBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class0);
      NegateBytecodeExpression negateBytecodeExpression0 = null;
      try {
        negateBytecodeExpression0 = new NegateBytecodeExpression(bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value argument must be int, long, float, or double, but is boolean
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<GetElementBytecodeExpression> class0 = GetElementBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("AOGYY1", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.ret();
      NegateBytecodeExpression negateBytecodeExpression0 = null;
      try {
        negateBytecodeExpression0 = new NegateBytecodeExpression(bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is void
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<InstanceOfBytecodeExpression> class0 = InstanceOfBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("org.objectweb.asm.Label", class0);
      NegateBytecodeExpression negateBytecodeExpression0 = null;
      try {
        negateBytecodeExpression0 = new NegateBytecodeExpression(parameter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value is not a primitive
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<ParameterizedType> class0 = ParameterizedType.class;
      Parameter parameter0 = Parameter.arg("G=*Z]nkBUJR", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      NegateBytecodeExpression negateBytecodeExpression0 = new NegateBytecodeExpression(bytecodeExpression0);
      String string0 = negateBytecodeExpression0.formatOneLine();
      assertEquals("-(G=*Z]nkBUJR.length)", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<ParameterizedType> class0 = ParameterizedType.class;
      Parameter parameter0 = Parameter.arg("G=*Z]nkBUJR", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      NegateBytecodeExpression negateBytecodeExpression0 = new NegateBytecodeExpression(bytecodeExpression0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)negateBytecodeExpression0.getBytecode((MethodGenerationContext) null);
      assertNull(bytecodeBlock0.getDescription());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<ParameterizedType> class0 = ParameterizedType.class;
      Parameter parameter0 = Parameter.arg("G=*Z]nkBUJR", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      NegateBytecodeExpression negateBytecodeExpression0 = new NegateBytecodeExpression(bytecodeExpression0);
      List<BytecodeNode> list0 = negateBytecodeExpression0.getChildNodes();
      assertFalse(list0.isEmpty());
  }
}
