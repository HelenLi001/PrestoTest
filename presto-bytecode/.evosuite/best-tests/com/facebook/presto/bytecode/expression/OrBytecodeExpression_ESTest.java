/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 03:50:01 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression;
import com.facebook.presto.bytecode.expression.ConstantBytecodeExpression;
import com.facebook.presto.bytecode.expression.GetElementBytecodeExpression;
import com.facebook.presto.bytecode.expression.OrBytecodeExpression;
import com.facebook.presto.bytecode.instruction.Constant;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrBytecodeExpression_ESTest extends OrBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OrBytecodeExpression orBytecodeExpression0 = null;
      try {
        orBytecodeExpression0 = new OrBytecodeExpression((BytecodeExpression) null, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // left is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      Parameter parameter0 = Parameter.arg("m", class0);
      Type type0 = Type.getMethodType("");
      ParameterizedType parameterizedType0 = ParameterizedType.type(type0);
      BytecodeExpression bytecodeExpression0 = parameter0.getField(parameterizedType0, "VISIT_JUMP_INSN", parameterizedType0);
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.notEqual(bytecodeExpression0, bytecodeExpression0);
      OrBytecodeExpression orBytecodeExpression0 = null;
      try {
        orBytecodeExpression0 = new OrBytecodeExpression(bytecodeExpression1, bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected right to be type boolean but is L;
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<GetElementBytecodeExpression> class0 = GetElementBytecodeExpression.class;
      Constant constant0 = Constant.loadBoxedInt(1577);
      ConstantBytecodeExpression constantBytecodeExpression0 = new ConstantBytecodeExpression(class0, constant0);
      OrBytecodeExpression orBytecodeExpression0 = null;
      try {
        orBytecodeExpression0 = new OrBytecodeExpression(constantBytecodeExpression0, constantBytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected left to be type boolean but is Lcom/facebook/presto/bytecode/expression/GetElementBytecodeExpression;
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      Class<Object> class0 = Object.class;
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class0);
      OrBytecodeExpression orBytecodeExpression0 = new OrBytecodeExpression(bytecodeExpression0, bytecodeExpression0);
      String string0 = orBytecodeExpression0.formatOneLine();
      assertEquals("( instanceof class java.lang.Object ||  instanceof class java.lang.Object)", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      Class<Object> class0 = Object.class;
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class0);
      OrBytecodeExpression orBytecodeExpression0 = new OrBytecodeExpression(bytecodeExpression0, bytecodeExpression0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)orBytecodeExpression0.getBytecode((MethodGenerationContext) null);
      assertNull(bytecodeBlock0.getDescription());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      Class<Object> class0 = Object.class;
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class0);
      OrBytecodeExpression orBytecodeExpression0 = new OrBytecodeExpression(bytecodeExpression0, bytecodeExpression0);
      List<BytecodeNode> list0 = orBytecodeExpression0.getChildNodes();
      assertFalse(list0.isEmpty());
  }
}
