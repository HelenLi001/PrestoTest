/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:01:11 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.Comment;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.expression.AndBytecodeExpression;
import com.facebook.presto.bytecode.expression.ArithmeticBytecodeExpression;
import com.facebook.presto.bytecode.expression.ArrayLengthBytecodeExpression;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression;
import com.facebook.presto.bytecode.expression.ConstantBytecodeExpression;
import com.facebook.presto.bytecode.expression.InvokeBytecodeExpression;
import com.facebook.presto.bytecode.expression.NewInstanceBytecodeExpression;
import com.facebook.presto.bytecode.expression.OrBytecodeExpression;
import com.facebook.presto.bytecode.expression.PopBytecodeExpression;
import com.facebook.presto.bytecode.expression.ReturnBytecodeExpression;
import com.facebook.presto.bytecode.instruction.Constant;
import java.lang.reflect.Array;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ServiceLoader;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.util.Textifier;
import org.objectweb.asm.util.TraceMethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReturnBytecodeExpression_ESTest extends ReturnBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(parameter0);
      String string0 = returnBytecodeExpression0.formatOneLine();
      assertEquals("return ", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<InvokeBytecodeExpression> class0 = InvokeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("", class0);
      Class<ArithmeticBytecodeExpression> class1 = ArithmeticBytecodeExpression.class;
      Class<AndBytecodeExpression>[] classArray0 = (Class<AndBytecodeExpression>[]) Array.newInstance(Class.class, 5);
      Class<AndBytecodeExpression> class2 = AndBytecodeExpression.class;
      classArray0[0] = class2;
      classArray0[1] = classArray0[0];
      classArray0[2] = class2;
      classArray0[3] = class2;
      classArray0[4] = classArray0[0];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class1, classArray0);
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>();
      Class<OrBytecodeExpression> class3 = OrBytecodeExpression.class;
      ServiceLoader<OrBytecodeExpression> serviceLoader0 = ServiceLoader.loadInstalled(class3);
      InvokeBytecodeExpression invokeBytecodeExpression0 = InvokeBytecodeExpression.createInvoke(parameter0, "", parameterizedType0, linkedHashSet0, serviceLoader0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(invokeBytecodeExpression0);
      Textifier textifier0 = new Textifier();
      TraceMethodVisitor traceMethodVisitor0 = new TraceMethodVisitor(textifier0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(traceMethodVisitor0);
      // Undeclared exception!
      try { 
        returnBytecodeExpression0.getBytecode(methodGenerationContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Comment> class0 = Comment.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      HashSet<ParameterizedType> hashSet0 = new HashSet<ParameterizedType>();
      Vector<AndBytecodeExpression> vector0 = new Vector<AndBytecodeExpression>();
      NewInstanceBytecodeExpression newInstanceBytecodeExpression0 = new NewInstanceBytecodeExpression(parameterizedType0, hashSet0, vector0);
      ArrayLengthBytecodeExpression arrayLengthBytecodeExpression0 = new ArrayLengthBytecodeExpression(newInstanceBytecodeExpression0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(arrayLengthBytecodeExpression0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(parameter0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)returnBytecodeExpression0.getBytecode((MethodGenerationContext) null);
      assertNull(bytecodeBlock0.getDescription());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("5H0x{kscO[J");
      Parameter parameter0 = Parameter.arg("5H0x{kscO[J", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = ComparisonBytecodeExpression.equal(parameter0, parameter0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(bytecodeExpression0);
      List<BytecodeNode> list0 = returnBytecodeExpression0.getChildNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Variable> class0 = Variable.class;
      ConstantBytecodeExpression constantBytecodeExpression0 = new ConstantBytecodeExpression(class0, (Constant) null);
      BytecodeExpression bytecodeExpression0 = ComparisonBytecodeExpression.equal(constantBytecodeExpression0, constantBytecodeExpression0);
      PopBytecodeExpression popBytecodeExpression0 = new PopBytecodeExpression(bytecodeExpression0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(popBytecodeExpression0);
      // Undeclared exception!
      try { 
        returnBytecodeExpression0.formatOneLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.expression.ConstantBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ReturnBytecodeExpression returnBytecodeExpression0 = null;
      try {
        returnBytecodeExpression0 = new ReturnBytecodeExpression((BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instance is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
