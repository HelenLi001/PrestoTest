/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:01:21 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.Access;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.FieldDefinition;
import com.facebook.presto.bytecode.MethodDefinition;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.OpCode;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Scope;
import com.facebook.presto.bytecode.StaticTypeBytecodeExpression;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.CastBytecodeExpression;
import com.facebook.presto.bytecode.expression.ConstantBytecodeExpression;
import com.facebook.presto.bytecode.expression.InlineIfBytecodeExpression;
import com.facebook.presto.bytecode.expression.InstanceOfBytecodeExpression;
import com.facebook.presto.bytecode.expression.InvokeBytecodeExpression;
import com.facebook.presto.bytecode.expression.NewInstanceBytecodeExpression;
import com.facebook.presto.bytecode.expression.PopBytecodeExpression;
import com.facebook.presto.bytecode.expression.SetFieldBytecodeExpression;
import com.facebook.presto.bytecode.instruction.Constant;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.objectweb.asm.Label;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.util.CheckMethodAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SetFieldBytecodeExpression_ESTest extends SetFieldBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<FieldDefinition> class0 = FieldDefinition.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      Parameter parameter0 = Parameter.arg("10", parameterizedType0);
      BytecodeExpression[] bytecodeExpressionArray0 = new BytecodeExpression[7];
      bytecodeExpressionArray0[0] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[1] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[2] = (BytecodeExpression) parameter0;
      LinkedList<ParameterizedType> linkedList0 = new LinkedList<ParameterizedType>();
      HashSet<ParameterizedType> hashSet0 = new HashSet<ParameterizedType>(linkedList0);
      HashSet<CastBytecodeExpression> hashSet1 = new HashSet<CastBytecodeExpression>();
      InvokeBytecodeExpression invokeBytecodeExpression0 = new InvokeBytecodeExpression(bytecodeExpressionArray0[2], parameterizedType0, "10", parameterizedType0, hashSet0, hashSet1);
      bytecodeExpressionArray0[3] = (BytecodeExpression) invokeBytecodeExpression0;
      bytecodeExpressionArray0[4] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[5] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[6] = (BytecodeExpression) parameter0;
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("<}eBln^3_-+Zxpd", class0, bytecodeExpressionArray0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(bytecodeExpression0, parameterizedType0, ">oA&*(", parameter0);
      MethodNode methodNode0 = new MethodNode(1166, "", ">oA&*(", "10.<}eBln^3_-+Zxpd(com.facebook.presto.bytecode.Parameter@0000000002, com.facebook.presto.bytecode.Parameter@0000000002, com.facebook.presto.bytecode.Parameter@0000000002, com.facebook.presto.bytecode.expression.InvokeBytecodeExpression@0000000003, com.facebook.presto.bytecode.Parameter@0000000002, com.facebook.presto.bytecode.Parameter@0000000002, com.facebook.presto.bytecode.Parameter@0000000002).>oA&*( = 10", (String[]) null);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      // Undeclared exception!
      try { 
        setFieldBytecodeExpression0.getBytecode(methodGenerationContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid name: <}eBln^3_-+Zxpd
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<InstanceOfBytecodeExpression> class0 = InstanceOfBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.ret();
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(bytecodeExpression0, (Field) null, parameter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<InstanceOfBytecodeExpression> class0 = InstanceOfBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.getField("", class0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(bytecodeExpression0, class0, (String) null, bytecodeExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Access access0 = Access.PUBLIC;
      EnumSet<Access> enumSet0 = EnumSet.range(access0, access0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("l7;@/\";rf{os.");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = classDefinition0.declareField(enumSet0, "", parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression((BytecodeExpression) null, fieldDefinition0, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<StaticTypeBytecodeExpression> class0 = StaticTypeBytecodeExpression.class;
      Parameter parameter0 = Parameter.arg("", class0);
      Class<FieldDefinition>[] classArray0 = (Class<FieldDefinition>[]) Array.newInstance(Class.class, 6);
      Class<FieldDefinition> class1 = FieldDefinition.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = class1;
      classArray0[3] = class1;
      classArray0[4] = classArray0[2];
      classArray0[5] = classArray0[0];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      Stack<ConstantBytecodeExpression> stack0 = new Stack<ConstantBytecodeExpression>();
      ArrayDeque<ConstantBytecodeExpression> arrayDeque0 = new ArrayDeque<ConstantBytecodeExpression>(stack0);
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("", parameterizedType0, (Iterable<? extends BytecodeExpression>) arrayDeque0);
      PopBytecodeExpression popBytecodeExpression0 = new PopBytecodeExpression(bytecodeExpression0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(popBytecodeExpression0, parameterizedType0, "", bytecodeExpression0, parameterizedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type V does not have fields
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<OpCode> class0 = OpCode.class;
      Parameter parameter0 = Parameter.arg("yY j", class0);
      Class<String> class1 = String.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class1);
      BytecodeExpression bytecodeExpression0 = parameter0.getField(parameterizedType0, "yY j", parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(bytecodeExpression0, parameterizedType0, "yY j", parameter0, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterizedType parameterizedType0 = new ParameterizedType("field is null");
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression((BytecodeExpression) null, parameterizedType0, "dw[dRwAdm6", (BytecodeExpression) null, parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(comparator0);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      NewInstanceBytecodeExpression newInstanceBytecodeExpression0 = new NewInstanceBytecodeExpression(parameterizedType0, priorityQueue0, stack0);
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(newInstanceBytecodeExpression0, parameterizedType0, "", parameter0);
      List<BytecodeNode> list0 = setFieldBytecodeExpression0.getChildNodes();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("Nr?[o_gxC");
      Parameter parameter0 = Parameter.arg(".", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.cast(parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression((BytecodeExpression) null, parameterizedType0, "Nr?[o_gxC", bytecodeExpression0);
      List<BytecodeNode> list0 = setFieldBytecodeExpression0.getChildNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<InlineIfBytecodeExpression> class0 = InlineIfBytecodeExpression.class;
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("++");
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = Parameter.arg("", class0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(parameterArray0[0], parameterizedType0, "", parameter0);
      String string0 = setFieldBytecodeExpression0.formatOneLine();
      assertEquals("++. = ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<InlineIfBytecodeExpression> class0 = InlineIfBytecodeExpression.class;
      ParameterizedType parameterizedType0 = new ParameterizedType("+0");
      Parameter parameter0 = Parameter.arg("invalid name: %s", class0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(parameter0, parameterizedType0, "invalid name: %s", parameter0);
      String string0 = setFieldBytecodeExpression0.formatOneLine();
      assertEquals("invalid name: %s.invalid name: %s = invalid name: %s", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("Nr?[o_gxC");
      Parameter parameter0 = Parameter.arg(".", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.cast(parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression((BytecodeExpression) null, parameterizedType0, "Nr?[o_gxC", bytecodeExpression0);
      MethodNode methodNode0 = new MethodNode();
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)setFieldBytecodeExpression0.getBytecode(methodGenerationContext0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(comparator0);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      NewInstanceBytecodeExpression newInstanceBytecodeExpression0 = new NewInstanceBytecodeExpression(parameterizedType0, priorityQueue0, stack0);
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(newInstanceBytecodeExpression0, parameterizedType0, "", parameter0);
      MethodNode methodNode0 = new MethodNode(1012, (String) null, "&Y,:d", "ACC_PRIVATE", (String[]) null);
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      CheckMethodAdapter checkMethodAdapter0 = new CheckMethodAdapter(1012, "", "ACC_PRIVATE", methodNode0, hashMap0);
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(checkMethodAdapter0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)setFieldBytecodeExpression0.getBytecode(methodGenerationContext0);
      assertFalse(bytecodeBlock0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<FieldDefinition> class0 = FieldDefinition.class;
      Parameter parameter0 = Parameter.arg("zw{7.~(5'9PF", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.ret();
      ParameterizedType parameterizedType0 = new ParameterizedType("tz6^|k#f=)4O4pA");
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(bytecodeExpression0, parameterizedType0, (String) null, parameter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type V does not have fields
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<InlineIfBytecodeExpression> class0 = InlineIfBytecodeExpression.class;
      Constant constant0 = Constant.loadBoolean(true);
      ConstantBytecodeExpression constantBytecodeExpression0 = new ConstantBytecodeExpression(class0, constant0);
      Class<Access> class1 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.noneOf(class1);
      ParameterizedType parameterizedType0 = new ParameterizedType("+0");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "+0", parameterizedType0, parameterizedTypeArray0);
      Parameter parameter0 = Parameter.arg("invalid name: %s", class0);
      MethodDefinition methodDefinition0 = classDefinition0.getClassInitializer();
      EnumSet<Access> enumSet1 = methodDefinition0.getAccess();
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet1, "+0", parameterizedType0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(constantBytecodeExpression0, fieldDefinition0, parameter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field is static: FieldDefinition{access=[com.facebook.presto.bytecode.Access@0000000023], name='+0', type=L+0;}
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<InlineIfBytecodeExpression> class0 = InlineIfBytecodeExpression.class;
      Constant constant0 = Constant.loadBoolean(true);
      ConstantBytecodeExpression constantBytecodeExpression0 = new ConstantBytecodeExpression(class0, constant0);
      Class<Access> class1 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.noneOf(class1);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("++");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "++", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "++", class1);
      Parameter[] parameterArray0 = new Parameter[1];
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(parameterArray0[0], fieldDefinition0, constantBytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field is not static: FieldDefinition{access=[], name='++', type=Lcom/facebook/presto/bytecode/Access;}
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<InlineIfBytecodeExpression> class0 = InlineIfBytecodeExpression.class;
      Constant constant0 = Constant.loadBoolean(true);
      ConstantBytecodeExpression constantBytecodeExpression0 = new ConstantBytecodeExpression(class0, constant0);
      Class<Access> class1 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.noneOf(class1);
      ParameterizedType parameterizedType0 = new ParameterizedType("+0");
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, "+0", parameterizedType0, parameterizedTypeArray0);
      FieldDefinition fieldDefinition0 = new FieldDefinition(classDefinition0, enumSet0, "+0", class1);
      Parameter parameter0 = Parameter.arg("invalid name: %s", class0);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(parameter0, fieldDefinition0, constantBytecodeExpression0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<InlineIfBytecodeExpression> class0 = InlineIfBytecodeExpression.class;
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression((BytecodeExpression) null, class0, "]q~[PCGe", (BytecodeExpression) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.facebook.presto.bytecode.expression.InlineIfBytecodeExpression does not have a ']q~[PCGe' field
         //
         verifyException("com.facebook.presto.bytecode.expression.SetFieldBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Access> class0 = Access.class;
      EnumSet<Access> enumSet0 = EnumSet.allOf(class0);
      Class<BytecodeBlock>[] classArray0 = (Class<BytecodeBlock>[]) Array.newInstance(Class.class, 3);
      Class<BytecodeBlock> class1 = BytecodeBlock.class;
      classArray0[0] = class1;
      classArray0[1] = classArray0[0];
      classArray0[2] = classArray0[1];
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      ParameterizedType[] parameterizedTypeArray0 = new ParameterizedType[7];
      parameterizedTypeArray0[0] = parameterizedType0;
      parameterizedTypeArray0[1] = parameterizedType0;
      parameterizedTypeArray0[2] = parameterizedType0;
      parameterizedTypeArray0[3] = parameterizedType0;
      parameterizedTypeArray0[4] = parameterizedType0;
      parameterizedTypeArray0[5] = parameterizedType0;
      parameterizedTypeArray0[6] = parameterizedType0;
      ClassDefinition classDefinition0 = new ClassDefinition(enumSet0, parameterizedType0, parameterizedType0, parameterizedTypeArray0);
      Parameter[] parameterArray0 = new Parameter[0];
      MethodDefinition methodDefinition0 = new MethodDefinition(classDefinition0, enumSet0, "", parameterizedType0, parameterArray0);
      Scope scope0 = methodDefinition0.getScope();
      Variable variable0 = scope0.createTempVariable(class1);
      SetFieldBytecodeExpression setFieldBytecodeExpression0 = null;
      try {
        setFieldBytecodeExpression0 = new SetFieldBytecodeExpression(variable0, parameterizedType0, "", (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.expression.SetFieldBytecodeExpression", e);
      }
  }
}
