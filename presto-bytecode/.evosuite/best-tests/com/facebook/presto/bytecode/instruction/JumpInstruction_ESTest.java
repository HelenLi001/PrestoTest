/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:10:32 GMT 2021
 */

package com.facebook.presto.bytecode.instruction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.BytecodeVisitor;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.OpCode;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.instruction.InstructionNode;
import com.facebook.presto.bytecode.instruction.JumpInstruction;
import com.facebook.presto.bytecode.instruction.LabelNode;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JumpInstruction_ESTest extends JumpInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpCode opCode0 = OpCode.FLOAD_3;
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      doReturn((Label) null).when(labelNode0).getLabel();
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode0, labelNode0);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      MethodGenerationContext methodGenerationContext0 = mock(MethodGenerationContext.class, new ViolatedAssumptionAnswer());
      jumpInstruction0.accept(methodVisitor0, methodGenerationContext0);
      assertEquals(OpCode.FLOAD_3, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpCode opCode0 = OpCode.NOP;
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode0, labelNode0);
      OpCode opCode1 = jumpInstruction0.getOpCode();
      assertSame(opCode1, opCode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfNotEqualZero((LabelNode) null);
      LabelNode labelNode0 = jumpInstruction0.getLabel();
      assertNull(labelNode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpCode opCode0 = OpCode.INVOKESPECIAL;
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      JumpInstruction jumpInstruction0 = new JumpInstruction(opCode0, labelNode0);
      BytecodeVisitor<BytecodeBlock> bytecodeVisitor0 = (BytecodeVisitor<BytecodeBlock>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bytecodeVisitor0).visitJumpInstruction(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.JumpInstruction.class));
      BytecodeBlock bytecodeBlock0 = jumpInstruction0.accept((BytecodeNode) opCode0, bytecodeVisitor0);
      assertNull(bytecodeBlock0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      InstructionNode instructionNode0 = JumpInstruction.jumpIfLessThanOrEqualZero(labelNode0);
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameter0).toString();
      BytecodeVisitor<Parameter> bytecodeVisitor0 = (BytecodeVisitor<Parameter>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(parameter0).when(bytecodeVisitor0).visitJumpInstruction(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.JumpInstruction.class));
      Parameter parameter1 = ((JumpInstruction) instructionNode0).accept((BytecodeNode) instructionNode0, bytecodeVisitor0);
      assertSame(parameter1, parameter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfNull(labelNode0);
      assertEquals(OpCode.IFNULL, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfIntEqual((LabelNode) null);
      assertEquals(OpCode.IF_ICMPEQ, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfObjectSame((LabelNode) null);
      assertEquals(OpCode.IF_ACMPEQ, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfIntLessThanOrEqual((LabelNode) null);
      assertEquals(OpCode.IF_ICMPLE, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfIntNotEqual((LabelNode) null);
      assertEquals(OpCode.IF_ICMPNE, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfEqualZero((LabelNode) null);
      assertEquals(OpCode.IFEQ, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfIntGreaterThan((LabelNode) null);
      assertEquals(OpCode.IF_ICMPGT, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfNotNull((LabelNode) null);
      assertEquals(OpCode.IFNONNULL, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfObjectNotSame((LabelNode) null);
      assertEquals(OpCode.IF_ACMPNE, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InstructionNode instructionNode0 = JumpInstruction.jumpIfNotEqualZero((LabelNode) null);
      // Undeclared exception!
      try { 
        ((JumpInstruction) instructionNode0).accept((BytecodeNode) instructionNode0, (BytecodeVisitor<OpCode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.JumpInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfIntGreaterThanOrEqualZero(labelNode0);
      assertEquals(OpCode.IFGE, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      doReturn((Label) null).when(labelNode0).getLabel();
      InstructionNode instructionNode0 = JumpInstruction.jumpIfLessThanOrEqualZero(labelNode0);
      MethodGenerationContext methodGenerationContext0 = mock(MethodGenerationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((JumpInstruction) instructionNode0).accept((MethodVisitor) null, methodGenerationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.JumpInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfGreaterThanZero((LabelNode) null);
      OpCode opCode0 = jumpInstruction0.getOpCode();
      assertEquals(157, opCode0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(labelNode0).toString();
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfLessThanOrEqualZero(labelNode0);
      LabelNode labelNode1 = jumpInstruction0.getLabel();
      assertSame(labelNode1, labelNode0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfLessThanZero((LabelNode) null);
      assertEquals(OpCode.IFLT, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      InstructionNode instructionNode0 = JumpInstruction.jumpIfLessThanOrEqualZero(labelNode0);
      List<BytecodeNode> list0 = ((JumpInstruction) instructionNode0).getChildNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabelNode labelNode0 = mock(LabelNode.class, new ViolatedAssumptionAnswer());
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jump(labelNode0);
      assertEquals(OpCode.GOTO, jumpInstruction0.getOpCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JumpInstruction jumpInstruction0 = (JumpInstruction)JumpInstruction.jumpIfIntLessThan((LabelNode) null);
      assertEquals(OpCode.IF_ICMPLT, jumpInstruction0.getOpCode());
  }
}
