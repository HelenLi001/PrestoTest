/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:10:26 GMT 2021
 */

package com.facebook.presto.bytecode.instruction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.BytecodeVisitor;
import com.facebook.presto.bytecode.Comment;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.OpCode;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.instruction.InstructionNode;
import com.facebook.presto.bytecode.instruction.TypeInstruction;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.objectweb.asm.MethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeInstruction_ESTest extends TypeInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpCode opCode0 = OpCode.LRETURN;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      TypeInstruction typeInstruction0 = new TypeInstruction(opCode0, parameterizedType0);
      BytecodeVisitor<String> bytecodeVisitor0 = (BytecodeVisitor<String>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn("IADD").when(bytecodeVisitor0).visitInstruction(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.InstructionNode.class));
      String string0 = typeInstruction0.accept((BytecodeNode) opCode0, bytecodeVisitor0);
      assertEquals("IADD", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInstruction.newObjectArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInstruction.newObject((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInstruction.instanceOf((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInstruction.cast((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameterizedType0).isPrimitive();
      doReturn("(").when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.newPrimitiveArray(parameterizedType0);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      MethodGenerationContext methodGenerationContext0 = mock(MethodGenerationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((TypeInstruction) instructionNode0).accept(methodVisitor0, methodGenerationContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // need primitive type for NEWARRAY
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.newObjectArray(parameterizedType0);
      OpCode opCode0 = OpCode.IF_ICMPLE;
      // Undeclared exception!
      try { 
        ((TypeInstruction) instructionNode0).accept((BytecodeNode) opCode0, (BytecodeVisitor<Variable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.TypeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).getClassName();
      doReturn((String) null).when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.newObjectArray(parameterizedType0);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      MethodGenerationContext methodGenerationContext0 = mock(MethodGenerationContext.class, new ViolatedAssumptionAnswer());
      ((TypeInstruction) instructionNode0).accept(methodVisitor0, methodGenerationContext0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Comment> class0 = Comment.class;
      InstructionNode instructionNode0 = TypeInstruction.instanceOf(class0);
      assertNotNull(instructionNode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Comment> class0 = Comment.class;
      InstructionNode instructionNode0 = TypeInstruction.cast(class0);
      assertNotNull(instructionNode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.instanceOf(parameterizedType0);
      assertNotNull(instructionNode0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameterizedType0).isPrimitive();
      doReturn("(").when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.newPrimitiveArray(parameterizedType0);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      MethodGenerationContext methodGenerationContext0 = mock(MethodGenerationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((TypeInstruction) instructionNode0).accept(methodVisitor0, methodGenerationContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // need primitive type for NEWARRAY
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(parameterizedType0).toString();
      TypeInstruction typeInstruction0 = (TypeInstruction)TypeInstruction.newObjectArray(parameterizedType0);
      String string0 = typeInstruction0.toString();
      assertEquals("ANEWARRAY null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.newObject(parameterizedType0);
      assertNotNull(instructionNode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.newObjectArray(parameterizedType0);
      List<BytecodeNode> list0 = ((TypeInstruction) instructionNode0).getChildNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.cast(parameterizedType0);
      assertNotNull(instructionNode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstructionNode instructionNode0 = TypeInstruction.newObject(class0);
      assertNotNull(instructionNode0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).toString();
      InstructionNode instructionNode0 = TypeInstruction.newObjectArray(parameterizedType0);
      BytecodeVisitor<Integer> bytecodeVisitor0 = (BytecodeVisitor<Integer>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bytecodeVisitor0).visitInstruction(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.InstructionNode.class));
      Integer integer0 = ((TypeInstruction) instructionNode0).accept((BytecodeNode) instructionNode0, bytecodeVisitor0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<BytecodeBlock> class0 = BytecodeBlock.class;
      InstructionNode instructionNode0 = TypeInstruction.newObjectArray(class0);
      assertNotNull(instructionNode0);
  }
}
