/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:11:44 GMT 2021
 */

package com.facebook.presto.bytecode.instruction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.BytecodeVisitor;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.Variable;
import com.facebook.presto.bytecode.instruction.InstructionNode;
import com.facebook.presto.bytecode.instruction.VariableInstruction;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.objectweb.asm.MethodVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VariableInstruction_ESTest extends VariableInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction(variable0);
      BytecodeVisitor<Integer> bytecodeVisitor0 = (BytecodeVisitor<Integer>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bytecodeVisitor0).visitLoadVariable(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.VariableInstruction.LoadVariableInstruction.class));
      Integer integer0 = variableInstruction_LoadVariableInstruction0.accept((BytecodeNode) null, bytecodeVisitor0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variable0).toString();
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction(variable0);
      Variable variable1 = variableInstruction_LoadVariableInstruction0.getVariable();
      assertSame(variable1, variable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction(variable0);
      Variable variable1 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variable1).toString();
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction(variable1);
      BytecodeVisitor<Object> bytecodeVisitor0 = (BytecodeVisitor<Object>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(variableInstruction_StoreVariableInstruction0).when(bytecodeVisitor0).visitLoadVariable(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.VariableInstruction.LoadVariableInstruction.class));
      Object object0 = variableInstruction_LoadVariableInstruction0.accept((BytecodeNode) variableInstruction_StoreVariableInstruction0, bytecodeVisitor0);
      assertSame(variableInstruction_StoreVariableInstruction0, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parameterizedType0).getClassName();
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn(parameterizedType0).when(variable0).getType();
      // Undeclared exception!
      try { 
        VariableInstruction.incrementVariable(variable0, (byte) (-96));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // variable must be an byte, short or int, but is null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction(variable0);
      Variable variable1 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction(variable1);
      // Undeclared exception!
      try { 
        variableInstruction_LoadVariableInstruction0.accept((BytecodeNode) variableInstruction_StoreVariableInstruction0, (BytecodeVisitor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.VariableInstruction$LoadVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction((Variable) null);
      Variable variable0 = variableInstruction_StoreVariableInstruction0.getVariable();
      assertNull(variable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction((Variable) null);
      MethodGenerationContext methodGenerationContext0 = mock(MethodGenerationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        variableInstruction_StoreVariableInstruction0.accept((MethodVisitor) null, methodGenerationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.VariableInstruction$StoreVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn("byte").when(parameterizedType0).getClassName();
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn(parameterizedType0).when(variable0).getType();
      VariableInstruction.IncrementVariableInstruction variableInstruction_IncrementVariableInstruction0 = new VariableInstruction.IncrementVariableInstruction(variable0, (byte)27);
      Variable variable1 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction(variable1);
      BytecodeVisitor<Integer> bytecodeVisitor0 = (BytecodeVisitor<Integer>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bytecodeVisitor0).visitStoreVariable(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.VariableInstruction.StoreVariableInstruction.class));
      variableInstruction_StoreVariableInstruction0.accept((BytecodeNode) variableInstruction_IncrementVariableInstruction0, bytecodeVisitor0);
      assertEquals((byte)27, variableInstruction_IncrementVariableInstruction0.getIncrement());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        VariableInstruction.incrementVariable((Variable) null, (byte) (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.VariableInstruction$IncrementVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction(variable0);
      List<BytecodeNode> list0 = variableInstruction_StoreVariableInstruction0.getChildNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn("byte").when(parameterizedType0).getClassName();
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn(parameterizedType0).when(variable0).getType();
      doReturn((String) null).when(variable0).toString();
      VariableInstruction.IncrementVariableInstruction variableInstruction_IncrementVariableInstruction0 = new VariableInstruction.IncrementVariableInstruction(variable0, (byte)27);
      String string0 = variableInstruction_IncrementVariableInstruction0.toString();
      assertEquals((byte)27, variableInstruction_IncrementVariableInstruction0.getIncrement());
      assertEquals("IncrementVariableInstruction{variable=null}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variable0).toString();
      InstructionNode instructionNode0 = VariableInstruction.storeVariable(variable0);
      assertNotNull(instructionNode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.LoadVariableInstruction variableInstruction_LoadVariableInstruction0 = new VariableInstruction.LoadVariableInstruction(variable0);
      BytecodeVisitor<Object> bytecodeVisitor0 = (BytecodeVisitor<Object>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bytecodeVisitor0).visitLoadVariable(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.VariableInstruction.LoadVariableInstruction.class));
      Object object0 = variableInstruction_LoadVariableInstruction0.accept((BytecodeNode) variableInstruction_LoadVariableInstruction0, bytecodeVisitor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterizedType) null).when(variable0).getType();
      doReturn((String) null, (String) null).when(variable0).toString();
      InstructionNode instructionNode0 = VariableInstruction.loadVariable(variable0);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((VariableInstruction.LoadVariableInstruction) instructionNode0).accept(methodVisitor0, (MethodGenerationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.instruction.VariableInstruction$LoadVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn("byte").when(parameterizedType0).getClassName();
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn(parameterizedType0).when(variable0).getType();
      doReturn((String) null).when(variable0).toString();
      VariableInstruction.IncrementVariableInstruction variableInstruction_IncrementVariableInstruction0 = new VariableInstruction.IncrementVariableInstruction(variable0, (byte)27);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      MethodGenerationContext methodGenerationContext0 = mock(MethodGenerationContext.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(methodGenerationContext0).getVariableSlot(any(com.facebook.presto.bytecode.Variable.class));
      variableInstruction_IncrementVariableInstruction0.accept(methodVisitor0, methodGenerationContext0);
      assertEquals((byte)27, variableInstruction_IncrementVariableInstruction0.getIncrement());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn("byte").when(parameterizedType0).getClassName();
      Variable variable0 = mock(Variable.class, new ViolatedAssumptionAnswer());
      doReturn(parameterizedType0).when(variable0).getType();
      VariableInstruction.IncrementVariableInstruction variableInstruction_IncrementVariableInstruction0 = new VariableInstruction.IncrementVariableInstruction(variable0, (byte)27);
      Variable variable1 = mock(Variable.class, new ViolatedAssumptionAnswer());
      VariableInstruction.StoreVariableInstruction variableInstruction_StoreVariableInstruction0 = new VariableInstruction.StoreVariableInstruction(variable1);
      BytecodeVisitor<Variable> bytecodeVisitor0 = (BytecodeVisitor<Variable>) mock(BytecodeVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bytecodeVisitor0).visitIncrementVariable(any(com.facebook.presto.bytecode.BytecodeNode.class) , any(com.facebook.presto.bytecode.instruction.VariableInstruction.IncrementVariableInstruction.class));
      variableInstruction_IncrementVariableInstruction0.accept((BytecodeNode) variableInstruction_StoreVariableInstruction0, bytecodeVisitor0);
      assertEquals((byte)27, variableInstruction_IncrementVariableInstruction0.getIncrement());
  }
}
