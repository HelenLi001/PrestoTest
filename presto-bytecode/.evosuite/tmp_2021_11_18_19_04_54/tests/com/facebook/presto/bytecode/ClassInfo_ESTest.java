/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 03:23:51 GMT 2021
 */

package com.facebook.presto.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.ClassDefinition;
import com.facebook.presto.bytecode.ClassInfo;
import com.facebook.presto.bytecode.ClassInfoLoader;
import com.facebook.presto.bytecode.ParameterizedType;
import java.lang.reflect.Array;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassInfo_ESTest extends ClassInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ClassInfo classInfo0 = classInfoLoader0.loadClassInfo(parameterizedType0);
      Class<Integer> class1 = Integer.class;
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, class1);
      boolean boolean0 = classInfo0.isAssignableFrom(classInfo1);
      assertFalse(boolean0);
      assertEquals(17, classInfo1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, (-3415), (ParameterizedType) null, linkedHashSet0, arrayList0);
      boolean boolean0 = classInfo0.isInterface();
      assertEquals((-3415), classInfo0.getModifiers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 0, parameterizedType0, linkedHashSet0, arrayList0);
      boolean boolean0 = classInfo0.isInterface();
      assertFalse(boolean0);
      assertEquals(0, classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashSet<ClassDefinition> hashSet0 = new HashSet<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(hashSet0, classLoader0);
      Class<String> class0 = Class.class;
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 3);
      Class<Object> class1 = Class.class;
      classArray0[0] = class1;
      Class<Object> class2 = Class.class;
      classArray0[1] = class2;
      Class<Object> class3 = Class.class;
      classArray0[2] = class3;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(1);
      Class<MethodNode> class4 = Class.class;
      ServiceLoader<MethodNode> serviceLoader0 = ServiceLoader.load(class4, classLoader0);
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 1, parameterizedType0, linkedHashSet0, serviceLoader0);
      classInfo0.getType();
      assertEquals(1, classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, true);
      Class<ParameterizedType> class0 = Class.class;
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, class0);
      int int0 = classInfo0.getModifiers();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, true);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ArrayList<ParameterizedType> arrayList0 = new ArrayList<ParameterizedType>();
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(arrayList0);
      LinkedHashSet<MethodNode> linkedHashSet0 = new LinkedHashSet<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, (-1), parameterizedType0, priorityQueue0, linkedHashSet0);
      int int0 = classInfo0.getModifiers();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<ClassDefinition> linkedList0 = new LinkedList<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(linkedList0, classLoader0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("2");
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(3993);
      HashSet<MethodNode> hashSet0 = new HashSet<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 3993, parameterizedType0, priorityQueue0, hashSet0);
      Class<ClassInfo> class0 = Class.class;
      ParameterizedType parameterizedType1 = ParameterizedType.type(class0);
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, parameterizedType0, 188, parameterizedType1, priorityQueue0, hashSet0);
      // Undeclared exception!
      classInfo0.isAssignableFrom(classInfo1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<ClassDefinition> linkedList0 = new LinkedList<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(linkedList0, classLoader0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(3993);
      HashSet<MethodNode> hashSet0 = new HashSet<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 3993, parameterizedType0, priorityQueue0, hashSet0);
      Class<Integer> class0 = Integer.TYPE;
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, class0);
      // Undeclared exception!
      try { 
        classInfo1.isAssignableFrom(classInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class not found L;
         //
         verifyException("com.facebook.presto.bytecode.ClassInfoLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, (ClassLoader) null, true);
      Class<Object> class0 = Class.class;
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, class0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("");
      HashSet<ParameterizedType> hashSet0 = new HashSet<ParameterizedType>(184);
      PriorityQueue<MethodNode> priorityQueue0 = new PriorityQueue<MethodNode>();
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, parameterizedType0, 512, parameterizedType0, hashSet0, priorityQueue0);
      // Undeclared exception!
      try { 
        classInfo0.isAssignableFrom(classInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.ClassInfoLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, true);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ArrayList<ParameterizedType> arrayList0 = new ArrayList<ParameterizedType>();
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(arrayList0);
      LinkedHashSet<MethodNode> linkedHashSet0 = new LinkedHashSet<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, (-1), parameterizedType0, priorityQueue0, linkedHashSet0);
      // Undeclared exception!
      classInfo0.getSuperclass();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ClassDefinition> linkedList0 = new LinkedList<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(linkedList0, classLoader0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("2");
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(3986);
      HashSet<MethodNode> hashSet0 = new HashSet<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 3986, parameterizedType0, priorityQueue0, hashSet0);
      // Undeclared exception!
      try { 
        classInfo0.getSuperclass();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class not found L2;
         //
         verifyException("com.facebook.presto.bytecode.ClassInfoLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, (ClassLoader) null, true);
      ParameterizedType parameterizedType0 = new ParameterizedType("Methods were not loaded for type %s");
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>();
      PriorityQueue<MethodNode> priorityQueue0 = new PriorityQueue<MethodNode>(3328);
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 3328, parameterizedType0, linkedHashSet0, priorityQueue0);
      // Undeclared exception!
      try { 
        classInfo0.getSuperclass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.ClassInfoLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ParameterizedType parameterizedType1 = ParameterizedType.typeFromPathName("S");
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      linkedHashSet0.add(parameterizedType1);
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType1, 657, parameterizedType0, linkedHashSet0, arrayList0);
      // Undeclared exception!
      try { 
        classInfo0.getInterfaces();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class not found LS;
         //
         verifyException("com.facebook.presto.bytecode.ClassInfoLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, (ClassLoader) null, true);
      Class<Integer> class0 = Class.class;
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, class0);
      // Undeclared exception!
      try { 
        classInfo0.getInterfaces();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.bytecode.ClassInfoLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassNode classNode0 = new ClassNode();
      String[] stringArray0 = new String[3];
      classNode0.visit(0, (-1995), "Zh?.Z86t'?E", (String) null, "Zh?.Z86t'?E", stringArray0);
      ClassInfo classInfo0 = null;
      try {
        classInfo0 = new ClassInfo((ClassInfoLoader) null, classNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name Zh?.Z86t'?E
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<ClassInfo> class0 = ClassInfo.class;
      ClassInfo classInfo0 = null;
      try {
        classInfo0 = new ClassInfo((ClassInfoLoader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // loader is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, true);
      ArrayList<ParameterizedType> arrayList0 = new ArrayList<ParameterizedType>();
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(arrayList0);
      ArrayDeque<MethodNode> arrayDeque0 = new ArrayDeque<MethodNode>();
      ClassInfo classInfo0 = null;
      try {
        classInfo0 = new ClassInfo(classInfoLoader0, (ParameterizedType) null, 0, (ParameterizedType) null, priorityQueue0, arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>();
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      arrayList0.add((MethodNode) null);
      ClassInfo classInfo0 = null;
      try {
        classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 0, parameterizedType0, linkedHashSet0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashSet<ClassDefinition> hashSet0 = new HashSet<ClassDefinition>();
      ArrayDeque<ClassDefinition> arrayDeque0 = new ArrayDeque<ClassDefinition>(hashSet0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(arrayDeque0, classLoader0);
      Class<String> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>();
      TreeSet<MethodNode> treeSet0 = new TreeSet<MethodNode>();
      linkedHashSet0.add(parameterizedType0);
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 929, parameterizedType0, linkedHashSet0, treeSet0);
      // Undeclared exception!
      classInfo0.getInterfaces();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashSet<ClassDefinition> hashSet0 = new HashSet<ClassDefinition>();
      ArrayDeque<ClassDefinition> arrayDeque0 = new ArrayDeque<ClassDefinition>(hashSet0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(arrayDeque0, classLoader0);
      Class<String> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>();
      TreeSet<MethodNode> treeSet0 = new TreeSet<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 929, parameterizedType0, linkedHashSet0, treeSet0);
      classInfo0.getInterfaces();
      assertEquals(929, classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, (-3415), (ParameterizedType) null, linkedHashSet0, arrayList0);
      classInfo0.getSuperclass();
      assertEquals((-3415), classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, true);
      Class<Integer> class0 = Class.class;
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 0);
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0, classArray0);
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 0, parameterizedType0, priorityQueue0, (Iterable<MethodNode>) null);
      assertEquals(0, classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassNode classNode0 = new ClassNode();
      String[] stringArray0 = new String[2];
      classNode0.visit(3011, 3011, "`", "\"Q2h%oa;Tb", (String) null, stringArray0);
      ClassInfo classInfo0 = null;
      try {
        classInfo0 = new ClassInfo((ClassInfoLoader) null, classNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // loader is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassNode classNode0 = new ClassNode();
      String[] stringArray0 = new String[2];
      classNode0.visit(3011, 3011, "`", "\"Q2h%oa;Tb", "INVOKESPECIAL/STATIC on interfaces require ASM5", stringArray0);
      ClassInfo classInfo0 = null;
      try {
        classInfo0 = new ClassInfo((ClassInfoLoader) null, classNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // loader is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, true);
      Class<Integer> class0 = Class.class;
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, class0);
      classInfo0.getType();
      assertEquals(17, classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 0, parameterizedType0, linkedHashSet0, arrayList0);
      int int0 = classInfo0.getModifiers();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = classInfoLoader0.loadClassInfo(parameterizedType0);
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, parameterizedType0, (-3415), (ParameterizedType) null, linkedHashSet0, arrayList0);
      ClassInfo classInfo2 = classInfo0.getSuperclass();
      boolean boolean0 = classInfo2.isAssignableFrom(classInfo1);
      assertEquals(33, classInfo2.getModifiers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<ClassDefinition> linkedHashSet0 = new LinkedHashSet<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(linkedHashSet0, classLoader0);
      Class<String> class0 = Class.class;
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, class0);
      boolean boolean0 = classInfo0.isAssignableFrom(classInfo0);
      assertEquals(17, classInfo0.getModifiers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      ClassInfo classInfo0 = classInfoLoader0.loadClassInfo(parameterizedType0);
      ClassInfo classInfo1 = classInfo0.getSuperclass();
      boolean boolean0 = classInfo1.isAssignableFrom(classInfo0);
      assertTrue(boolean0);
      assertEquals(33, classInfo1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      linkedHashSet0.add(parameterizedType0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = classInfoLoader0.loadClassInfo(parameterizedType0);
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, parameterizedType0, (-3415), (ParameterizedType) null, linkedHashSet0, arrayList0);
      boolean boolean0 = classInfo0.isAssignableFrom(classInfo1);
      assertTrue(boolean0);
      assertEquals((-3415), classInfo1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>();
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, (-3437), (ParameterizedType) null, linkedHashSet0, arrayList0);
      classInfo0.getMethods();
      assertEquals((-3437), classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PriorityQueue<ClassDefinition> priorityQueue0 = new PriorityQueue<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(priorityQueue0, classLoader0);
      Class<String> class0 = Class.class;
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, class0);
      // Undeclared exception!
      try { 
        classInfo0.getMethods();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Methods were not loaded for type Ljava/lang/Class;
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<ClassDefinition> linkedList0 = new LinkedList<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(linkedList0, classLoader0);
      Class<Integer> class0 = Integer.TYPE;
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, class0);
      classInfo0.getType();
      assertEquals(1041, classInfo0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<ClassDefinition> linkedList0 = new LinkedList<ClassDefinition>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = ClassInfoLoader.createClassInfoLoader(linkedList0, classLoader0);
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("2");
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>(3943);
      HashSet<MethodNode> hashSet0 = new HashSet<MethodNode>();
      ClassInfo classInfo0 = new ClassInfo(classInfoLoader0, parameterizedType0, 3943, parameterizedType0, priorityQueue0, hashSet0);
      Class<String> class0 = Class.class;
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, class0);
      boolean boolean0 = classInfo0.isAssignableFrom(classInfo1);
      assertFalse(boolean0);
      assertEquals(17, classInfo1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<ParameterizedType, ClassNode> hashMap0 = new HashMap<ParameterizedType, ClassNode>();
      HashMap<ParameterizedType, byte[]> hashMap1 = new HashMap<ParameterizedType, byte[]>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassInfoLoader classInfoLoader0 = new ClassInfoLoader(hashMap0, hashMap1, classLoader0, false);
      Class<Locale.FilteringMode> class0 = Class.class;
      ParameterizedType parameterizedType0 = ParameterizedType.type(class0);
      TreeSet<ParameterizedType> treeSet0 = new TreeSet<ParameterizedType>();
      LinkedHashSet<ParameterizedType> linkedHashSet0 = new LinkedHashSet<ParameterizedType>(treeSet0);
      ArrayList<MethodNode> arrayList0 = new ArrayList<MethodNode>();
      ClassInfo classInfo0 = classInfoLoader0.loadClassInfo(parameterizedType0);
      ClassInfo classInfo1 = new ClassInfo(classInfoLoader0, parameterizedType0, (-3410), (ParameterizedType) null, linkedHashSet0, arrayList0);
      boolean boolean0 = classInfo0.isAssignableFrom(classInfo1);
      assertFalse(boolean0);
      assertEquals((-3410), classInfo1.getModifiers());
  }
}
