/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 03:20:33 GMT 2021
 */

package com.facebook.presto.bytecode.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.bytecode.BytecodeBlock;
import com.facebook.presto.bytecode.BytecodeNode;
import com.facebook.presto.bytecode.MethodGenerationContext;
import com.facebook.presto.bytecode.Parameter;
import com.facebook.presto.bytecode.ParameterizedType;
import com.facebook.presto.bytecode.StaticTypeBytecodeExpression;
import com.facebook.presto.bytecode.expression.BytecodeExpression;
import com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression;
import com.facebook.presto.bytecode.expression.InstanceOfBytecodeExpression;
import com.facebook.presto.bytecode.expression.ReturnBytecodeExpression;
import java.sql.SQLTimeoutException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.tree.MethodNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparisonBytecodeExpression_ESTest extends ComparisonBytecodeExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("$ \"", class0);
      BytecodeExpression[] bytecodeExpressionArray0 = new BytecodeExpression[7];
      bytecodeExpressionArray0[0] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[1] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[2] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[3] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[4] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[5] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[6] = (BytecodeExpression) parameter0;
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("$ \"", class0, bytecodeExpressionArray0);
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.equal(bytecodeExpressionArray0[1], bytecodeExpression0);
      assertNotNull(bytecodeExpression1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<BytecodeBlock> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = parameter0.length();
      BytecodeExpression bytecodeExpression2 = ComparisonBytecodeExpression.greaterThanOrEqual(bytecodeExpression1, bytecodeExpression0);
      assertNotNull(bytecodeExpression2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<BytecodeBlock> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = parameter0.length();
      BytecodeExpression bytecodeExpression2 = ComparisonBytecodeExpression.lessThanOrEqual(bytecodeExpression0, bytecodeExpression1);
      assertNotNull(bytecodeExpression2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = parameter0.length();
      BytecodeExpression bytecodeExpression2 = ComparisonBytecodeExpression.greaterThan(bytecodeExpression0, bytecodeExpression1);
      assertNotNull(bytecodeExpression2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<BytecodeBlock> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = parameter0.length();
      BytecodeExpression bytecodeExpression2 = ComparisonBytecodeExpression.lessThan(bytecodeExpression1, bytecodeExpression0);
      assertNotNull(bytecodeExpression2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("Z*'<5", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.cast(class0);
      ComparisonBytecodeExpression comparisonBytecodeExpression0 = (ComparisonBytecodeExpression)ComparisonBytecodeExpression.equal(bytecodeExpression0, bytecodeExpression0);
      String string0 = comparisonBytecodeExpression0.formatOneLine();
      assertEquals("(((Class) Z*'<5) == ((Class) Z*'<5))", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.notEqual((BytecodeExpression) null, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // left is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.lessThanOrEqual((BytecodeExpression) null, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // left is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.lessThan((BytecodeExpression) null, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // left is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.greaterThanOrEqual((BytecodeExpression) null, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // left is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.greaterThan((BytecodeExpression) null, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // left is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.equal((BytecodeExpression) null, (BytecodeExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // left is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<BytecodeBlock> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.lessThanOrEqual(bytecodeExpression0, bytecodeExpression0);
      MethodNode methodNode0 = new MethodNode();
      MethodGenerationContext methodGenerationContext0 = new MethodGenerationContext(methodNode0);
      BytecodeBlock bytecodeBlock0 = (BytecodeBlock)bytecodeExpression1.getBytecode(methodGenerationContext0);
      assertNull(bytecodeBlock0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("b,");
      Parameter parameter0 = Parameter.arg("b,", parameterizedType0);
      ReturnBytecodeExpression returnBytecodeExpression0 = new ReturnBytecodeExpression(parameter0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.lessThan(returnBytecodeExpression0, returnBytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // left is void
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("$ \"", class0);
      BytecodeExpression[] bytecodeExpressionArray0 = new BytecodeExpression[7];
      bytecodeExpressionArray0[0] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[1] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[2] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[3] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[4] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[5] = (BytecodeExpression) parameter0;
      bytecodeExpressionArray0[6] = (BytecodeExpression) parameter0;
      BytecodeExpression bytecodeExpression0 = parameter0.invoke("$ \"", class0, bytecodeExpressionArray0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.lessThan(bytecodeExpressionArray0[6], bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // left is not a primitive
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<BytecodeBlock> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.lessThanOrEqual(bytecodeExpression0, bytecodeExpression0);
      InstanceOfBytecodeExpression instanceOfBytecodeExpression0 = new InstanceOfBytecodeExpression(parameter0, class0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.notEqual(instanceOfBytecodeExpression0, bytecodeExpression1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not equal than does not support boolean
         //
         verifyException("com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<StaticTypeBytecodeExpression> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("/z;+t\"s.<=", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.notEqual(bytecodeExpression0, bytecodeExpression0);
      assertNotNull(bytecodeExpression1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("[#N", class0);
      BytecodeExpression bytecodeExpression0 = ComparisonBytecodeExpression.notEqual(parameter0, parameter0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.equal(bytecodeExpression0, bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Equal does not support boolean
         //
         verifyException("com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<BytecodeBlock> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("V", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.equal(bytecodeExpression0, bytecodeExpression0);
      assertNotNull(bytecodeExpression1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("Y'|Nea,a*Sagj", class0);
      Class<String> class1 = Class.class;
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class1);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.greaterThanOrEqual(bytecodeExpression0, bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Greater than or equal does not support boolean
         //
         verifyException("com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<SQLTimeoutException> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.lessThanOrEqual(bytecodeExpression0, bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than or equal does not support boolean
         //
         verifyException("com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromPathName("");
      Parameter parameter0 = Parameter.arg("", parameterizedType0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.greaterThan(bytecodeExpression0, bytecodeExpression0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.lessThan(bytecodeExpression1, bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // left and right must be the same type
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<BytecodeBlock> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.length();
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.lessThanOrEqual(bytecodeExpression0, bytecodeExpression0);
      InstanceOfBytecodeExpression instanceOfBytecodeExpression0 = new InstanceOfBytecodeExpression(parameter0, class0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.greaterThan(instanceOfBytecodeExpression0, bytecodeExpression1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Greater than does not support boolean
         //
         verifyException("com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParameterizedType parameterizedType0 = ParameterizedType.typeFromJavaClassName("7lMe<~h|nu2ucgrSo?");
      Parameter parameter0 = Parameter.arg("7lMe<~h|nu2ucgrSo?", parameterizedType0);
      Class<String> class0 = Class.class;
      BytecodeExpression bytecodeExpression0 = parameter0.instanceOf(class0);
      // Undeclared exception!
      try { 
        ComparisonBytecodeExpression.lessThan(bytecodeExpression0, bytecodeExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than does not support boolean
         //
         verifyException("com.facebook.presto.bytecode.expression.ComparisonBytecodeExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Class.class;
      Parameter parameter0 = Parameter.arg("Z*'<5", class0);
      BytecodeExpression bytecodeExpression0 = parameter0.cast(class0);
      BytecodeExpression bytecodeExpression1 = ComparisonBytecodeExpression.equal(bytecodeExpression0, bytecodeExpression0);
      List<BytecodeNode> list0 = ((ComparisonBytecodeExpression) bytecodeExpression1).getChildNodes();
      assertEquals(2, list0.size());
  }
}
