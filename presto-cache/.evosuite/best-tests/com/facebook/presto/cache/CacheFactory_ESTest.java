/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:17:14 GMT 2021
 */

package com.facebook.presto.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cache.CacheFactory;
import com.facebook.presto.cache.CacheManager;
import com.facebook.presto.cache.CacheType;
import com.facebook.presto.cache.NoOpCacheManager;
import com.facebook.presto.cache.alluxio.AlluxioCachingFileSystem;
import com.facebook.presto.cache.filemerge.FileMergeCachingFileSystem;
import com.facebook.presto.hive.filesystem.ExtendedFileSystem;
import java.net.URI;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.HadoopExtendedFileSystem;
import org.apache.hadoop.fs.HarFileSystem;
import org.apache.hadoop.fs.LocalFileSystem;
import org.apache.hadoop.fs.RawLocalFileSystem;
import org.apache.hadoop.mapred.JobConf;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheFactory_ESTest extends CacheFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CacheFactory cacheFactory0 = new CacheFactory();
      Configuration configuration0 = new Configuration();
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      URI uRI0 = rawLocalFileSystem0.getUri();
      HadoopExtendedFileSystem hadoopExtendedFileSystem0 = new HadoopExtendedFileSystem(rawLocalFileSystem0);
      NoOpCacheManager noOpCacheManager0 = new NoOpCacheManager();
      CacheType cacheType0 = CacheType.FILE_MERGE;
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = (FileMergeCachingFileSystem)cacheFactory0.createCachingFileSystem(configuration0, uRI0, hadoopExtendedFileSystem0, noOpCacheManager0, true, cacheType0, false);
      assertFalse(fileMergeCachingFileSystem0.isCacheValidationEnabled());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CacheFactory cacheFactory0 = new CacheFactory();
      Configuration configuration0 = new Configuration(false);
      NoOpCacheManager noOpCacheManager0 = new NoOpCacheManager();
      CacheType cacheType0 = CacheType.ALLUXIO;
      ExtendedFileSystem extendedFileSystem0 = cacheFactory0.createCachingFileSystem(configuration0, (URI) null, (ExtendedFileSystem) null, noOpCacheManager0, false, cacheType0, true);
      assertNull(extendedFileSystem0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CacheFactory cacheFactory0 = new CacheFactory();
      JobConf jobConf0 = new JobConf(false);
      URI uRI0 = FileSystem.getDefaultUri(jobConf0);
      NoOpCacheManager noOpCacheManager0 = new NoOpCacheManager();
      HarFileSystem harFileSystem0 = new HarFileSystem();
      HadoopExtendedFileSystem hadoopExtendedFileSystem0 = new HadoopExtendedFileSystem(harFileSystem0);
      AlluxioCachingFileSystem alluxioCachingFileSystem0 = new AlluxioCachingFileSystem(hadoopExtendedFileSystem0, uRI0);
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, jobConf0, noOpCacheManager0, alluxioCachingFileSystem0, false);
      CacheType cacheType0 = CacheType.ALLUXIO;
      ExtendedFileSystem extendedFileSystem0 = cacheFactory0.createCachingFileSystem(jobConf0, uRI0, fileMergeCachingFileSystem0, noOpCacheManager0, false, cacheType0, false);
      assertFalse(extendedFileSystem0.supportsSymlinks());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CacheFactory cacheFactory0 = new CacheFactory();
      Configuration configuration0 = new Configuration();
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      URI uRI0 = rawLocalFileSystem0.getUri();
      HadoopExtendedFileSystem hadoopExtendedFileSystem0 = new HadoopExtendedFileSystem(rawLocalFileSystem0);
      NoOpCacheManager noOpCacheManager0 = new NoOpCacheManager();
      CacheType cacheType0 = CacheType.FILE_MERGE;
      FileSystem.enableSymlinks();
      ExtendedFileSystem extendedFileSystem0 = cacheFactory0.createCachingFileSystem(configuration0, uRI0, hadoopExtendedFileSystem0, noOpCacheManager0, false, cacheType0, true);
      assertEquals(10, FileSystem.SHUTDOWN_HOOK_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CacheFactory cacheFactory0 = new CacheFactory();
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      HadoopExtendedFileSystem hadoopExtendedFileSystem0 = new HadoopExtendedFileSystem(rawLocalFileSystem0);
      URI uRI0 = MockURI.aFTPURI;
      AlluxioCachingFileSystem alluxioCachingFileSystem0 = new AlluxioCachingFileSystem(hadoopExtendedFileSystem0, uRI0, true);
      NoOpCacheManager noOpCacheManager0 = new NoOpCacheManager();
      CacheType cacheType0 = CacheType.ALLUXIO;
      // Undeclared exception!
      try { 
        cacheFactory0.createCachingFileSystem((Configuration) null, uRI0, alluxioCachingFileSystem0, noOpCacheManager0, true, cacheType0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.AlluxioCachingFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      LocalFileSystem localFileSystem0 = new LocalFileSystem();
      HadoopExtendedFileSystem hadoopExtendedFileSystem0 = new HadoopExtendedFileSystem(localFileSystem0);
      CacheFactory cacheFactory0 = new CacheFactory();
      URI uRI0 = localFileSystem0.getUri();
      CacheType cacheType0 = CacheType.ALLUXIO;
      // Undeclared exception!
      try { 
        cacheFactory0.createCachingFileSystem(configuration0, uRI0, hadoopExtendedFileSystem0, (CacheManager) null, true, cacheType0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // file is not supported as the external filesystem.
         //
         verifyException("alluxio.hadoop.LocalCacheFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      LocalFileSystem localFileSystem0 = new LocalFileSystem();
      HadoopExtendedFileSystem hadoopExtendedFileSystem0 = new HadoopExtendedFileSystem(localFileSystem0);
      CacheFactory cacheFactory0 = new CacheFactory();
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        cacheFactory0.createCachingFileSystem(configuration0, uRI0, hadoopExtendedFileSystem0, (CacheManager) null, true, (CacheType) null, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alluxio.shaded.client.com.google.common.base.Preconditions", e);
      }
  }
}
