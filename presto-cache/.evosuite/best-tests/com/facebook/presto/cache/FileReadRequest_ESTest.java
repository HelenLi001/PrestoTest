/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:15:44 GMT 2021
 */

package com.facebook.presto.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cache.FileReadRequest;
import java.net.URI;
import org.apache.hadoop.fs.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileReadRequest_ESTest extends FileReadRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Path path0 = new Path(" q%gXWjKFBa ~Jg", " q%gXWjKFBa ~Jg");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 0L, (-1141));
      fileReadRequest0.getOffset();
      assertEquals((-1141), fileReadRequest0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      Path path0 = new Path(uRI0);
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, (-119L), 871);
      long long0 = fileReadRequest0.getOffset();
      assertEquals((-119L), long0);
      assertEquals(871, fileReadRequest0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, '/');
      int int0 = fileReadRequest0.getLength();
      assertEquals(1L, fileReadRequest0.getOffset());
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Path path0 = new Path("TmO9@+2", "offset is null");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 164L, (-1385));
      int int0 = fileReadRequest0.getLength();
      assertEquals(164L, fileReadRequest0.getOffset());
      assertEquals((-1385), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileReadRequest fileReadRequest0 = null;
      try {
        fileReadRequest0 = new FileReadRequest((Path) null, 0L, 65536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      FileReadRequest fileReadRequest1 = new FileReadRequest(path0, 1L, 0);
      boolean boolean0 = fileReadRequest0.equals(fileReadRequest1);
      assertEquals(0, fileReadRequest1.getLength());
      assertEquals(1L, fileReadRequest1.getOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Path path0 = new Path(uRI0);
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 620L, '/');
      FileReadRequest fileReadRequest1 = new FileReadRequest(path0, '/', (-25));
      boolean boolean0 = fileReadRequest0.equals(fileReadRequest1);
      assertFalse(boolean0);
      assertEquals(47L, fileReadRequest1.getOffset());
      assertEquals((-25), fileReadRequest1.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Path path0 = new Path("vN.C>_Q> IoET", "vN.C>_Q> IoET");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, '/', '/');
      Path path1 = new Path("vN.C>_Q> IoET", path0);
      FileReadRequest fileReadRequest1 = new FileReadRequest(path1, '/', '/');
      boolean boolean0 = fileReadRequest0.equals(fileReadRequest1);
      assertEquals(47L, fileReadRequest1.getOffset());
      assertEquals(47, fileReadRequest1.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      FileReadRequest fileReadRequest1 = new FileReadRequest(path0, 1L, '/');
      boolean boolean0 = fileReadRequest0.equals(fileReadRequest1);
      assertEquals(47, fileReadRequest1.getLength());
      assertFalse(boolean0);
      assertEquals(1L, fileReadRequest1.getOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      boolean boolean0 = fileReadRequest0.equals(fileReadRequest0);
      assertTrue(boolean0);
      assertEquals(1L, fileReadRequest0.getOffset());
      assertEquals(0, fileReadRequest0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      boolean boolean0 = fileReadRequest0.equals("++&;");
      assertEquals(1L, fileReadRequest0.getOffset());
      assertFalse(boolean0);
      assertEquals(0, fileReadRequest0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      int int0 = fileReadRequest0.getLength();
      assertEquals(1L, fileReadRequest0.getOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      fileReadRequest0.getPath();
      assertEquals(0, fileReadRequest0.getLength());
      assertEquals(1L, fileReadRequest0.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      long long0 = fileReadRequest0.getOffset();
      assertEquals(0, fileReadRequest0.getLength());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Path path0 = new Path("++&;", "++&;");
      FileReadRequest fileReadRequest0 = new FileReadRequest(path0, 1L, 0);
      fileReadRequest0.hashCode();
      assertEquals(0, fileReadRequest0.getLength());
      assertEquals(1L, fileReadRequest0.getOffset());
  }
}
