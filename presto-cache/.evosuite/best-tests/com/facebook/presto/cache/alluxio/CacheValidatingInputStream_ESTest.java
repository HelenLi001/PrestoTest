/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:14:20 GMT 2021
 */

package com.facebook.presto.cache.alluxio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cache.alluxio.CacheValidatingInputStream;
import java.io.IOException;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.io.ByteBufferPool;
import org.apache.hadoop.io.ElasticByteBufferPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheValidatingInputStream_ESTest extends CacheValidatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      Integer integer0 = new Integer(1);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully((long) 1, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1, 451).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      Integer integer0 = new Integer(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully((long) 451, (byte[]) null, (-2860), 724);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451, 0, 0).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn(1, 451, 1, 1, 1).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      cacheValidatingInputStream0.readFully(1L, byteArray0);
      byte byte0 = (byte)2;
      cacheValidatingInputStream0.readChar();
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      Long long0 = new Long((byte)2);
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully((long) 451, byteArray0, (int) (byte)2, (int) (byte)2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 0
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-24), (-24)).when(fSDataInputStream0).read();
      doReturn((long)(-24)).when(fSDataInputStream0).getPos();
      doReturn(1803, (-24)).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      fSDataInputStream1.unbuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)96;
      cacheValidatingInputStream1.seek(1L);
      cacheValidatingInputStream1.readFully((-2537L), byteArray0, 69, (int) (byte) (-113));
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.read(0L, (byte[]) null, (int) (byte)96, (-29));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451, 0L).when(fSDataInputStream0).getPos();
      doReturn((-2124)).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      cacheValidatingInputStream0.getPos();
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully(1300L, byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-24), (-24)).when(fSDataInputStream0).read();
      doReturn((long)(-24)).when(fSDataInputStream0).getPos();
      doReturn((-113)).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      fSDataInputStream1.unbuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-113);
      fSDataInputStream1.unbuffer();
      byteArray0[1] = (byte)96;
      cacheValidatingInputStream1.seek(1L);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.readFully(662L, byteArray0, (-24), (int) (byte)96);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-24), (-24)).when(fSDataInputStream0).read();
      doReturn((long)(-24), 0L).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      fSDataInputStream1.unbuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)96;
      FileSystemHandling.shouldAllThrowIOExceptions();
      cacheValidatingInputStream1.seek(1L);
      cacheValidatingInputStream1.readFully((-2537L), byteArray0, 69, (int) (byte) (-113));
      cacheValidatingInputStream1.getPos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn(1, 451).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte byte0 = (byte)0;
      Long long0 = new Long((byte)0);
      byte byte1 = (byte)0;
      byte byte2 = (byte)40;
      byte byte3 = (byte) (-88);
      cacheValidatingInputStream1.reset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      cacheValidatingInputStream0.read(935L, byteArray0, 1, (int) (byte) (-14));
      long long1 = 64L;
      int int0 = (-1584);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-24), (-24)).when(fSDataInputStream0).read();
      doReturn((long)(-24)).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)96;
      byteArray0[1] = (byte)96;
      cacheValidatingInputStream1.seek(1L);
      byte byte1 = (byte)0;
      try { 
        cacheValidatingInputStream1.seekToNewSource((-1401L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This method is not supported.
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn(1, 451).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      Long long0 = new Long((byte)0);
      byte byte0 = (byte)0;
      byte byte1 = (byte)40;
      byte byte2 = (byte) (-88);
      cacheValidatingInputStream1.reset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.read(935L, byteArray0, 1, (int) (byte) (-14));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 0
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn(1, 451, 1, 1, 1).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      cacheValidatingInputStream0.readFully(1L, byteArray0);
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      Long long0 = new Long((byte)0);
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)40;
      byteArray0[3] = (byte)40;
      byte byte3 = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      cacheValidatingInputStream0.reset();
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.read((long) 451, byteArray0, (int) (byte) (-14), 420);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451, 0L).when(fSDataInputStream0).getPos();
      doReturn((-2124)).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      cacheValidatingInputStream0.getPos();
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully(1300L, byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1505), (-1505)).when(fSDataInputStream0).read();
      doReturn(638L).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      cacheValidatingInputStream1.readFully(0L, byteArray0, (-1505), (-1538));
      byteArray0[1] = (byte) (-14);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(5, 2531).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      Integer integer0 = new Integer((-1451));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.read((long) (byte)0, byteArray0, (int) (byte) (-14), 3781);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn((-2744)).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.read((long) 4111, byteArray0, 451, 451);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn(451, 451).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      System.setCurrentTimeMillis(451);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully(1300L, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn(1, 451, 1, 1, 1).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      cacheValidatingInputStream0.readFully(1300L, byteArray0);
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(fSDataInputStream0).read();
      doReturn((long)(-1)).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      cacheValidatingInputStream1.seek(1L);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = null;
      try {
        cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, (FSDataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // DataTierInputStream is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(451, 451).when(fSDataInputStream0).read();
      doReturn((long)451).when(fSDataInputStream0).getPos();
      doReturn(0, 0, 0, 0, 0).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      cacheValidatingInputStream0.readFully(1300L, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      int int0 = new Integer((-1451));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      cacheValidatingInputStream1.read((long) (byte)0, byteArray0, (int) (byte) (-14), 3781);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1626), (-1626)).when(fSDataInputStream0).read();
      doReturn((long)(-1626)).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(143, 143).when(fSDataInputStream0).read();
      doReturn((long)143).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(973, (-2073)).when(fSDataInputStream0).read();
      doReturn((long)973).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.read();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 973
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3630), 112).when(fSDataInputStream0).read();
      doReturn((long)112).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.read();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 112
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(fSDataInputStream0).read();
      doReturn(0L).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CacheValidatingInputStream cacheValidatingInputStream0 = null;
      try {
        cacheValidatingInputStream0 = new CacheValidatingInputStream((FSDataInputStream) null, (FSDataInputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // In is not an instance of Seekable or PositionedReadable
         //
         verifyException("org.apache.hadoop.fs.FSDataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1, 451, 1, 1, 1).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      Integer integer0 = new Integer(1);
      byte[] byteArray0 = new byte[3];
      cacheValidatingInputStream0.readFully((long) 451, byteArray0);
      byteArray0[2] = (byte) (-75);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.readFully((long) integer0, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 0
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-24), (-24)).when(fSDataInputStream0).read();
      doReturn((long)(-24)).when(fSDataInputStream0).getPos();
      doReturn(0, 0, 0, 0, 0).when(fSDataInputStream0).read(anyLong() , any(byte[].class) , anyInt() , anyInt());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FSDataInputStream fSDataInputStream1 = new FSDataInputStream(cacheValidatingInputStream0);
      CacheValidatingInputStream cacheValidatingInputStream1 = new CacheValidatingInputStream(fSDataInputStream1, cacheValidatingInputStream0);
      cacheValidatingInputStream0.read();
      byte[] byteArray0 = new byte[5];
      fSDataInputStream1.unbuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-113);
      byte byte0 = (byte)96;
      byteArray0[1] = (byte)96;
      cacheValidatingInputStream1.seek(1L);
      cacheValidatingInputStream1.readFully((-2537L), byteArray0, 69, (int) (byte) (-113));
      // Undeclared exception!
      cacheValidatingInputStream1.readFully(1L, byteArray0, (int) (byte)96, (int) (byte)96);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      try { 
        cacheValidatingInputStream0.seekToNewSource((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This method is not supported.
         //
         verifyException("com.facebook.presto.cache.alluxio.CacheValidatingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(18, 0).when(fSDataInputStream0).read();
      doReturn((long)18).when(fSDataInputStream0).getPos();
      CacheValidatingInputStream cacheValidatingInputStream0 = new CacheValidatingInputStream(fSDataInputStream0, fSDataInputStream0);
      // Undeclared exception!
      try { 
        cacheValidatingInputStream0.read();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 18
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }
}
