/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:21:30 GMT 2021
 */

package com.facebook.presto.cache.filemerge;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cache.CacheManager;
import com.facebook.presto.cache.filemerge.FileMergeCachingFileSystem;
import com.facebook.presto.hive.CacheQuota;
import com.facebook.presto.hive.HiveFileContext;
import com.facebook.presto.hive.filesystem.ExtendedFileSystem;
import java.net.URI;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileMergeCachingFileSystem_ESTest extends FileMergeCachingFileSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("+n").when(configuration0).get(anyString() , anyString());
      URI uRI0 = FileSystem.getDefaultUri(configuration0);
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = mock(ExtendedFileSystem.class, new ViolatedAssumptionAnswer());
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, configuration1, cacheManager0, extendedFileSystem0, false);
      boolean boolean0 = fileMergeCachingFileSystem0.isCacheValidationEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("2*xLD").when(configuration0).get(anyString() , anyString());
      URI uRI0 = FileSystem.getDefaultUri(configuration0);
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = mock(ExtendedFileSystem.class, new ViolatedAssumptionAnswer());
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, configuration1, cacheManager0, extendedFileSystem0, false);
      try { 
        fileMergeCachingFileSystem0.openFile((Path) null, (HiveFileContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCachingFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("com.sun.security.auth.module.UnixLoginModule").when(configuration0).get(anyString() , anyString());
      URI uRI0 = FileSystem.getDefaultUri(configuration0);
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = mock(ExtendedFileSystem.class, new ViolatedAssumptionAnswer());
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = null;
      try {
        fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, configuration1, (CacheManager) null, extendedFileSystem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // cacheManager is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("+n").when(configuration0).get(anyString() , anyString());
      URI uRI0 = FileSystem.getDefaultUri(configuration0);
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = mock(ExtendedFileSystem.class, new ViolatedAssumptionAnswer());
      doReturn((FSDataInputStream) null).when(extendedFileSystem0).openFile(any(org.apache.hadoop.fs.Path.class) , any(com.facebook.presto.hive.HiveFileContext.class));
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, configuration1, cacheManager0, extendedFileSystem0, false);
      HiveFileContext hiveFileContext0 = mock(HiveFileContext.class, new ViolatedAssumptionAnswer());
      doReturn((CacheQuota) null).when(hiveFileContext0).getCacheQuota();
      doReturn(true).when(hiveFileContext0).isCacheable();
      try { 
        fileMergeCachingFileSystem0.openFile((Path) null, hiveFileContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // In is not an instance of Seekable or PositionedReadable
         //
         verifyException("org.apache.hadoop.fs.FSDataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("+n").when(configuration0).get(anyString() , anyString());
      URI uRI0 = FileSystem.getDefaultUri(configuration0);
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      Configuration configuration2 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager1 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = mock(ExtendedFileSystem.class, new ViolatedAssumptionAnswer());
      doReturn((FSDataInputStream) null).when(extendedFileSystem0).openFile(any(org.apache.hadoop.fs.Path.class) , any(com.facebook.presto.hive.HiveFileContext.class));
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, configuration2, cacheManager1, extendedFileSystem0, true);
      FileMergeCachingFileSystem fileMergeCachingFileSystem1 = new FileMergeCachingFileSystem(uRI0, configuration1, cacheManager0, fileMergeCachingFileSystem0, false);
      HiveFileContext hiveFileContext0 = mock(HiveFileContext.class, new ViolatedAssumptionAnswer());
      doReturn((CacheQuota) null).when(hiveFileContext0).getCacheQuota();
      doReturn(false, true).when(hiveFileContext0).isCacheable();
      try { 
        fileMergeCachingFileSystem1.openFile((Path) null, hiveFileContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // In is not an instance of Seekable or PositionedReadable
         //
         verifyException("org.apache.hadoop.fs.FSDataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("+n").when(configuration0).get(anyString() , anyString());
      URI uRI0 = FileSystem.getDefaultUri(configuration0);
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = mock(ExtendedFileSystem.class, new ViolatedAssumptionAnswer());
      doReturn((FSDataInputStream) null).when(extendedFileSystem0).openFile(any(org.apache.hadoop.fs.Path.class) , any(com.facebook.presto.hive.HiveFileContext.class));
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, configuration1, cacheManager0, extendedFileSystem0, true);
      HiveFileContext hiveFileContext0 = mock(HiveFileContext.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(hiveFileContext0).isCacheable();
      fileMergeCachingFileSystem0.openFile((Path) null, hiveFileContext0);
      assertTrue(fileMergeCachingFileSystem0.isCacheValidationEnabled());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn("+n").when(configuration0).get(anyString() , anyString());
      URI uRI0 = FileSystem.getDefaultUri(configuration0);
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = mock(ExtendedFileSystem.class, new ViolatedAssumptionAnswer());
      FileMergeCachingFileSystem fileMergeCachingFileSystem0 = new FileMergeCachingFileSystem(uRI0, configuration1, cacheManager0, extendedFileSystem0, true);
      boolean boolean0 = fileMergeCachingFileSystem0.isCacheValidationEnabled();
      assertTrue(boolean0);
  }
}
