/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:12:32 GMT 2021
 */

package com.facebook.presto.cache.filemerge;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cache.CacheManager;
import com.facebook.presto.cache.CacheResult;
import com.facebook.presto.cache.filemerge.FileMergeCachingInputStream;
import com.facebook.presto.hive.CacheQuota;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileMergeCachingInputStream_ESTest extends FileMergeCachingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.CACHE_QUOTA_EXCEED;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, true);
      byte[] byteArray0 = new byte[8];
      fileMergeCachingInputStream0.readFully((-944L), byteArray0, (int) (byte)0, (int) (byte) (-1));
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.HIT;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0, (CacheResult) null).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = CacheQuota.NO_CACHE_CONSTRAINTS;
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, true);
      byte[] byteArray0 = new byte[1];
      fileMergeCachingInputStream0.readFully(2631L, byteArray0);
      // Undeclared exception!
      try { 
        fileMergeCachingInputStream0.readFully((-1L), byteArray0, (-905), (-905));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCachingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.MISS;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, true);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        fileMergeCachingInputStream0.readFully(1406L, byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.airlift.slice.Slices
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCachingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = null;
      try {
        fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, (CacheManager) null, path0, cacheQuota0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // cacheManager is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = null;
      try {
        fileMergeCachingInputStream0 = new FileMergeCachingInputStream((FSDataInputStream) null, (CacheManager) null, path0, cacheQuota0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // In is not an instance of Seekable or PositionedReadable
         //
         verifyException("org.apache.hadoop.fs.FSDataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.HIT;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = CacheQuota.NO_CACHE_CONSTRAINTS;
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)123;
      // Undeclared exception!
      try { 
        fileMergeCachingInputStream0.readFully((-1L), byteArray0, (int) (byte)2, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 0
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.HIT;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, true);
      byte[] byteArray0 = new byte[7];
      fileMergeCachingInputStream0.readFully(0L, byteArray0, 0, 0);
      assertEquals(0L, fileMergeCachingInputStream0.getPos());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.HIT;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, false);
      byte[] byteArray0 = new byte[2];
      fileMergeCachingInputStream0.readFully(3L, byteArray0, 10, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.HIT;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = CacheQuota.NO_CACHE_CONSTRAINTS;
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, true);
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try { 
        fileMergeCachingInputStream0.readFully(2631L, byteArray0, (int) (byte)0, 155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCachingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.HIT;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = CacheQuota.NO_CACHE_CONSTRAINTS;
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      // Undeclared exception!
      try { 
        fileMergeCachingInputStream0.readFully(2631L, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // corrupted buffer at position 0
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheResult cacheResult0 = CacheResult.MISS;
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn(cacheResult0).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, false);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        fileMergeCachingInputStream0.readFully(2242L, byteArray0, (int) (byte)41, (int) (byte)43);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.airlift.slice.Slices
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCachingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FSDataInputStream fSDataInputStream0 = mock(FSDataInputStream.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      doReturn((CacheResult) null).when(cacheManager0).get(any(com.facebook.presto.cache.FileReadRequest.class) , any(byte[].class) , anyInt() , any(com.facebook.presto.hive.CacheQuota.class));
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      CacheQuota cacheQuota0 = mock(CacheQuota.class, new ViolatedAssumptionAnswer());
      FileMergeCachingInputStream fileMergeCachingInputStream0 = new FileMergeCachingInputStream(fSDataInputStream0, cacheManager0, path0, cacheQuota0, false);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        fileMergeCachingInputStream0.readFully(2196L, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCachingInputStream", e);
      }
  }
}
