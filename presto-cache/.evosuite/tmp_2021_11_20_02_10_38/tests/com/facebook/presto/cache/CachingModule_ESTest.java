/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:20:04 GMT 2021
 */

package com.facebook.presto.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cache.CacheConfig;
import com.facebook.presto.cache.CacheManager;
import com.facebook.presto.cache.CacheStats;
import com.facebook.presto.cache.CacheType;
import com.facebook.presto.cache.CachingModule;
import com.facebook.presto.cache.alluxio.AlluxioCacheConfig;
import com.facebook.presto.cache.filemerge.FileMergeCacheConfig;
import com.google.inject.Binder;
import com.google.inject.binder.AnnotatedBindingBuilder;
import io.airlift.units.Duration;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CachingModule_ESTest extends CachingModule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CachingModule cachingModule0 = new CachingModule();
      CacheType cacheType0 = CacheType.FILE_MERGE;
      URI uRI0 = MockURI.create(".pebv;?wdRbvw");
      CacheConfig cacheConfig0 = mock(CacheConfig.class, new ViolatedAssumptionAnswer());
      doReturn(uRI0).when(cacheConfig0).getBaseDirectory();
      doReturn(cacheType0).when(cacheConfig0).getCacheType();
      doReturn(true).when(cacheConfig0).isCachingEnabled();
      FileMergeCacheConfig fileMergeCacheConfig0 = new FileMergeCacheConfig();
      CacheStats cacheStats0 = mock(CacheStats.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cachingModule0.createCacheManager(cacheConfig0, fileMergeCacheConfig0, cacheStats0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CachingModule cachingModule0 = new CachingModule();
      CacheType cacheType0 = CacheType.FILE_MERGE;
      CacheConfig cacheConfig0 = mock(CacheConfig.class, new ViolatedAssumptionAnswer());
      doReturn(cacheType0).when(cacheConfig0).getCacheType();
      doReturn(true).when(cacheConfig0).isCachingEnabled();
      FileMergeCacheConfig fileMergeCacheConfig0 = mock(FileMergeCacheConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Duration) null).when(fileMergeCacheConfig0).getCacheTtl();
      doReturn(0).when(fileMergeCacheConfig0).getMaxCachedEntries();
      CacheStats cacheStats0 = mock(CacheStats.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cachingModule0.createCacheManager(cacheConfig0, fileMergeCacheConfig0, cacheStats0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCacheManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CachingModule cachingModule0 = new CachingModule();
      CacheType cacheType0 = CacheType.ALLUXIO;
      CacheConfig cacheConfig0 = mock(CacheConfig.class, new ViolatedAssumptionAnswer());
      doReturn(cacheType0).when(cacheConfig0).getCacheType();
      doReturn(true).when(cacheConfig0).isCachingEnabled();
      FileMergeCacheConfig fileMergeCacheConfig0 = mock(FileMergeCacheConfig.class, new ViolatedAssumptionAnswer());
      CacheStats cacheStats0 = mock(CacheStats.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = cachingModule0.createCacheManager(cacheConfig0, fileMergeCacheConfig0, cacheStats0);
      assertNotNull(cacheManager0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CachingModule cachingModule0 = new CachingModule();
      CacheType cacheType0 = CacheType.FILE_MERGE;
      CacheConfig cacheConfig0 = mock(CacheConfig.class, new ViolatedAssumptionAnswer());
      doReturn(cacheType0).when(cacheConfig0).getCacheType();
      doReturn(true).when(cacheConfig0).isCachingEnabled();
      FileMergeCacheConfig fileMergeCacheConfig0 = mock(FileMergeCacheConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Duration) null).when(fileMergeCacheConfig0).getCacheTtl();
      doReturn(0).when(fileMergeCacheConfig0).getMaxCachedEntries();
      CacheStats cacheStats0 = mock(CacheStats.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cachingModule0.createCacheManager(cacheConfig0, fileMergeCacheConfig0, cacheStats0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cache.filemerge.FileMergeCacheManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CachingModule cachingModule0 = new CachingModule();
      CacheConfig cacheConfig0 = mock(CacheConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(cacheConfig0).isCachingEnabled();
      FileMergeCacheConfig fileMergeCacheConfig0 = mock(FileMergeCacheConfig.class, new ViolatedAssumptionAnswer());
      CacheStats cacheStats0 = mock(CacheStats.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = cachingModule0.createCacheManager(cacheConfig0, fileMergeCacheConfig0, cacheStats0);
      assertNotNull(cacheManager0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CachingModule cachingModule0 = new CachingModule();
      AnnotatedBindingBuilder<AlluxioCacheConfig> annotatedBindingBuilder0 = (AnnotatedBindingBuilder<AlluxioCacheConfig>) mock(AnnotatedBindingBuilder.class, new ViolatedAssumptionAnswer());
      Binder binder0 = mock(Binder.class, new ViolatedAssumptionAnswer());
      doReturn(annotatedBindingBuilder0).when(binder0).bind(nullable(java.lang.Class.class));
      doReturn((Binder) null).when(binder0).skipSources(any(java.lang.Class[].class));
      // Undeclared exception!
      try { 
        cachingModule0.configure(binder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.inject.internal.RealMultibinder", e);
      }
  }
}
