/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:09:55 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cassandra.CassandraTableHandle;
import com.facebook.presto.spi.SchemaTableName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CassandraTableHandle_ESTest extends CassandraTableHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("", "", "");
      String string0 = cassandraTableHandle0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("", "", "com.facebook.presto.cassandra.CassandraTableHandle");
      String string0 = cassandraTableHandle0.getSchemaName();
      assertEquals("", cassandraTableHandle0.getConnectorId());
      assertEquals("", string0);
      assertEquals("com.facebook.presto.cassandra.CassandraTableHandle", cassandraTableHandle0.getTableName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("", "SchemaTableName should have exactly 2 parts", "SchemaTableName should have exactly 2 parts");
      String string0 = cassandraTableHandle0.getConnectorId();
      assertEquals("SchemaTableName should have exactly 2 parts", cassandraTableHandle0.getSchemaName());
      assertEquals("SchemaTableName should have exactly 2 parts", cassandraTableHandle0.getTableName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("connectorId is null", "connectorId is null", "");
      // Undeclared exception!
      try { 
        cassandraTableHandle0.getSchemaTableName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tableName is empty
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = null;
      try {
        cassandraTableHandle0 = new CassandraTableHandle((String) null, "C*j*", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectorId is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("Gc{MQ", "ScheDahblName hould have exactl 2pmrts", "ScheDahblName hould have exactl 2pmrts");
      CassandraTableHandle cassandraTableHandle1 = new CassandraTableHandle("Gc{MQ", "ScheDahblName hould have exactl 2pmrts", "Gc{MQ");
      boolean boolean0 = cassandraTableHandle1.equals(cassandraTableHandle0);
      assertEquals("Gc{MQ", cassandraTableHandle0.getConnectorId());
      assertEquals("ScheDahblName hould have exactl 2pmrts", cassandraTableHandle1.getSchemaName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("Gc{MQ", "ScheDahblName hould have exactl 2pmrts", "ScheDahblName hould have exactl 2pmrts");
      CassandraTableHandle cassandraTableHandle1 = new CassandraTableHandle("Gc{MQ", "ScheDahblName hould have exactl 2pmrts", "ScheDahblName hould have exactl 2pmrts");
      boolean boolean0 = cassandraTableHandle0.equals(cassandraTableHandle1);
      assertEquals("ScheDahblName hould have exactl 2pmrts", cassandraTableHandle1.getTableName());
      assertEquals("ScheDahblName hould have exactl 2pmrts", cassandraTableHandle1.getSchemaName());
      assertTrue(boolean0);
      assertEquals("Gc{MQ", cassandraTableHandle1.getConnectorId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("dL+Onq%3", "schemaTableName", "*");
      CassandraTableHandle cassandraTableHandle1 = new CassandraTableHandle("dL+Onq%3", "*", "schemaTableName");
      boolean boolean0 = cassandraTableHandle0.equals(cassandraTableHandle1);
      assertEquals("*", cassandraTableHandle1.getSchemaName());
      assertEquals("dL+Onq%3", cassandraTableHandle1.getConnectorId());
      assertFalse(boolean0);
      assertEquals("schemaTableName", cassandraTableHandle1.getTableName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("[-", "[-", "[-");
      CassandraTableHandle cassandraTableHandle1 = new CassandraTableHandle("}{q2.DCU", "[-:[-:[-", "uhEWIs~9:DTdUZ");
      boolean boolean0 = cassandraTableHandle0.equals(cassandraTableHandle1);
      assertEquals("}{q2.DCU", cassandraTableHandle1.getConnectorId());
      assertFalse(boolean0);
      assertEquals("[-:[-:[-", cassandraTableHandle1.getSchemaName());
      assertEquals("uhEWIs~9:DTdUZ", cassandraTableHandle1.getTableName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("[-", "[-", "[-");
      boolean boolean0 = cassandraTableHandle0.equals("}{q2.DCU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("[-", "[-", "[-");
      boolean boolean0 = cassandraTableHandle0.equals(cassandraTableHandle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("[-", "[-", "[-");
      boolean boolean0 = cassandraTableHandle0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("[-", "[-", "[-");
      cassandraTableHandle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("0xzv", "0xzv", "0xzv");
      String string0 = cassandraTableHandle0.getTableName();
      assertEquals("0xzv", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("0xzv", "0xzv", "0xzv");
      String string0 = cassandraTableHandle0.getSchemaName();
      assertEquals("0xzv", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("[-", "[-", "[-");
      String string0 = cassandraTableHandle0.toString();
      assertEquals("[-:[-:[-", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("[-", "[-", "[-");
      String string0 = cassandraTableHandle0.getConnectorId();
      assertEquals("[-", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("C/", ":", "70bqO]kyp");
      SchemaTableName schemaTableName0 = cassandraTableHandle0.getSchemaTableName();
      assertEquals("70bqo]kyp", schemaTableName0.getTableName());
      assertEquals("C/", cassandraTableHandle0.getConnectorId());
      assertEquals(":", schemaTableName0.getSchemaName());
  }
}
