/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:11:05 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cassandra.RandomPartitionerTokenRing;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomPartitionerTokenRing_ESTest extends RandomPartitionerTokenRing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      double double0 = randomPartitionerTokenRing0.INSTANCE.getRingFraction("1", "47");
      assertEquals(2.7036370068912613E-37, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.getTokenCountInRange("com.facebook.presto.cassandra.RandomPartitionerTokenRing", "m0*Q\"C7nju2;t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.getTokenCountInRange("1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.INSTANCE.getRingFraction((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.getRingFraction("6", "-7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // token [-7] must be greater or equal than -1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      BigInteger bigInteger0 = randomPartitionerTokenRing0.getTokenCountInRange("6", "6");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.INSTANCE.getTokenCountInRange("6", "-7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // token [-7] must be greater or equal than -1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      BigInteger bigInteger0 = randomPartitionerTokenRing0.getTokenCountInRange("4", "6");
      assertEquals((byte)2, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      double double0 = randomPartitionerTokenRing0.getRingFraction("6", "6");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      BigInteger bigInteger0 = randomPartitionerTokenRing0.getTokenCountInRange("6", "4");
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.getRingFraction("", "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
