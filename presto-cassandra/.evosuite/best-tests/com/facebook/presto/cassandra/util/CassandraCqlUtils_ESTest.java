/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:05:24 GMT 2021
 */

package com.facebook.presto.cassandra.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.datastax.driver.core.querybuilder.Select;
import com.facebook.presto.cassandra.CassandraColumnHandle;
import com.facebook.presto.cassandra.CassandraTableHandle;
import com.facebook.presto.cassandra.CassandraType;
import com.facebook.presto.cassandra.util.CassandraCqlUtils;
import com.google.common.collect.ImmutableList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CassandraCqlUtils_ESTest extends CassandraCqlUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = CassandraCqlUtils.validTableName("UUID");
      assertEquals("\"UUID\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = CassandraCqlUtils.validSchemaName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = CassandraCqlUtils.sqlNameToCqlName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("", "5<Sw=!6\u0007", "5<Sw=!6\u0007");
      Vector<CassandraColumnHandle> vector0 = new Vector<CassandraColumnHandle>();
      Select select0 = CassandraCqlUtils.selectFrom(cassandraTableHandle0, vector0);
      assertEquals("\"5<Sw=!6\u0007\"", select0.getKeyspace());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("'I=2/qk9[teo$D\"D2;[l'", "I=2/qk9[teo$D\"D2;[l", "I=2/qk9[teo$D\"D2;[l");
      CassandraType cassandraType0 = CassandraType.TIMEUUID;
      Vector<CassandraType> vector0 = new Vector<CassandraType>(0, 0);
      ImmutableList<CassandraType> immutableList0 = ImmutableList.sortedCopyOf((Iterable<? extends CassandraType>) vector0);
      CassandraColumnHandle cassandraColumnHandle0 = new CassandraColumnHandle("'I=2/qk9[teo$D\"D2;[l'", "'I=2/qk9[teo$D\"D2;[l'", 0, cassandraType0, immutableList0, false, false, false, true);
      ImmutableList<CassandraColumnHandle> immutableList1 = ImmutableList.of(cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0);
      Select select0 = CassandraCqlUtils.selectDistinctFrom(cassandraTableHandle0, immutableList1);
      assertEquals("\"I=2/qk9[teo$D\"D2;[l\"", select0.getKeyspace());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("'I=2/qk9[teo$D\"D2;[l'", "I=2/qk9[teo$D\"D2;[l", "I=2/qk9[teo$D\"D2;[l");
      Select select0 = CassandraCqlUtils.selectCountAllFrom(cassandraTableHandle0);
      assertEquals("\"I=2/qk9[teo$D\"D2;[l\"", select0.getKeyspace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Select.SelectionOrAlias select_SelectionOrAlias0 = new Select.SelectionOrAlias();
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("", "", "");
      Select select0 = CassandraCqlUtils.from(select_SelectionOrAlias0, cassandraTableHandle0);
      assertEquals("", select0.getKeyspace());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TIMESTAMP;
      String string0 = CassandraCqlUtils.cqlValue((String) null, cassandraType0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TIMESTAMP;
      String string0 = CassandraCqlUtils.cqlValue("", cassandraType0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.validTableName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.validSchemaName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.validColumnName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.toCQLCompatibleString((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.sqlNameToCqlName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.select((List<CassandraColumnHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.quoteStringLiteralForJson((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.JsonStringEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.quoteStringLiteral((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.cqlNameToSqlName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<CassandraColumnHandle> vector0 = new Vector<CassandraColumnHandle>();
      CassandraType cassandraType0 = CassandraType.DOUBLE;
      ImmutableList<CassandraType> immutableList0 = ImmutableList.of(cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0);
      CassandraColumnHandle cassandraColumnHandle0 = new CassandraColumnHandle("*", "", 3192, cassandraType0, immutableList0, false, true, true, false);
      vector0.add(cassandraColumnHandle0);
      Select.Selection select_Selection0 = CassandraCqlUtils.select(vector0);
      assertNotNull(select_Selection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = CassandraCqlUtils.validColumnName("Zly+!\"6u3");
      assertEquals("\"Zly+!\"6u3\"", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = CassandraCqlUtils.validColumnName("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = CassandraCqlUtils.validSchemaName("com.facebook.presto.cassandra.CassandraType@0000000001");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = CassandraCqlUtils.validTableName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = CassandraCqlUtils.toCQLCompatibleString("DGhYiHl");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.INET;
      // Undeclared exception!
      try { 
        CassandraCqlUtils.cqlValue("", cassandraType0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.VARCHAR;
      String string0 = CassandraCqlUtils.cqlValue("SQW!ty8!b#*+qpx", cassandraType0);
      assertEquals("'SQW!ty8!b#*+qpx'", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TEXT;
      // Undeclared exception!
      try { 
        CassandraCqlUtils.cqlValue((String) null, cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.ASCII;
      String string0 = CassandraCqlUtils.cqlValue("QM5Xhpv/9\"9^DR?", cassandraType0);
      assertEquals("'QM5Xhpv/9\"9^DR?'", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = CassandraCqlUtils.sqlNameToCqlName("DGhYiHl");
      assertEquals("DGhYiHl", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = CassandraCqlUtils.cqlNameToSqlName("");
      assertEquals("__empty__", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = CassandraCqlUtils.cqlNameToSqlName("\"Bg&l1'mKvt#{-:\"");
      assertEquals("\"Bg&l1'mKvt#{-:\"", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = CassandraCqlUtils.validColumnName("__empty__");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.COUNTER;
      ImmutableList<CassandraType> immutableList0 = ImmutableList.of(cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0);
      CassandraColumnHandle cassandraColumnHandle0 = new CassandraColumnHandle("BR80cx}gIMGXnZK!x", "INTERNAL_SERVER_ERROR", 1475, cassandraType0, immutableList0, true, false, false, false);
      ImmutableList<CassandraColumnHandle> immutableList1 = ImmutableList.of(cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0);
      // Undeclared exception!
      try { 
        CassandraCqlUtils.appendSelectColumns((StringBuilder) null, immutableList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.selectCountAllFrom((CassandraTableHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<CassandraColumnHandle> vector0 = new Vector<CassandraColumnHandle>();
      StringBuilder stringBuilder0 = new StringBuilder(",mffMne");
      CassandraCqlUtils.appendSelectColumns(stringBuilder0, vector0);
      assertEquals(",mffMne", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = CassandraCqlUtils.quoteStringLiteralForJson("Bg&l1'mKvt#{-:");
      assertEquals("\"Bg&l1'mKvt#{-:\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = CassandraCqlUtils.quoteStringLiteral("com.facebook.presto.sql.parser.SqlBaseParser$ComparisonOperatorContext");
      assertEquals("'com.facebook.presto.sql.parser.SqlBaseParser$ComparisonOperatorContext'", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TEXT;
      ImmutableList<CassandraType> immutableList0 = ImmutableList.of(cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0);
      CassandraColumnHandle cassandraColumnHandle0 = new CassandraColumnHandle("COLUMNFAMILY", "", 1419, cassandraType0, immutableList0, true, true, true, true);
      CassandraColumnHandle[] cassandraColumnHandleArray0 = new CassandraColumnHandle[1];
      cassandraColumnHandleArray0[0] = cassandraColumnHandle0;
      ImmutableList<CassandraColumnHandle> immutableList1 = ImmutableList.of(cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandle0, cassandraColumnHandleArray0);
      // Undeclared exception!
      try { 
        CassandraCqlUtils.selectDistinctFrom((CassandraTableHandle) null, immutableList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CassandraTableHandle cassandraTableHandle0 = new CassandraTableHandle("__empty__", "__empty__", "bOP`4Jk");
      // Undeclared exception!
      try { 
        CassandraCqlUtils.from((Select.Selection) null, cassandraTableHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraCqlUtils.selectFrom((CassandraTableHandle) null, (List<CassandraColumnHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }
}
