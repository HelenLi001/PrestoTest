/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:16:45 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.datastax.driver.core.BatchStatement;
import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.ConsistencyLevel;
import com.datastax.driver.core.SimpleStatement;
import com.datastax.driver.core.Statement;
import com.datastax.driver.core.WriteType;
import com.datastax.driver.core.exceptions.DriverException;
import com.datastax.driver.core.policies.RetryPolicy;
import com.facebook.presto.cassandra.BackoffRetryPolicy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BackoffRetryPolicy_ESTest extends BackoffRetryPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.LOCAL_QUORUM;
      WriteType writeType0 = WriteType.UNLOGGED_BATCH;
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.onWriteTimeout((Statement) null, consistencyLevel0, writeType0, 0, 1779, 1779);
      assertEquals(RetryPolicy.RetryDecision.Type.RETHROW, retryPolicy_RetryDecision0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.LOCAL_QUORUM;
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.INSTANCE.onReadTimeout((Statement) null, consistencyLevel0, 1779, 0, false, 0);
      assertEquals(RetryPolicy.RetryDecision.Type.RETHROW, retryPolicy_RetryDecision0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.LOCAL_QUORUM;
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.onReadTimeout((Statement) null, consistencyLevel0, 0, 1705, false, 0);
      assertEquals(RetryPolicy.RetryDecision.Type.RETRY, retryPolicy_RetryDecision0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      BatchStatement batchStatement0 = new BatchStatement();
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.ANY;
      // Undeclared exception!
      try { 
        backoffRetryPolicy0.onUnavailable(batchStatement0, consistencyLevel0, (-3041), 476, (-2315));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      Object[] objectArray0 = new Object[1];
      SimpleStatement simpleStatement0 = new SimpleStatement(".7W=M", objectArray0);
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.ANY;
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.onUnavailable(simpleStatement0, consistencyLevel0, 1260, 1260, 10);
      assertEquals(RetryPolicy.RetryDecision.Type.RETHROW, retryPolicy_RetryDecision0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.EACH_QUORUM;
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.onUnavailable((Statement) null, consistencyLevel0, 0, 0, 472);
      assertEquals(RetryPolicy.RetryDecision.Type.RETHROW, retryPolicy_RetryDecision0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.LOCAL_QUORUM;
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.INSTANCE.onUnavailable((Statement) null, consistencyLevel0, 0, 1705, 0);
      assertEquals(RetryPolicy.RetryDecision.Type.RETRY, retryPolicy_RetryDecision0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.EACH_QUORUM;
      WriteType writeType0 = WriteType.CDC;
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.onWriteTimeout((Statement) null, consistencyLevel0, writeType0, 0, 0, 4422);
      assertNull(retryPolicy_RetryDecision0.getRetryConsistencyLevel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      ConsistencyLevel consistencyLevel0 = ConsistencyLevel.EACH_QUORUM;
      DriverException driverException0 = new DriverException("Mwm");
      RetryPolicy.RetryDecision retryPolicy_RetryDecision0 = backoffRetryPolicy0.onRequestError((Statement) null, consistencyLevel0, driverException0, 1);
      assertEquals(ConsistencyLevel.EACH_QUORUM, retryPolicy_RetryDecision0.getRetryConsistencyLevel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      backoffRetryPolicy0.close();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BackoffRetryPolicy backoffRetryPolicy0 = BackoffRetryPolicy.INSTANCE;
      backoffRetryPolicy0.init((Cluster) null);
  }
}
