/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Nov 21 02:03:46 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CassandraRecordCursor_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.facebook.presto.cassandra.CassandraRecordCursor"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/mnt/c/Users/Helen/Documents/DataScience18668/GroupProject/project/presto/presto-cassandra"); 
    java.lang.System.setProperty("user.home", "/home/helen"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "helen"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
    java.lang.System.setProperty("sun.management.compiler", "HotSpot 64-Bit Tiered Compilers"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CassandraRecordCursor_ESTest_scaffolding.class.getClassLoader() ,
      "com.facebook.presto.common.type.AbstractType",
      "com.facebook.presto.common.type.TypeSignatureParameter$1",
      "com.datastax.driver.core.GettableData",
      "com.datastax.driver.core.RegularStatement",
      "com.datastax.driver.core.ColumnDefinitions",
      "com.facebook.presto.common.type.VariableWidthType",
      "com.facebook.presto.common.type.TypeSignature",
      "com.datastax.driver.core.PagingIterable",
      "com.facebook.presto.spi.SchemaTableName",
      "com.facebook.presto.spi.SchemaNotFoundException",
      "com.facebook.presto.common.type.TypeSignatureBase",
      "com.facebook.presto.cassandra.CassandraSession",
      "com.datastax.driver.core.VersionNumber",
      "com.facebook.presto.common.type.TinyintType",
      "com.facebook.presto.common.block.BlockBuilder",
      "com.facebook.presto.common.block.UncheckedBlock",
      "com.facebook.presto.common.type.BigintType",
      "com.facebook.presto.cassandra.FullCassandraType",
      "com.facebook.presto.common.type.VarcharType",
      "com.facebook.presto.common.type.RealType",
      "com.facebook.presto.spi.RecordCursor",
      "com.facebook.presto.common.type.SmallintType",
      "com.facebook.presto.common.type.AbstractIntType",
      "com.datastax.driver.core.Host",
      "com.datastax.driver.core.ExecutionInfo",
      "com.facebook.presto.common.type.VarbinaryType",
      "com.facebook.presto.spi.ErrorCodeSupplier",
      "com.facebook.presto.common.type.AbstractLongType",
      "com.facebook.presto.cassandra.SizeEstimate",
      "com.datastax.driver.core.Statement",
      "com.facebook.presto.common.GenericInternalException",
      "com.facebook.presto.common.type.TimestampType",
      "com.datastax.driver.core.TokenRange",
      "com.datastax.driver.core.GettableByIndexData",
      "com.facebook.presto.spi.NotFoundException",
      "io.airlift.slice.Slice",
      "com.facebook.presto.cassandra.CassandraType",
      "com.facebook.presto.common.type.TypeSignatureParameter",
      "com.datastax.driver.core.Row",
      "com.facebook.presto.cassandra.CassandraRecordCursor$1",
      "com.facebook.presto.common.type.BooleanType",
      "com.facebook.presto.spi.PrestoException",
      "com.datastax.driver.core.PreparedStatement",
      "com.facebook.presto.common.type.AbstractVariableWidthType",
      "com.datastax.driver.core.ResultSet",
      "com.facebook.presto.common.type.IntegerType",
      "com.datastax.driver.core.GettableByNameData",
      "com.facebook.presto.common.type.ParameterKind",
      "com.facebook.presto.common.type.Type",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.ListenableFuture",
      "com.facebook.presto.common.type.AbstractVarcharType",
      "com.facebook.presto.cassandra.CassandraPartition",
      "com.facebook.presto.cassandra.CassandraRecordCursor",
      "com.facebook.presto.cassandra.CassandraTable",
      "com.facebook.presto.spi.TableNotFoundException",
      "com.facebook.presto.common.type.FixedWidthType",
      "com.datastax.driver.core.LocalDate",
      "com.facebook.presto.common.block.Block",
      "com.facebook.presto.common.type.DateType",
      "com.facebook.presto.common.type.DoubleType"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.datastax.driver.core.ResultSet", false, CassandraRecordCursor_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.cassandra.CassandraSession", false, CassandraRecordCursor_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CassandraRecordCursor_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.facebook.presto.cassandra.CassandraRecordCursor",
      "com.facebook.presto.common.type.AbstractType",
      "com.facebook.presto.common.type.AbstractVariableWidthType",
      "com.facebook.presto.common.type.AbstractVarcharType",
      "com.facebook.presto.common.type.TypeSignature",
      "com.facebook.presto.common.type.TypeSignatureParameter",
      "com.facebook.presto.common.type.ParameterKind",
      "com.facebook.presto.common.type.TypeSignatureBase",
      "com.facebook.presto.common.type.TypeSignatureParameter$1",
      "com.facebook.presto.common.type.VarcharType",
      "com.facebook.presto.common.type.AbstractLongType",
      "com.facebook.presto.common.type.BigintType",
      "com.facebook.presto.common.type.VarbinaryType",
      "com.facebook.presto.common.type.BooleanType",
      "com.facebook.presto.common.type.DoubleType",
      "com.facebook.presto.common.type.AbstractIntType",
      "com.facebook.presto.common.type.RealType",
      "com.facebook.presto.common.type.IntegerType",
      "com.facebook.presto.common.type.SmallintType",
      "com.facebook.presto.common.type.TinyintType",
      "com.facebook.presto.common.type.DateType",
      "com.facebook.presto.common.type.TimestampType",
      "com.facebook.presto.cassandra.CassandraType",
      "com.facebook.presto.cassandra.CassandraRecordCursor$1",
      "com.datastax.driver.core.VersionNumber",
      "com.datastax.driver.$internal.com.google.common.collect.ImmutableMap",
      "com.datastax.driver.$internal.com.google.common.collect.ImmutableMap$Builder",
      "com.datastax.driver.$internal.com.google.common.collect.CollectPreconditions",
      "com.datastax.driver.$internal.com.google.common.collect.ImmutableCollection$Builder",
      "com.datastax.driver.$internal.com.google.common.collect.RegularImmutableMap",
      "com.datastax.driver.$internal.com.google.common.base.Preconditions",
      "com.datastax.driver.$internal.com.google.common.collect.AbstractMapEntry",
      "com.datastax.driver.$internal.com.google.common.collect.ImmutableEntry",
      "com.datastax.driver.$internal.com.google.common.collect.ImmutableMapEntry",
      "com.datastax.driver.$internal.com.google.common.collect.Hashing",
      "com.datastax.driver.core.ProtocolVersion",
      "com.datastax.driver.core.DataType$Name",
      "com.facebook.presto.cassandra.CassandraType$1",
      "org.openjdk.jol.info.ClassLayout",
      "org.openjdk.jol.layouters.CurrentLayouter",
      "org.openjdk.jol.info.ClassData",
      "org.openjdk.jol.info.FieldData",
      "org.openjdk.jol.util.VMSupport$1",
      "org.openjdk.jol.util.VMSupport$2",
      "org.openjdk.jol.util.VMSupport$VMOptions",
      "org.openjdk.jol.util.MathUtil",
      "org.openjdk.jol.util.VMSupport$MyObject1",
      "org.openjdk.jol.util.VMSupport",
      "org.openjdk.jol.datamodel.CurrentDataModel",
      "org.openjdk.jol.info.FieldLayout",
      "io.airlift.slice.Slice",
      "io.airlift.slice.Slices",
      "com.google.common.base.Splitter",
      "com.google.common.base.CharMatcher",
      "com.google.common.base.CharMatcher$FastMatcher",
      "com.google.common.base.CharMatcher$Is",
      "com.google.common.base.Preconditions",
      "com.google.common.base.Splitter$1",
      "com.google.common.base.CharMatcher$NamedFastMatcher",
      "com.google.common.base.CharMatcher$None",
      "com.google.common.base.Splitter$5",
      "com.google.common.base.AbstractIterator",
      "com.google.common.base.Splitter$SplittingIterator",
      "com.google.common.base.Splitter$1$1",
      "com.google.common.base.AbstractIterator$State",
      "com.google.common.base.AbstractIterator$1",
      "com.google.common.net.InetAddresses",
      "io.airlift.slice.JvmUtils",
      "com.facebook.presto.cassandra.util.CassandraCqlUtils",
      "com.fasterxml.jackson.core.io.CharTypes",
      "com.fasterxml.jackson.core.io.JsonStringEncoder",
      "com.datastax.driver.core.utils.Bytes"
    );
  }
}
