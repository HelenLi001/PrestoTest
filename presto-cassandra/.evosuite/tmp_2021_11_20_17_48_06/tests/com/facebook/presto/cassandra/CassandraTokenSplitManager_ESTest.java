/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:01:58 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cassandra.CassandraClientConfig;
import com.facebook.presto.cassandra.CassandraSession;
import com.facebook.presto.cassandra.CassandraTokenSplitManager;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.collect.ImmutableList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CassandraTokenSplitManager_ESTest extends CassandraTokenSplitManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      CassandraTokenSplitManager.TokenSplit cassandraTokenSplitManager_TokenSplit0 = new CassandraTokenSplitManager.TokenSplit("owner cannot be present with runAsInvoker", "", vector0);
      assertEquals("owner cannot be present with runAsInvoker", cassandraTokenSplitManager_TokenSplit0.getStartToken());
      assertEquals("", cassandraTokenSplitManager_TokenSplit0.getEndToken());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CassandraClientConfig cassandraClientConfig0 = new CassandraClientConfig();
      CassandraTokenSplitManager cassandraTokenSplitManager0 = null;
      try {
        cassandraTokenSplitManager0 = new CassandraTokenSplitManager((CassandraSession) null, cassandraClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // session is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CassandraTokenSplitManager cassandraTokenSplitManager0 = null;
      try {
        cassandraTokenSplitManager0 = new CassandraTokenSplitManager((CassandraSession) null, 0, (Optional<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // session is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Iterator<String> iterator0 = objectNode0.fieldNames();
      ImmutableList<String> immutableList0 = ImmutableList.copyOf((Iterator<? extends String>) iterator0);
      CassandraTokenSplitManager.TokenSplit cassandraTokenSplitManager_TokenSplit0 = new CassandraTokenSplitManager.TokenSplit("+Lp_?P", "+Lp_?P", immutableList0);
      List<String> list0 = cassandraTokenSplitManager_TokenSplit0.getHosts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Iterator<String> iterator0 = objectNode0.fieldNames();
      ImmutableList<String> immutableList0 = ImmutableList.copyOf((Iterator<? extends String>) iterator0);
      CassandraTokenSplitManager.TokenSplit cassandraTokenSplitManager_TokenSplit0 = new CassandraTokenSplitManager.TokenSplit("+Lp_?P", "+Lp_?P", immutableList0);
      String string0 = cassandraTokenSplitManager_TokenSplit0.getStartToken();
      assertEquals("+Lp_?P", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Iterator<String> iterator0 = objectNode0.fieldNames();
      ImmutableList<String> immutableList0 = ImmutableList.copyOf((Iterator<? extends String>) iterator0);
      CassandraTokenSplitManager.TokenSplit cassandraTokenSplitManager_TokenSplit0 = new CassandraTokenSplitManager.TokenSplit("+Lp_?P", "+Lp_?P", immutableList0);
      String string0 = cassandraTokenSplitManager_TokenSplit0.getEndToken();
      assertEquals("+Lp_?P", string0);
  }
}
