/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:03:31 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.datastax.driver.core.DataType;
import com.datastax.driver.core.LocalDate;
import com.datastax.driver.core.ProtocolVersion;
import com.datastax.driver.core.Row;
import com.facebook.presto.cassandra.CassandraColumnHandle;
import com.facebook.presto.cassandra.CassandraType;
import com.facebook.presto.common.type.ArrayType;
import com.facebook.presto.common.type.BigintType;
import com.facebook.presto.common.type.BooleanType;
import com.facebook.presto.common.type.IntegerType;
import com.facebook.presto.common.type.JsonType;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.P4HyperLogLogType;
import com.facebook.presto.common.type.RealType;
import com.facebook.presto.common.type.SmallintType;
import com.facebook.presto.common.type.TimeType;
import com.facebook.presto.common.type.TimestampType;
import com.facebook.presto.common.type.TinyintType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.VarbinaryType;
import com.facebook.presto.spi.HostAddress;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.google.common.collect.ImmutableList;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import org.antlr.v4.runtime.CommonToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.testng.TestNG;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CassandraType_ESTest extends CassandraType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DATE;
      Type type0 = cassandraType0.getNativeType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V3;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      assertEquals(CassandraType.TEXT, cassandraType1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CassandraType[] cassandraTypeArray0 = CassandraType.values();
      assertEquals(23, cassandraTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      // Undeclared exception!
      try { 
        CassandraType.toCassandraType((Type) null, protocolVersion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.UUID;
      CassandraType cassandraType1 = CassandraType.DECIMAL;
      // Undeclared exception!
      try { 
        cassandraType1.getJavaValue(cassandraType0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        CassandraType.getCassandraType((DataType.Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.VARINT;
      // Undeclared exception!
      try { 
        CassandraType.buildArrayValue((Collection<?>) null, cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.LIST;
      int int0 = cassandraType0.getTypeArgumentSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.ASCII;
      int int0 = cassandraType0.getTypeArgumentSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TimeType timeType0 = TimeType.TIME;
      ProtocolVersion protocolVersion0 = ProtocolVersion.V4;
      // Undeclared exception!
      try { 
        CassandraType.toCassandraType(timeType0, protocolVersion0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unsupported type: time
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TIMESTAMP;
      Type type0 = cassandraType0.getNativeType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      assertEquals(CassandraType.TIMESTAMP, cassandraType1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.DATE;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      Type type0 = cassandraType0.getNativeType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V4;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      assertEquals(CassandraType.DATE, cassandraType1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealType realType0 = RealType.REAL;
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      CassandraType cassandraType0 = CassandraType.toCassandraType(realType0, protocolVersion0);
      assertEquals(CassandraType.FLOAT, cassandraType0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DECIMAL;
      ImmutableList<CassandraType> immutableList0 = ImmutableList.of(cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0, cassandraType0);
      CassandraColumnHandle cassandraColumnHandle0 = new CassandraColumnHandle("com.fasterxml.jackson.dataformat.smile.SmileParserBase", " is too large (stack overflow while parsing)", 1110, cassandraType0, immutableList0, true, true, false, false);
      Type type0 = cassandraColumnHandle0.getType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      assertEquals(CassandraType.DOUBLE, cassandraType1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigintType bigintType0 = BigintType.BIGINT;
      ProtocolVersion protocolVersion0 = ProtocolVersion.V2;
      CassandraType cassandraType0 = CassandraType.toCassandraType(bigintType0, protocolVersion0);
      assertEquals(CassandraType.BIGINT, cassandraType0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BOOLEAN;
      Type type0 = cassandraType0.getNativeType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      assertEquals(CassandraType.BOOLEAN, cassandraType1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.CUSTOM;
      // Undeclared exception!
      try { 
        cassandraType0.validateClusteringKey((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported clustering key type: CUSTOM
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.CUSTOM;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      Type type0 = cassandraType0.getNativeType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      // Undeclared exception!
      try { 
        cassandraType1.validateClusteringKey((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported clustering key type: BLOB
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.VARINT;
      HostAddress hostAddress0 = HostAddress.fromParts("E", 10);
      InetAddress inetAddress0 = hostAddress0.toInetAddress();
      // Undeclared exception!
      try { 
        cassandraType0.validateClusteringKey(inetAddress0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported clustering key type: VARINT
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.INET;
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      Object object0 = cassandraType0.validateClusteringKey(kdbTreeType0);
      assertSame(kdbTreeType0, object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DATE;
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      VarbinaryType varbinaryType1 = (VarbinaryType)cassandraType0.validateClusteringKey(varbinaryType0);
      assertTrue(varbinaryType1.isComparable());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TIMESTAMP;
      Object object0 = cassandraType0.validateClusteringKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.UUID;
      Object object0 = cassandraType0.validateClusteringKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DECIMAL;
      Integer integer0 = TestNG.DEFAULT_VERBOSE;
      Object object0 = cassandraType0.validateClusteringKey(integer0);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.FLOAT;
      Object object0 = cassandraType0.validateClusteringKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DOUBLE;
      Integer integer0 = TestNG.DEFAULT_VERBOSE;
      Object object0 = cassandraType0.validateClusteringKey(integer0);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.VARCHAR;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      CassandraType cassandraType1 = CassandraType.BOOLEAN;
      CassandraType cassandraType2 = cassandraType1.getCassandraType();
      Object object0 = cassandraType2.validateClusteringKey(cassandraType0);
      assertEquals(CassandraType.VARCHAR, object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.COUNTER;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.validateClusteringKey("[\"com.facebook.presto.common.type.KdbTreeType@0000000003\",\"com.facebook.presto.common.type.KdbTreeType@0000000003\",\"com.facebook.presto.common.type.KdbTreeType@0000000003\",\"com.facebook.presto.common.type.KdbTreeType@0000000003\",\"com.facebook.presto.common.type.KdbTreeType@0000000003\",\"com.facebook.presto.common.type.KdbTreeType@0000000003\",\"com.facebook.presto.common.type.KdbTreeType@0000000003\"]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported clustering key type: COUNTER
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      ProtocolVersion protocolVersion0 = ProtocolVersion.V5;
      CassandraType cassandraType0 = CassandraType.toCassandraType(tinyintType0, protocolVersion0);
      TinyintType tinyintType1 = (TinyintType)cassandraType0.validateClusteringKey(tinyintType0);
      assertTrue(tinyintType1.isOrderable());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.SMALLINT;
      Object object0 = cassandraType0.validateClusteringKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      ProtocolVersion protocolVersion0 = ProtocolVersion.V4;
      CassandraType cassandraType0 = CassandraType.toCassandraType(integerType0, protocolVersion0);
      Object object0 = cassandraType0.validateClusteringKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.valueOf("TEXT");
      Object object0 = cassandraType0.validateClusteringKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.ASCII;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.ASCII, cassandraType0);
      
      Object object0 = cassandraType0.validateClusteringKey(cassandraType0);
      assertEquals(CassandraType.ASCII, object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.MAP;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      Double double0 = new Double(188.59);
      // Undeclared exception!
      try { 
        cassandraType0.validateClusteringKey(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported clustering key type: MAP
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.SET;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.validateClusteringKey((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported clustering key type: SET
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.VARCHAR;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.VARCHAR, cassandraType0);
      
      Object object0 = cassandraType0.validateClusteringKey(cassandraType0);
      assertEquals(CassandraType.VARCHAR, object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.LIST;
      // Undeclared exception!
      try { 
        cassandraType0.validateClusteringKey((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported clustering key type: LIST
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.valueOf("BLOB");
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.INET;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DATE;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TIMESTAMP;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TIMEUUID;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.UUID;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DECIMAL;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.FLOAT;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BOOLEAN;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.COUNTER;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.COUNTER, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BIGINT;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TINYINT;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.INT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.INT, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TEXT;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.ASCII;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.ASCII, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.MAP;
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.SET;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.SET, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.VARCHAR;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.VARCHAR, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.LIST;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.LIST, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.CUSTOM;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(cassandraType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.cassandra.CassandraType cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BLOB;
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(uUID0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.UUID cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BIGINT;
      DataType.Name dataType_Name0 = DataType.Name.VARINT;
      CassandraType cassandraType1 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType1.getJavaValue(cassandraType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.cassandra.CassandraType cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DATE;
      DataType.Name dataType_Name0 = DataType.Name.TIMESTAMP;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(dataType_Name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.datastax.driver.core.DataType$Name cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.TIMESTAMP;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(dataType_Name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.datastax.driver.core.DataType$Name cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TIMEUUID;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(cassandraType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.cassandra.CassandraType cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.UUID;
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      ArrayType arrayType0 = new ArrayType(p4HyperLogLogType0);
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(arrayType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.common.type.ArrayType cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.FLOAT;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DOUBLE;
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Object object0 = cassandraType0.getJavaValue(simpleObjectIdResolver0);
      assertSame(simpleObjectIdResolver0, object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BOOLEAN;
      Object object0 = cassandraType0.getJavaValue((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.TEXT;
      CassandraType cassandraType0 = CassandraType.COUNTER;
      Object object0 = cassandraType0.getJavaValue(dataType_Name0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BIGINT;
      IntegerType integerType0 = IntegerType.INTEGER;
      IntegerType integerType1 = (IntegerType)cassandraType0.getJavaValue(integerType0);
      assertTrue(integerType1.isOrderable());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      CassandraType cassandraType0 = CassandraType.toCassandraType(smallintType0, protocolVersion0);
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(booleanType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.common.type.BooleanType cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.TEXT;
      CassandraType cassandraType1 = CassandraType.MAP;
      // Undeclared exception!
      try { 
        cassandraType1.getJavaValue(cassandraType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Back conversion not implemented for MAP
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.SET;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Back conversion not implemented for SET
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.VARCHAR;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(bigDecimal0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigDecimal cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.LIST;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Back conversion not implemented for LIST
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.COUNTER;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      List<CassandraType> list0 = cassandraType0.getTypeArguments();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = new Long((-232L));
      ImmutableList<Long> immutableList0 = ImmutableList.of(long0, long0, long0, long0, long0, long0, long0, long0);
      CassandraType cassandraType0 = CassandraType.LIST;
      // Undeclared exception!
      try { 
        CassandraType.buildArrayValue(immutableList0, cassandraType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Handling of type LIST is not implemented
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      ImmutableList<TimestampType> immutableList0 = ImmutableList.of(timestampType0, timestampType0, timestampType0, timestampType0, timestampType0, timestampType0, timestampType0);
      CassandraType cassandraType0 = CassandraType.CUSTOM;
      // Undeclared exception!
      try { 
        CassandraType.buildArrayValue(immutableList0, cassandraType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      ImmutableList<TimestampType> immutableList0 = ImmutableList.of(timestampType0, timestampType0, timestampType0, timestampType0, timestampType0, timestampType0, timestampType0);
      CassandraType cassandraType0 = CassandraType.BLOB;
      // Undeclared exception!
      try { 
        CassandraType.buildArrayValue(immutableList0, cassandraType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ImmutableList<KdbTreeType> immutableList0 = ImmutableList.of(kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0);
      CassandraType cassandraType0 = CassandraType.VARINT;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.INET;
      SmallintType smallintType0 = SmallintType.SMALLINT;
      ImmutableList<SmallintType> immutableList0 = ImmutableList.of(smallintType0, smallintType0, smallintType0, smallintType0, smallintType0, smallintType0, smallintType0, smallintType0, smallintType0, smallintType0, smallintType0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = new Long((-232L));
      ImmutableList<Long> immutableList0 = ImmutableList.of(long0, long0, long0, long0, long0, long0, long0, long0);
      CassandraType cassandraType0 = CassandraType.DATE;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ImmutableList<KdbTreeType> immutableList0 = ImmutableList.of(kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0);
      CassandraType cassandraType0 = CassandraType.TIMEUUID;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ImmutableList<KdbTreeType> immutableList0 = ImmutableList.of(kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0);
      CassandraType cassandraType0 = CassandraType.UUID;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DECIMAL;
      Integer integer0 = TestNG.DEFAULT_VERBOSE;
      XmlSuite xmlSuite0 = new XmlSuite();
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0, integer0, integer0, integer0, xmlSuite0.DEFAULT_VERBOSE, xmlSuite0.DEFAULT_THREAD_COUNT, integer0, integer0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ImmutableList<KdbTreeType> immutableList0 = ImmutableList.of(kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0);
      CassandraType cassandraType0 = CassandraType.FLOAT;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DOUBLE;
      Integer integer0 = TestNG.DEFAULT_VERBOSE;
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BOOLEAN;
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(3936L);
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = longArray0[0];
      longArray0[3] = long0;
      ImmutableList<Long> immutableList0 = ImmutableList.copyOf(longArray0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ImmutableList<KdbTreeType> immutableList0 = ImmutableList.of(kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0);
      DataType.Name dataType_Name0 = DataType.Name.COUNTER;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      ImmutableList<BooleanType> immutableList0 = ImmutableList.of(booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0, booleanType0);
      CassandraType cassandraType0 = CassandraType.BIGINT;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ImmutableList<KdbTreeType> immutableList0 = ImmutableList.of(kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0, kdbTreeType0);
      CassandraType cassandraType0 = CassandraType.TINYINT;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.SMALLINT;
      TimeType timeType0 = TimeType.TIME;
      ImmutableList<TimeType> immutableList0 = ImmutableList.of(timeType0, timeType0, timeType0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.INT;
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      ImmutableList<P4HyperLogLogType> immutableList0 = ImmutableList.of(p4HyperLogLogType0, p4HyperLogLogType0, p4HyperLogLogType0, p4HyperLogLogType0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonType jsonType0 = new JsonType();
      ImmutableList<JsonType> immutableList0 = ImmutableList.of(jsonType0, jsonType0, jsonType0, jsonType0, jsonType0, jsonType0, jsonType0, jsonType0);
      CassandraType cassandraType0 = CassandraType.TEXT;
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.ASCII;
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      ImmutableList<P4HyperLogLogType> immutableList0 = ImmutableList.of(p4HyperLogLogType0, p4HyperLogLogType0, p4HyperLogLogType0, p4HyperLogLogType0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.MAP;
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, 285, cassandraType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Handling of type MAP is not implemented
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.CUSTOM;
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(row0).getBytesUnsafe(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, 3940, cassandraType0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((InetAddress) null).when(row0).getInet(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.INET;
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, (-1623), cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDate.fromYearMonthDay(14, (-2225), (byte)16);
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((LocalDate) null).when(row0).getDate(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.DATE;
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, 1437, cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(row0).getTimestamp(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.TIMESTAMP;
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, (-624), cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((UUID) null).when(row0).getUUID(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.TIMEUUID;
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, (-2171), cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.DECIMAL;
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(bigDecimal0).when(row0).getDecimal(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, 330, cassandraType0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.FLOAT;
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(row0).getFloat(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, 21, cassandraType0);
      assertEquals("0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(row0).getDouble(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.DOUBLE;
      String string0 = CassandraType.getColumnValueForCql(row0, (-2333), cassandraType0);
      assertNotNull(string0);
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(row0).getBool(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.BOOLEAN;
      String string0 = CassandraType.getColumnValueForCql(row0, 6507, cassandraType0);
      assertEquals("false", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.BIGINT;
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(100000000000L).when(row0).getLong(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, (byte)34, cassandraType0);
      assertNotNull(string0);
      assertEquals("100000000000", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((short)0).when(row0).getShort(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.SMALLINT;
      String string0 = CassandraType.getColumnValueForCql(row0, 0, cassandraType0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(1220).when(row0).getInt(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.INT;
      String string0 = CassandraType.getColumnValueForCql(row0, 0, cassandraType0);
      assertNotNull(string0);
      assertEquals("1220", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(row0).getString(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.VARCHAR;
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, (-2691), cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn("*2X>(r(4~8y++Xp").when(row0).getString(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      CassandraType cassandraType0 = CassandraType.ASCII;
      String string0 = CassandraType.getColumnValueForCql(row0, 10, cassandraType0);
      assertNotNull(string0);
      assertEquals("'*2X>(r(4~8y++Xp'", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.VARCHAR;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, 6500, cassandraType0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.VARINT;
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((BigInteger) null).when(row0).getVarint(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, 1414, cassandraType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.UDT;
      CassandraType.getCassandraType(dataType_Name0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.VARINT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.VARINT, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.VARCHAR;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      JsonType jsonType0 = new JsonType();
      ImmutableList<JsonType> immutableList0 = ImmutableList.of(jsonType0, jsonType0, jsonType0, jsonType0, jsonType0, jsonType0, jsonType0, jsonType0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.UUID;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.UUID, cassandraType0);
      
      UUID uUID0 = MockUUID.fromString("&A g^^yo}~dK");
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn(uUID0).when(row0).getUUID(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, (-2623), cassandraType0);
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.TINYINT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      BigintType bigintType0 = BigintType.BIGINT;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(bigintType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.common.type.BigintType cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.TIMEUUID;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      CommonToken commonToken0 = new CommonToken((-808), "NOT_DETERMINISTIC");
      CommonToken commonToken1 = (CommonToken)cassandraType0.validateClusteringKey(commonToken0);
      assertEquals(0, commonToken1.getLine());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.TIMESTAMP;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      ImmutableList<TimestampType> immutableList0 = ImmutableList.of(timestampType0, timestampType0, timestampType0, timestampType0, timestampType0, timestampType0, timestampType0);
      String string0 = CassandraType.buildArrayValue(immutableList0, cassandraType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.TEXT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue("[]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.SMALLINT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.SMALLINT, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.LIST;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.getCassandraType();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.INT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(dataType_Name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.datastax.driver.core.DataType$Name cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.INET;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(bigDecimal0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigDecimal cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.FLOAT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.FLOAT, cassandraType0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.DOUBLE;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.DOUBLE, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.DECIMAL;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.DATE;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.DATE, cassandraType0);
      
      Type type0 = cassandraType0.getNativeType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V1;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      assertEquals(CassandraType.TEXT, cassandraType1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.CUSTOM;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.CUSTOM, cassandraType0);
      
      boolean boolean0 = cassandraType0.isSupportedPartitionKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.COUNTER;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.COUNTER, cassandraType0);
      
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((long)0).when(row0).getLong(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, 1414, cassandraType0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.BOOLEAN;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.BOOLEAN, cassandraType0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.BLOB;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(row0).getBytesUnsafe(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      String string0 = CassandraType.getColumnValueForCql(row0, 1753, cassandraType0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.BIGINT;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      Object object0 = cassandraType0.validateClusteringKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.ASCII;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      // Undeclared exception!
      try { 
        cassandraType0.getJavaValue(cassandraType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.cassandra.CassandraType cannot be cast to io.airlift.slice.Slice
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.MAP;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      int int0 = cassandraType0.getTypeArgumentSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DataType.Name dataType_Name0 = DataType.Name.SET;
      CassandraType cassandraType0 = CassandraType.getCassandraType(dataType_Name0);
      assertEquals(CassandraType.SET, cassandraType0);
      
      int int0 = cassandraType0.getTypeArgumentSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.LIST;
      // Undeclared exception!
      try { 
        cassandraType0.getTypeArguments();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.CassandraType", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CassandraType cassandraType0 = CassandraType.ASCII;
      Type type0 = cassandraType0.getNativeType();
      ProtocolVersion protocolVersion0 = ProtocolVersion.V5;
      CassandraType cassandraType1 = CassandraType.toCassandraType(type0, protocolVersion0);
      Row row0 = mock(Row.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(row0).getString(anyInt());
      doReturn(false).when(row0).isNull(anyInt());
      // Undeclared exception!
      try { 
        CassandraType.getColumnValueForCql(row0, 0, cassandraType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.CassandraCqlUtils", e);
      }
  }
}
