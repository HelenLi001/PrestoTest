/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Nov 21 02:11:11 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ReopeningCluster_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.facebook.presto.cassandra.ReopeningCluster"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/mnt/c/Users/Helen/Documents/DataScience18668/GroupProject/project/presto/presto-cassandra"); 
    java.lang.System.setProperty("user.home", "/home/helen"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "helen"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ReopeningCluster_ESTest_scaffolding.class.getClassLoader() ,
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AsyncCallable",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.FutureCallback",
      "com.datastax.driver.core.ConvictionPolicy$DefaultConvictionPolicy$Factory",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$AtomicHelper",
      "com.datastax.driver.core.SchemaChangeListener",
      "com.datastax.driver.core.ConvictionPolicy$Factory",
      "com.datastax.driver.core.EventDebouncer$DeliveryCallback",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.FluentFuture",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper",
      "com.datastax.driver.$internal.com.google.common.base.Function",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AsyncFunction",
      "com.datastax.driver.core.Session",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.GwtFuturesCatchingSpecialization",
      "com.google.common.base.Verify",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1",
      "com.datastax.driver.core.LatencyTracker",
      "com.datastax.driver.core.GuavaCompatibility$Version19OrHigher",
      "com.datastax.driver.core.DelegatingCluster",
      "com.facebook.presto.cassandra.ReopeningCluster",
      "com.datastax.driver.core.CloseFuture$Forwarding",
      "com.datastax.driver.core.ProtocolVersion",
      "com.datastax.driver.core.exceptions.DriverInternalError",
      "com.datastax.driver.core.Metadata",
      "com.datastax.driver.core.Cluster",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.CheckedFuture",
      "com.datastax.driver.core.exceptions.ConnectionException",
      "com.datastax.driver.core.GuavaCompatibility",
      "com.datastax.driver.core.Connection$DefaultResponseHandler",
      "com.datastax.driver.core.exceptions.BusyConnectionException",
      "com.datastax.driver.core.CloseFuture$1",
      "com.datastax.driver.core.Cluster$Initializer",
      "com.datastax.driver.core.Requests$Prepare",
      "com.datastax.driver.core.SystemProperties",
      "com.datastax.driver.core.Cluster$Manager$ClusterCloseFuture",
      "com.datastax.driver.core.ClusterNameMismatchException",
      "com.facebook.airlift.log.Logger",
      "com.datastax.driver.core.Configuration",
      "com.datastax.driver.core.Cluster$Builder",
      "com.datastax.driver.core.Message",
      "com.datastax.driver.core.Host$StateListener",
      "com.datastax.driver.$internal.com.google.common.collect.ImmutableList",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.Futures$FutureCombiner",
      "com.datastax.driver.$internal.com.google.common.collect.SetMultimap",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper",
      "com.google.common.base.Strings",
      "com.datastax.driver.core.Cluster$Manager",
      "com.datastax.driver.$internal.com.google.common.collect.Multimap",
      "com.datastax.driver.core.EventDebouncer",
      "com.datastax.driver.core.ConvictionPolicy",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization",
      "com.datastax.driver.core.exceptions.DriverException",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$Waiter",
      "com.datastax.driver.$internal.com.google.common.collect.ImmutableCollection",
      "com.datastax.driver.core.Message$Request",
      "com.google.common.base.VerifyException",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.Futures",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.ListenableFuture",
      "com.datastax.driver.core.exceptions.AuthenticationException",
      "com.datastax.driver.core.GuavaCompatibility$Version18OrLower",
      "com.datastax.driver.core.Cluster$Manager$1",
      "com.datastax.driver.core.Cluster$Manager$2",
      "com.datastax.driver.core.ConvictionPolicy$DefaultConvictionPolicy",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture",
      "com.datastax.driver.core.exceptions.UnsupportedProtocolVersionException",
      "com.datastax.driver.core.Cluster$Manager$3",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$Listener",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.ForwardingFluentFuture",
      "com.datastax.driver.core.exceptions.CoordinatorException",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.ExecutionError",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.UncheckedExecutionException",
      "com.datastax.driver.core.Metrics",
      "com.google.common.base.Preconditions",
      "com.datastax.driver.core.CloseFuture"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.Supplier", false, ReopeningCluster_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ReopeningCluster_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.datastax.driver.core.GuavaCompatibility$Version19OrHigher",
      "com.datastax.driver.core.GuavaCompatibility",
      "com.datastax.driver.core.SystemProperties",
      "com.datastax.driver.core.Cluster",
      "com.datastax.driver.core.DelegatingCluster",
      "com.facebook.airlift.log.Logger",
      "com.facebook.presto.cassandra.ReopeningCluster",
      "com.datastax.driver.core.Cluster$Manager",
      "com.datastax.driver.core.ConvictionPolicy$DefaultConvictionPolicy$Factory",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.FluentFuture",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$AtomicHelper",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture",
      "com.datastax.driver.core.CloseFuture",
      "com.datastax.driver.core.CloseFuture$1",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$Waiter",
      "com.datastax.driver.$internal.com.google.common.util.concurrent.AbstractFuture$Listener",
      "com.google.common.base.Preconditions",
      "com.datastax.driver.core.Cluster$Builder",
      "com.datastax.driver.core.AuthProvider$1",
      "com.datastax.driver.core.AuthProvider",
      "com.datastax.driver.core.policies.ExponentialReconnectionPolicy",
      "com.datastax.driver.core.policies.DefaultRetryPolicy",
      "com.datastax.driver.core.policies.IdentityTranslator",
      "com.datastax.driver.core.policies.NoSpeculativeExecutionPolicy$1",
      "com.datastax.driver.core.policies.NoSpeculativeExecutionPolicy",
      "com.datastax.driver.core.policies.Policies",
      "com.datastax.driver.core.policies.Policies$Builder",
      "com.datastax.driver.core.Configuration",
      "com.datastax.driver.core.Configuration$Builder",
      "com.datastax.driver.core.ProtocolOptions$Compression",
      "com.google.common.base.Verify",
      "com.google.common.base.VerifyException",
      "com.google.common.base.Strings"
    );
  }
}
