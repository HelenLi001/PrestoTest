/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:09:53 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cassandra.SizeEstimate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeEstimate_ESTest extends SizeEstimate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("s7gpTUDE T", "", (-1243L), (-1243L));
      SizeEstimate sizeEstimate1 = new SizeEstimate("J%LnDXmV6]t%/j0[tc", "", (-1243L), 479L);
      boolean boolean0 = sizeEstimate0.equals(sizeEstimate1);
      assertFalse(boolean0);
      assertEquals(479L, sizeEstimate1.getPartitionsCount());
      assertEquals("J%LnDXmV6]t%/j0[tc", sizeEstimate1.getRangeStart());
      assertEquals((-1243L), sizeEstimate1.getMeanPartitionSize());
      assertEquals("", sizeEstimate1.getRangeEnd());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate(";rdS>'ZIRBUKSou", ";rdS>'ZIRBUKSou", 1613L, 1613L);
      SizeEstimate sizeEstimate1 = new SizeEstimate(";rdS>'ZIRBUKSou", "", 976L, 3714L);
      boolean boolean0 = sizeEstimate0.equals(sizeEstimate1);
      assertEquals(3714L, sizeEstimate1.getPartitionsCount());
      assertEquals("", sizeEstimate1.getRangeEnd());
      assertEquals(976L, sizeEstimate1.getMeanPartitionSize());
      assertEquals(";rdS>'ZIRBUKSou", sizeEstimate1.getRangeStart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("RDc#rC9I>Yk$6lPE}8", "RDc#rC9I>Yk$6lPE}8", 28L, 28L);
      sizeEstimate0.getRangeStart();
      assertEquals(28L, sizeEstimate0.getPartitionsCount());
      assertEquals(28L, sizeEstimate0.getMeanPartitionSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("% (%) mus be lBss ehan siz (%s)", "% (%) mus be lBss ehan siz (%s)", (-1L), (-1L));
      sizeEstimate0.getRangeEnd();
      assertEquals((-1L), sizeEstimate0.getPartitionsCount());
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("s<GM$7TE/sL.8", "s<GM$7TE/sL.8", (-1L), 0L);
      long long0 = sizeEstimate0.getPartitionsCount();
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("RDc#rC9I>Yk$6lPE}8", "RDc#rC9I>Yk$6lPE}8", 28L, 28L);
      long long0 = sizeEstimate0.getPartitionsCount();
      assertEquals(28L, long0);
      assertEquals(28L, sizeEstimate0.getMeanPartitionSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", 0L, (-552L));
      long long0 = sizeEstimate0.getMeanPartitionSize();
      assertEquals(0L, long0);
      assertEquals((-552L), sizeEstimate0.getPartitionsCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", 830L, (-3822L));
      long long0 = sizeEstimate0.getMeanPartitionSize();
      assertEquals((-3822L), sizeEstimate0.getPartitionsCount());
      assertEquals(830L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SizeEstimate sizeEstimate0 = null;
      try {
        sizeEstimate0 = new SizeEstimate("v!PL6s<nJlY>A\"p", (String) null, 0L, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rangeEnd is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("Sd~,O/O:E", "Sd~,O/O:E", 1613L, 1613L);
      SizeEstimate sizeEstimate1 = new SizeEstimate("Sd~,O/O:E", "Sd~,O/O:E", 1613L, 1613L);
      boolean boolean0 = sizeEstimate0.equals(sizeEstimate1);
      assertEquals(1613L, sizeEstimate1.getMeanPartitionSize());
      assertTrue(boolean0);
      assertEquals(1613L, sizeEstimate1.getPartitionsCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("RDc#rC9I>Yk$6lPE}8", "RDc#rC9I>Yk$6lPE}8", 28L, 28L);
      SizeEstimate sizeEstimate1 = new SizeEstimate("SizeEstimate{rangeStart=RDc#rC9I>Yk$6lPE}8, rangeEnd=RDc#rC9I>Yk$6lPE}8, meanPartitionSize=28, partitionsCount=28}", "SizeEstimate{rangeStart=RDc#rC9I>Yk$6lPE}8, rangeEnd=RDc#rC9I>Yk$6lPE}8, meanPartitionSize=28, partitionsCount=28}", 28L, 28L);
      boolean boolean0 = sizeEstimate0.equals(sizeEstimate1);
      assertEquals(28L, sizeEstimate1.getMeanPartitionSize());
      assertEquals(28L, sizeEstimate1.getPartitionsCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("RDc#rC9I>Yk$6lPE}8", "RDc#rC9I>Yk$6lPE}8", 28L, 28L);
      SizeEstimate sizeEstimate1 = new SizeEstimate("SizeEstimate{rangeStart=RDc#rC9I>Yk$6lPE}8, rangeEnd=RDc#rC9I>Yk$6lPE}8, meanPartitionSize=28, partitionsCount=28}", "SizeEstimate{rangeStart=RDc#rC9I>Yk$6lPE}8, rangeEnd=RDc#rC9I>Yk$6lPE}8, meanPartitionSize=28, partitionsCount=28}", 28L, (-491L));
      boolean boolean0 = sizeEstimate0.equals(sizeEstimate1);
      assertEquals(28L, sizeEstimate1.getMeanPartitionSize());
      assertFalse(boolean0);
      assertEquals((-491L), sizeEstimate1.getPartitionsCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("% (%) mus be lBss ehan siz (%s)", "% (%) mus be lBss ehan siz (%s)", (-1L), (-1L));
      SizeEstimate sizeEstimate1 = new SizeEstimate("SizeEstimate{rangeStart=% (%) mus be lBss ehan siz (%s), rangeEnd=% (%) mus be lBss ehan siz (%s), meanPartitionSize=-1, partitionsCount=-1}", "% (%) mus be lBss ehan siz (%s)", 25L, (-1L));
      boolean boolean0 = sizeEstimate0.equals(sizeEstimate1);
      assertEquals((-1L), sizeEstimate1.getPartitionsCount());
      assertEquals("SizeEstimate{rangeStart=% (%) mus be lBss ehan siz (%s), rangeEnd=% (%) mus be lBss ehan siz (%s), meanPartitionSize=-1, partitionsCount=-1}", sizeEstimate1.getRangeStart());
      assertFalse(boolean0);
      assertEquals(25L, sizeEstimate1.getMeanPartitionSize());
      assertEquals("% (%) mus be lBss ehan siz (%s)", sizeEstimate1.getRangeEnd());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("% (%) mus be lBss ehan siz (%s)", "% (%) mus be lBss ehan siz (%s)", (-1L), (-1L));
      SizeEstimate sizeEstimate1 = new SizeEstimate("% (%) mus be lBss ehan siz (%s)", "SizeEstimate{rangeStart=% (%) mus be lBss ehan siz (%s), rangeEnd=% (%) mus be lBss ehan siz (%s), meanPartitionSize=-1, partitionsCount=-1}", (-1L), (-1L));
      boolean boolean0 = sizeEstimate1.equals(sizeEstimate0);
      assertEquals((-1L), sizeEstimate1.getPartitionsCount());
      assertFalse(boolean0);
      assertEquals((-1L), sizeEstimate1.getMeanPartitionSize());
      assertEquals("% (%) mus be lBss ehan siz (%s)", sizeEstimate1.getRangeStart());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("(d-=FdkWHStv_PN9", "(d-=FdkWHStv_PN9", (-4718L), (-4718L));
      boolean boolean0 = sizeEstimate0.equals((Object) null);
      assertEquals((-4718L), sizeEstimate0.getPartitionsCount());
      assertEquals((-4718L), sizeEstimate0.getMeanPartitionSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      boolean boolean0 = sizeEstimate0.equals(sizeEstimate0);
      assertEquals((-1L), sizeEstimate0.getPartitionsCount());
      assertTrue(boolean0);
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      boolean boolean0 = sizeEstimate0.equals("");
      assertEquals((-1L), sizeEstimate0.getPartitionsCount());
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      sizeEstimate0.getRangeEnd();
      assertEquals((-1L), sizeEstimate0.getPartitionsCount());
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      String string0 = sizeEstimate0.toString();
      assertEquals("SizeEstimate{rangeStart=, rangeEnd=, meanPartitionSize=-1, partitionsCount=-1}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      sizeEstimate0.hashCode();
      assertEquals((-1L), sizeEstimate0.getPartitionsCount());
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      long long0 = sizeEstimate0.getMeanPartitionSize();
      assertEquals((-1L), sizeEstimate0.getPartitionsCount());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      long long0 = sizeEstimate0.getPartitionsCount();
      assertEquals((-1L), long0);
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SizeEstimate sizeEstimate0 = new SizeEstimate("", "", (-1L), (-1L));
      sizeEstimate0.getRangeStart();
      assertEquals((-1L), sizeEstimate0.getPartitionsCount());
      assertEquals((-1L), sizeEstimate0.getMeanPartitionSize());
  }
}
