/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:08:33 GMT 2021
 */

package com.facebook.presto.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.cassandra.Murmur3PartitionerTokenRing;
import com.facebook.presto.cassandra.RandomPartitionerTokenRing;
import com.facebook.presto.cassandra.TokenRing;
import java.math.BigInteger;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenRing_ESTest extends TokenRing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Murmur3PartitionerTokenRing murmur3PartitionerTokenRing0 = Murmur3PartitionerTokenRing.INSTANCE;
      BigInteger bigInteger0 = murmur3PartitionerTokenRing0.getTokenCountInRange("6", "6");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Murmur3PartitionerTokenRing murmur3PartitionerTokenRing0 = Murmur3PartitionerTokenRing.INSTANCE;
      double double0 = murmur3PartitionerTokenRing0.getRingFraction("4", "4");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Murmur3PartitionerTokenRing murmur3PartitionerTokenRing0 = Murmur3PartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        murmur3PartitionerTokenRing0.getTokenCountInRange("nH.m[4C", "|CU+sVa?rd<xJnr-JM?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nH.m[4C\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.getTokenCountInRange((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.getRingFraction("", "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RandomPartitionerTokenRing randomPartitionerTokenRing0 = RandomPartitionerTokenRing.INSTANCE;
      // Undeclared exception!
      try { 
        randomPartitionerTokenRing0.getRingFraction((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenRing.createForPartitioner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // partitioner is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Optional<TokenRing> optional0 = TokenRing.createForPartitioner("K3&I?(P!!%l.0");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Optional<TokenRing> optional0 = TokenRing.createForPartitioner("org.apache.cassandra.dht.Murmur3Partitioner");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Optional<TokenRing> optional0 = TokenRing.createForPartitioner("org.apache.cassandra.dht.RandomPartitioner");
      assertNotNull(optional0);
  }
}
