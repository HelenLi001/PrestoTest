/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 02:14:32 GMT 2021
 */

package com.facebook.presto.cassandra.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.datastax.driver.core.Host;
import com.facebook.presto.cassandra.util.HostAddressFactory;
import com.facebook.presto.spi.HostAddress;
import java.net.InetAddress;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HostAddressFactory_ESTest extends HostAddressFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      HostAddress hostAddress0 = hostAddressFactory0.toHostAddress("y~e/DUUhY`wh,{az:6");
      assertTrue(hostAddress0.hasPort());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      InetAddress inetAddress0 = mock(InetAddress.class, new ViolatedAssumptionAnswer());
      doReturn("").when(inetAddress0).getHostAddress();
      Host host0 = mock(Host.class, new ViolatedAssumptionAnswer());
      doReturn(inetAddress0).when(host0).getAddress();
      HostAddress hostAddress0 = hostAddressFactory0.toHostAddress(host0);
      assertEquals("", hostAddress0.getHostText());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      // Undeclared exception!
      try { 
        hostAddressFactory0.toHostAddressList((Collection<Host>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.HostAddressFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      // Undeclared exception!
      try { 
        hostAddressFactory0.toHostAddress((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hostPortString is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      // Undeclared exception!
      try { 
        hostAddressFactory0.toHostAddress("[|rUeCo05*3h <1OV~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bracketed host/port: [|rUeCo05*3h <1OV~
         //
         verifyException("com.facebook.presto.spi.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      InetAddress inetAddress0 = mock(InetAddress.class, new ViolatedAssumptionAnswer());
      doReturn("[{}] received event {}").when(inetAddress0).getHostAddress();
      Host host0 = mock(Host.class, new ViolatedAssumptionAnswer());
      doReturn(inetAddress0).when(host0).getAddress();
      // Undeclared exception!
      try { 
        hostAddressFactory0.toHostAddress(host0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bracketed host/port: [{}] received event {}
         //
         verifyException("com.facebook.presto.spi.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      // Undeclared exception!
      try { 
        hostAddressFactory0.AddressNamesToHostAddressList((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.cassandra.util.HostAddressFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      hostAddressFactory0.toHostAddress("Starting new cluster with contact points ");
      HostAddress hostAddress0 = hostAddressFactory0.toHostAddress("Starting new cluster with contact points ");
      assertFalse(hostAddress0.hasPort());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HostAddressFactory hostAddressFactory0 = new HostAddressFactory();
      Host host0 = mock(Host.class, new ViolatedAssumptionAnswer());
      doReturn((InetAddress) null).when(host0).getAddress();
      // Undeclared exception!
      try { 
        hostAddressFactory0.toHostAddress(host0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }
}
