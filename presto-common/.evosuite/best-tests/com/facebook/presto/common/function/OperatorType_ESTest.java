/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 23:19:15 GMT 2021
 */

package com.facebook.presto.common.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.QualifiedObjectName;
import com.facebook.presto.common.function.OperatorType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperatorType_ESTest extends OperatorType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.SUBSCRIPT;
      // Undeclared exception!
      try { 
        OperatorType.negate(operatorType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported negate non-comparison operator: SUBSCRIPT
         //
         verifyException("com.facebook.presto.common.function.OperatorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.SUBTRACT;
      // Undeclared exception!
      try { 
        OperatorType.flip(operatorType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported flip non-comparison operator: SUBTRACT
         //
         verifyException("com.facebook.presto.common.function.OperatorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperatorType[] operatorTypeArray0 = OperatorType.values();
      assertEquals(20, operatorTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.valueOf("INDETERMINATE");
      assertTrue(operatorType0.isCalledOnNullInput());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.valueOf("LESS_THAN_OR_EQUAL");
      assertEquals(OperatorType.LESS_THAN_OR_EQUAL, operatorType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.IS_DISTINCT_FROM;
      boolean boolean0 = operatorType0.isCalledOnNullInput();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperatorType.negate((OperatorType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.function.OperatorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperatorType.flip((OperatorType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.function.OperatorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.DIVIDE;
      // Undeclared exception!
      try { 
        OperatorType.negate(operatorType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported negate non-comparison operator: DIVIDE
         //
         verifyException("com.facebook.presto.common.function.OperatorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.GREATER_THAN;
      OperatorType operatorType1 = OperatorType.negate(operatorType0);
      assertEquals(OperatorType.LESS_THAN_OR_EQUAL, operatorType1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN_OR_EQUAL;
      OperatorType operatorType1 = OperatorType.negate(operatorType0);
      assertEquals(OperatorType.GREATER_THAN, operatorType1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.NOT_EQUAL;
      OperatorType operatorType1 = OperatorType.negate(operatorType0);
      assertEquals(OperatorType.EQUAL, operatorType1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.EQUAL;
      OperatorType operatorType1 = OperatorType.negate(operatorType0);
      assertEquals(OperatorType.NOT_EQUAL, operatorType1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.INDETERMINATE;
      // Undeclared exception!
      try { 
        OperatorType.flip(operatorType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported flip non-comparison operator: INDETERMINATE
         //
         verifyException("com.facebook.presto.common.function.OperatorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN;
      OperatorType operatorType1 = OperatorType.negate(operatorType0);
      assertEquals(OperatorType.GREATER_THAN_OR_EQUAL, operatorType1);
      
      OperatorType operatorType2 = OperatorType.flip(operatorType1);
      assertEquals(OperatorType.LESS_THAN_OR_EQUAL, operatorType2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN;
      OperatorType operatorType1 = OperatorType.flip(operatorType0);
      assertEquals(OperatorType.GREATER_THAN, operatorType1);
      
      OperatorType operatorType2 = OperatorType.flip(operatorType1);
      assertEquals(OperatorType.LESS_THAN, operatorType2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN_OR_EQUAL;
      OperatorType operatorType1 = OperatorType.flip(operatorType0);
      assertEquals(OperatorType.GREATER_THAN_OR_EQUAL, operatorType1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.EQUAL;
      OperatorType operatorType1 = OperatorType.flip(operatorType0);
      assertEquals(OperatorType.EQUAL, operatorType1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.MODULUS;
      boolean boolean0 = operatorType0.isArithmeticOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN;
      OperatorType operatorType1 = OperatorType.negate(operatorType0);
      assertEquals(OperatorType.GREATER_THAN_OR_EQUAL, operatorType1);
      
      boolean boolean0 = operatorType1.isArithmeticOperator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.MULTIPLY;
      boolean boolean0 = operatorType0.isArithmeticOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.SUBTRACT;
      boolean boolean0 = operatorType0.isArithmeticOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.DIVIDE;
      boolean boolean0 = operatorType0.isArithmeticOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.ADD;
      boolean boolean0 = operatorType0.isArithmeticOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.DIVIDE;
      boolean boolean0 = operatorType0.isComparisonOperator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.IS_DISTINCT_FROM;
      OperatorType operatorType1 = OperatorType.flip(operatorType0);
      assertEquals(OperatorType.IS_DISTINCT_FROM, operatorType1);
      
      boolean boolean0 = operatorType1.isComparisonOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN;
      OperatorType operatorType1 = OperatorType.flip(operatorType0);
      assertEquals(OperatorType.GREATER_THAN, operatorType1);
      
      boolean boolean0 = operatorType1.isComparisonOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN_OR_EQUAL;
      boolean boolean0 = operatorType0.isComparisonOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.GREATER_THAN_OR_EQUAL;
      OperatorType operatorType1 = OperatorType.negate(operatorType0);
      assertEquals(OperatorType.LESS_THAN, operatorType1);
      
      boolean boolean0 = operatorType1.isComparisonOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.GREATER_THAN_OR_EQUAL;
      boolean boolean0 = operatorType0.isComparisonOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.NOT_EQUAL;
      OperatorType operatorType1 = OperatorType.flip(operatorType0);
      assertEquals(OperatorType.NOT_EQUAL, operatorType1);
      
      boolean boolean0 = operatorType1.isComparisonOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.EQUAL;
      boolean boolean0 = operatorType0.isComparisonOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN;
      String string0 = operatorType0.getOperator();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.NOT_EQUAL;
      OperatorType operatorType1 = OperatorType.flip(operatorType0);
      assertEquals(OperatorType.NOT_EQUAL, operatorType1);
      
      QualifiedObjectName qualifiedObjectName0 = operatorType1.getFunctionName();
      OperatorType.tryGetOperatorType(qualifiedObjectName0);
      assertSame(operatorType0, operatorType1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OperatorType operatorType0 = OperatorType.LESS_THAN;
      boolean boolean0 = operatorType0.isCalledOnNullInput();
      assertFalse(boolean0);
  }
}
