/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 23:42:35 GMT 2021
 */

package com.facebook.presto.common.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.SqlVarbinary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlVarbinary_ESTest extends SqlVarbinary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-94);
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      SqlVarbinary sqlVarbinary1 = new SqlVarbinary(byteArray1);
      int int0 = sqlVarbinary1.compareTo(sqlVarbinary0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      SqlVarbinary sqlVarbinary1 = new SqlVarbinary(byteArray0);
      int int0 = sqlVarbinary0.compareTo(sqlVarbinary1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      String string0 = sqlVarbinary0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      byte[] byteArray1 = sqlVarbinary0.getBytes();
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      // Undeclared exception!
      try { 
        sqlVarbinary0.compareTo((SqlVarbinary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.SqlVarbinary", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SqlVarbinary sqlVarbinary0 = null;
      try {
        sqlVarbinary0 = new SqlVarbinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bytes is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      String string0 = sqlVarbinary0.toString();
      assertEquals("00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00\n00", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      SqlVarbinary sqlVarbinary1 = new SqlVarbinary(byteArray0);
      boolean boolean0 = sqlVarbinary1.equals(sqlVarbinary0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      boolean boolean0 = sqlVarbinary0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      boolean boolean0 = sqlVarbinary0.equals(sqlVarbinary0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      boolean boolean0 = sqlVarbinary0.equals("00 e0 00 00 00 00 00 00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-32);
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      byte[] byteArray1 = new byte[9];
      SqlVarbinary sqlVarbinary1 = new SqlVarbinary(byteArray1);
      int int0 = sqlVarbinary1.compareTo(sqlVarbinary0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-32);
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      byte[] byteArray1 = new byte[9];
      SqlVarbinary sqlVarbinary1 = new SqlVarbinary(byteArray1);
      int int0 = sqlVarbinary0.compareTo(sqlVarbinary1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      sqlVarbinary0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SqlVarbinary sqlVarbinary0 = new SqlVarbinary(byteArray0);
      byte[] byteArray1 = sqlVarbinary0.getBytes();
      assertSame(byteArray1, byteArray0);
  }
}
