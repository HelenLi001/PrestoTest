/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:44:34 GMT 2021
 */

package com.facebook.presto.common.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.CatalogSchemaName;
import com.facebook.presto.common.QualifiedObjectName;
import com.facebook.presto.common.type.ArrayType;
import com.facebook.presto.common.type.DecimalType;
import com.facebook.presto.common.type.FunctionType;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.QuantileDigestType;
import com.facebook.presto.common.type.TimestampWithTimeZoneType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeSignature;
import com.facebook.presto.common.type.TypeSignatureBase;
import com.facebook.presto.common.type.TypeSignatureParameter;
import com.facebook.presto.common.type.TypeWithName;
import com.facebook.presto.common.type.UserDefinedType;
import com.facebook.presto.common.type.VarcharType;
import java.nio.charset.Charset;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeSignature_ESTest extends TypeSignature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(`()n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(`()n'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(array(com.facebook.presto.common.type.typesignature@0000000005)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(array(com.facebook.presto.common.type.typesignature@0000000005)'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("(!0I&vf~w 73:n,!.<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QualifiedObjectName should have exactly 3 parts
         //
         verifyException("com.facebook.presto.common.QualifiedObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("<G:4lw=m#J(Z", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: '<G:4lw=m#J(Z'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature(":3D-)o?y,>q4A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: ':3D-)o?y,>q4A'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("<3*K{MNtMs", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: '<3*K{MNtMs'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("mn Z$t7l{ ");
      boolean boolean0 = typeSignature0.isCalculated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<TypeSignatureParameter> vector0 = new Vector<TypeSignatureParameter>();
      TypeSignature typeSignature0 = new TypeSignature("Value %d is less than MIN_BYTE", vector0);
      List<TypeSignature> list0 = typeSignature0.getTypeParametersAsTypeSignatures();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("^CpTV(2X,", (Set<String>) treeSet0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature((String) null, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(rowA9varchar|bgnt)enum(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Bad type signature: 'row(rowA9varchar|bgnt)enum('
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf("block is null", "\u04F9\u05BE\u05EA\u05F4\u06FF\u077F\u0E7F\u20AF\u213A\uFDFF\uFEFF\uFFDC", "");
      TypeSignature typeSignature0 = new TypeSignature(qualifiedObjectName0);
      // Undeclared exception!
      try { 
        typeSignature0.getStandardTypeSignature();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TypeSignatureBase block is null.\u04F9\u05BE\u05EA\u05F4\u06FF\u077F\u0E7F\u20AF\u213A\uFDFF\uFEFF\uFFDC. does not have standard type base
         //
         verifyException("com.facebook.presto.common.type.TypeSignatureBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeSignature typeSignature0 = null;
      try {
        typeSignature0 = new TypeSignature((String) null, (TypeSignatureParameter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeSignatureParameter[] typeSignatureParameterArray0 = new TypeSignatureParameter[0];
      TypeSignature typeSignature0 = null;
      try {
        typeSignature0 = new TypeSignature("[_[)7.", typeSignatureParameterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QualifiedObjectName should have exactly 3 parts
         //
         verifyException("com.facebook.presto.common.QualifiedObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeSignature typeSignature0 = null;
      try {
        typeSignature0 = new TypeSignature((String) null, (List<TypeSignatureParameter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.TypeSignatureBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeSignature typeSignature0 = null;
      try {
        typeSignature0 = new TypeSignature((UserDefinedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.TypeSignatureBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeSignature typeSignature0 = null;
      try {
        typeSignature0 = new TypeSignature((QualifiedObjectName) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // typeName is null
         //
         verifyException("com.facebook.presto.common.type.TypeSignatureBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("#(Bg=7Q,zGKe/y", (Set<String>) treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: '#(Bg=7Q,zGKe/y'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("varchar|bigint)enum(", (Set<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'varchar|bigint)enum('
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("\"zC#6*B;,]<WR>8P", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: '\"zC#6*B;,]<WR>8P'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("(varchar|bigint)enum(", (Set<String>) linkedHashSet0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Expected baseName to be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("?b:;]<XhBs(-:[_ZcQ", (Set<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: ';]<XhBs(-:[_ZcQ'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("?K;]<XhBs-:[&ZcQ", (Set<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: '?K;]<XhBs-:[&ZcQ'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(:3d-)o?y,>q4a", (Set<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(:3d-)o?y,>q4a'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("function", (Set<String>) hashSet0);
      assertFalse(typeSignature0.isVarcharEnum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("vFdW;t^:lYnAN|)T`", (Set<String>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QualifiedObjectName should have exactly 3 parts
         //
         verifyException("com.facebook.presto.common.QualifiedObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("+");
      boolean boolean0 = typeSignature0.isVarcharEnum();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("varchar", set0);
      boolean boolean0 = typeSignature0.isVarcharEnum();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      List<Type> list0 = kdbTreeType0.getTypeParameters();
      FunctionType functionType0 = new FunctionType(list0, kdbTreeType0);
      ArrayType arrayType0 = new ArrayType(functionType0);
      TypeSignature typeSignature0 = arrayType0.getTypeSignature();
      boolean boolean0 = typeSignature0.isBigintEnum();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("HUUrrdI");
      boolean boolean0 = typeSignature0.isBigintEnum();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("4PXKCE", "basicsliceinput{");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "basicsliceinput{");
      VarcharType varcharType0 = VarcharType.VARCHAR;
      TypeWithName typeWithName0 = new TypeWithName(qualifiedObjectName0, varcharType0);
      TypeSignature typeSignature0 = typeWithName0.getTypeSignature();
      boolean boolean0 = typeSignature0.isCalculated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Stack<Type> stack0 = new Stack<Type>();
      TimestampWithTimeZoneType timestampWithTimeZoneType0 = TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;
      FunctionType functionType0 = new FunctionType(stack0, timestampWithTimeZoneType0);
      TypeSignature typeSignature0 = functionType0.getTypeSignature();
      List<TypeSignatureParameter> list0 = typeSignature0.getParameters();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("4pxkce.basicsliceinput{");
      TypeSignatureBase typeSignatureBase0 = typeSignature0.getTypeSignatureBase();
      assertNotNull(typeSignatureBase0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeSignatureParameter[] typeSignatureParameterArray0 = new TypeSignatureParameter[1];
      TypeSignatureParameter typeSignatureParameter0 = TypeSignatureParameter.of(0L);
      typeSignatureParameterArray0[0] = typeSignatureParameter0;
      TypeSignature typeSignature0 = new TypeSignature("dP{YbYXW!ht[9s&Y", typeSignatureParameterArray0);
      assertFalse(typeSignature0.isBigintEnum());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf("", "6?}y@sm@[", "");
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("6?}y@sm@[");
      UserDefinedType userDefinedType0 = new UserDefinedType(qualifiedObjectName0, typeSignature0);
      TypeSignature typeSignature1 = new TypeSignature(userDefinedType0);
      assertFalse(typeSignature1.isEnum());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("4pxkce.basicsliceinput{");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TypeSignature typeSignature1 = TypeSignature.parseTypeSignature("varchar(java.lang.String@0000000006)", (Set<String>) treeSet0);
      boolean boolean0 = typeSignature1.equals(typeSignature0);
      assertFalse(typeSignature1.isCalculated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("4PXKCE", "basicsliceinput{");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "basicsliceinput{");
      VarcharType varcharType0 = VarcharType.VARCHAR;
      TypeWithName typeWithName0 = new TypeWithName(qualifiedObjectName0, varcharType0);
      TypeSignature typeSignature0 = typeWithName0.getTypeSignature();
      boolean boolean0 = typeSignature0.equals("integer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("4pxkce.basicsliceinput{");
      TypeSignature typeSignature1 = typeSignature0.getStandardTypeSignature();
      boolean boolean0 = typeSignature1.equals(typeSignature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("Expected all parameters to be TypeSignatures but [%s] was found");
      boolean boolean0 = typeSignature0.equals(typeSignature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("4pxkce.basicsliceinput{");
      boolean boolean0 = typeSignature0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("int");
      assertFalse(typeSignature0.isBigintEnum());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DecimalType decimalType0 = DecimalType.createDecimalType(38, 38);
      QuantileDigestType quantileDigestType0 = new QuantileDigestType(decimalType0);
      List<Type> list0 = quantileDigestType0.getTypeParameters();
      FunctionType functionType0 = new FunctionType(list0, quantileDigestType0);
      TypeSignature typeSignature0 = functionType0.getTypeSignature();
      String string0 = typeSignature0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("varchar", set0);
      String string0 = typeSignature0.toString();
      assertFalse(set0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector<TypeSignatureParameter> vector0 = new Vector<TypeSignatureParameter>();
      TypeSignature typeSignature0 = new TypeSignature("Value %d is less than MIN_BYTE", vector0);
      String string0 = typeSignature0.toString();
      assertEquals("Value %d is less than MIN_BYTE", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("4pxkce.basicsliceinput{");
      String string0 = typeSignature0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(M(var");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(M(var'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(n,!.<", (Set<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(n,!.<'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("^CpTV(2X,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(row(\"zc#*b;,]<wr>8p", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(row(\"zc#*b;,]<wr>8p'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(\"zc#*b;,]<wr>8p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(\"zc#*b;,]<wr>8p'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("@-w");
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("@-w(6rray(com.facebook.presto.common.type.typesignature@0000000005)", (Set<String>) treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: '@-w(6rray(com.facebook.presto.common.type.typesignature@0000000005)'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("(varchar|bigint)enum(");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Expected baseName to be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("@-w(6rray(com.facebook.presto.common.type.typesignature@0000000005)", (Set<String>) treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: '@-w(6rray(com.facebook.presto.common.type.typesignature@0000000005)'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("integer");
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("integer", (Set<String>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'integer'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(rowA9varchar|bgnt)enum(", (Set<String>) treeSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Bad type signature: 'row(rowA9varchar|bgnt)enum('
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeSignature.parseTypeSignature("row(zc#*b;,]<wr>8p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad type signature: 'row(zc#*b;,]<wr>8p'
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("+");
      boolean boolean0 = typeSignature0.isEnum();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("wp");
      // Undeclared exception!
      try { 
        typeSignature0.getTypeParametersAsTypeSignatures();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected all parameters to be TypeSignatures but [java.lang.String@0000000004] was found
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeSignature typeSignature0 = null;
      try {
        typeSignature0 = new TypeSignature("map key cannot be null or contain nulls", (List<TypeSignatureParameter>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters is null
         //
         verifyException("com.facebook.presto.common.type.TypeSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("4PXKCE", "basicsliceinput{");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "basicsliceinput{");
      VarcharType varcharType0 = VarcharType.VARCHAR;
      TypeWithName typeWithName0 = new TypeWithName(qualifiedObjectName0, varcharType0);
      TypeSignature typeSignature0 = typeWithName0.getTypeSignature();
      typeSignature0.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("4PXKCE", "basicsliceinput{");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "basicsliceinput{");
      VarcharType varcharType0 = VarcharType.VARCHAR;
      TypeWithName typeWithName0 = new TypeWithName(qualifiedObjectName0, varcharType0);
      TypeSignature typeSignature0 = typeWithName0.getTypeSignature();
      TypeSignature typeSignature1 = typeSignature0.getStandardTypeSignature();
      boolean boolean0 = typeSignature1.equals(typeSignature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      List<Type> list0 = kdbTreeType0.getTypeParameters();
      FunctionType functionType0 = new FunctionType(list0, kdbTreeType0);
      ArrayType arrayType0 = new ArrayType(functionType0);
      TypeSignature typeSignature0 = arrayType0.getTypeSignature();
      List<TypeSignature> list1 = typeSignature0.getTypeParametersAsTypeSignatures();
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("4PXKCE", "basicsliceinput{");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "basicsliceinput{");
      VarcharType varcharType0 = VarcharType.VARCHAR;
      TypeWithName typeWithName0 = new TypeWithName(qualifiedObjectName0, varcharType0);
      TypeSignature typeSignature0 = typeWithName0.getTypeSignature();
      String string0 = typeSignature0.getBase();
      assertEquals("4pxkce.basicsliceinput{.basicsliceinput{:varchar", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("", "");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "}kcA|0rj.o7sm");
      TypeSignature typeSignature0 = new TypeSignature(qualifiedObjectName0);
      UserDefinedType userDefinedType0 = new UserDefinedType(qualifiedObjectName0, typeSignature0);
      TypeSignature typeSignature1 = null;
      try {
        typeSignature1 = new TypeSignature(userDefinedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TypeSignatureBase ..}kca|0rj.o7sm does not have standard type base
         //
         verifyException("com.facebook.presto.common.type.TypeSignatureBase", e);
      }
  }
}
