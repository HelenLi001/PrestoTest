/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:57:36 GMT 2021
 */

package com.facebook.presto.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.Page;
import com.facebook.presto.common.block.Block;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page page0 = new Page(0);
      // Undeclared exception!
      try { 
        page0.dropColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid channel 0 in page with 0 channels
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Page page0 = Page.wrapBlocksWithoutCopy((-2063), blockArray0);
      Page page1 = page0.dropColumn(0);
      assertEquals((-2063), page1.getPositionCount());
      assertEquals(1, page1.getChannelCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null, (Block) null).when(block1).copyPositions(any(int[].class) , anyInt() , anyInt());
      doReturn(block0, block0).when(block1).getLoadedBlock();
      doReturn(1975, 0, 0).when(block1).getPositionCount();
      blockArray0[0] = block1;
      blockArray0[1] = block1;
      Page page0 = new Page(blockArray0);
      page0.getLoadedPage();
      int[] intArray0 = new int[6];
      intArray0[1] = 48;
      intArray0[2] = 48;
      intArray0[3] = 48;
      intArray0[4] = 0;
      intArray0[5] = 48;
      Page page1 = page0.copyPositions(intArray0, (-1892), 48);
      // Undeclared exception!
      try { 
        page1.prependColumn(block1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column does not have same position count (0) as page (48)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Page page0 = new Page(0, blockArray0);
      // Undeclared exception!
      try { 
        page0.getRegion(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0L, (long)2402).when(block0).getLogicalSizeInBytes();
      doReturn(3079).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(3079, blockArray0);
      Page page1 = page0.prependColumn(block0);
      long long0 = page1.getLogicalSizeInBytes();
      assertEquals(2402L, long0);
      
      long long1 = page1.getApproximateLogicalSizeInBytes();
      assertEquals(2402L, long1);
      assertEquals(3079, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((long)2402).when(block0).getLogicalSizeInBytes();
      blockArray0[0] = block0;
      Page page0 = new Page(3079, blockArray0);
      page0.getLogicalSizeInBytes();
      long long0 = page0.getLogicalSizeInBytes();
      assertEquals(2402L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Block[] blockArray0 = new Block[0];
      Page page0 = Page.wrapBlocksWithoutCopy(0, blockArray0);
      assertEquals(0, page0.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      Page page0 = new Page(0, blockArray0);
      Page page1 = page0.prependColumn(block0);
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Block[] blockArray0 = new Block[8];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-2404), (-2404)).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      Page page1 = page0.prependColumn(block0);
      assertEquals((-2404), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Block[] blockArray0 = new Block[7];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      doReturn(0L, 0L, 0L, 0L, 0L).when(block0).getSizeInBytes();
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      blockArray0[2] = block0;
      blockArray0[3] = block0;
      blockArray0[4] = block0;
      blockArray0[5] = block0;
      blockArray0[6] = block0;
      Page page0 = new Page(blockArray0);
      long long0 = page0.getSizeInBytes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = new Page(3145);
      Page page1 = page0.getSingleValuePage(3145);
      assertEquals(1, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-1302L), (-1263L)).when(block0).getRetainedSizeInBytes();
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      Page page0 = new Page(2, blockArray0);
      long long0 = page0.getRetainedSizeInBytes();
      assertEquals((-2493L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page page0 = new Page(40);
      Page page1 = page0.getRegion(2147483639, 40);
      assertEquals(0, page1.getChannelCount());
      assertEquals(40, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      doReturn((Block) null).when(block0).getPositions(any(int[].class) , anyInt() , anyInt());
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      int[] intArray0 = new int[2];
      Page page1 = page0.getPositions(intArray0, 48, 2);
      assertEquals(2, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page page0 = new Page(0);
      int[] intArray0 = new int[6];
      Page page1 = page0.getPositions(intArray0, 48, 0);
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page page0 = new Page(0);
      int int0 = page0.getPositionCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Page page0 = new Page((-1726), blockArray0);
      int int0 = page0.getPositionCount();
      assertEquals((-1726), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-1330L), (long)(-1726), (-2032L), 427L, (long)(-1726)).when(block0).getLogicalSizeInBytes();
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      blockArray0[2] = block0;
      blockArray0[3] = block0;
      blockArray0[4] = block0;
      Page page0 = new Page((-1726), blockArray0);
      long long0 = page0.getLogicalSizeInBytes();
      assertEquals((-6387L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Page page0 = new Page((-2418));
      int[] intArray0 = new int[0];
      Page page1 = page0.getLoadedPage(intArray0);
      assertEquals((-2418), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Block[] blockArray0 = new Block[4];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      int[] intArray0 = new int[0];
      Page page1 = page0.getLoadedPage(intArray0);
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Block[] blockArray0 = new Block[4];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).getLoadedBlock();
      blockArray0[0] = block0;
      Page page0 = new Page(125, blockArray0);
      Page page1 = page0.getLoadedPage(0);
      assertEquals(125, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).getLoadedBlock();
      doReturn((-2379)).when(block0).getPositionCount();
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      Page page0 = new Page(blockArray0);
      Page page1 = page0.getLoadedPage(1);
      assertEquals((-2379), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Block[] blockArray0 = new Block[3];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      int int0 = page0.getChannelCount();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Block[] blockArray0 = new Block[9];
      Page page0 = Page.wrapBlocksWithoutCopy(0, blockArray0);
      page0.getBlock(0);
      assertEquals(0, page0.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Block[] blockArray0 = new Block[9];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn("").when(block0).toString();
      blockArray0[0] = block0;
      Page page0 = new Page(0, blockArray0);
      Block block1 = page0.getBlock(0);
      assertSame(block1, block0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Block[] blockArray0 = new Block[9];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((long)0, (-1L), 0L, (-1L), (-134L)).when(block0).getApproximateRegionLogicalSizeInBytes(anyInt() , anyInt());
      doReturn((-17), (-17), (-183), 32, 5).when(block0).getPositionCount();
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      blockArray0[2] = block0;
      blockArray0[3] = block0;
      blockArray0[4] = block0;
      blockArray0[5] = block0;
      blockArray0[6] = block0;
      blockArray0[7] = block0;
      blockArray0[8] = block0;
      Page page0 = new Page(0, blockArray0);
      page0.getApproximateLogicalSizeInBytes();
      // Undeclared exception!
      try { 
        page0.appendColumn(block0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Block does not have same position count
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Block[] blockArray0 = new Block[6];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null, (Block) null, (Block) null, (Block) null, (Block) null).when(block0).getRegion(anyInt() , anyInt());
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      blockArray0[2] = block0;
      blockArray0[3] = block0;
      blockArray0[4] = block0;
      blockArray0[5] = block0;
      Page page0 = Page.wrapBlocksWithoutCopy(4096, blockArray0);
      Page page1 = page0.getRegion(48, 0);
      int[] intArray0 = new int[0];
      Page page2 = page1.extractChannels(intArray0);
      assertEquals(0, page2.getPositionCount());
      assertEquals(4096, page0.getPositionCount());
      assertEquals(6, page1.getChannelCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Block[] blockArray0 = new Block[4];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      Page page1 = page0.extractChannel(0);
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Block[] blockArray0 = new Block[6];
      Page page0 = Page.wrapBlocksWithoutCopy(4096, blockArray0);
      Page page1 = page0.extractChannel(0);
      assertEquals(4096, page1.getPositionCount());
      assertEquals(4096, page0.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Block[] blockArray0 = new Block[7];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      Page page1 = page0.dropColumn(3);
      assertEquals(6, page1.getChannelCount());
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-2379)).when(block1).getPositionCount();
      doReturn(block0, block0, block0, block0, block0).when(block1).getSingleValueBlock(anyInt());
      blockArray0[0] = block1;
      blockArray0[1] = block1;
      blockArray0[2] = block1;
      blockArray0[3] = block1;
      blockArray0[4] = block1;
      Page page0 = new Page(blockArray0);
      Page page1 = page0.getSingleValuePage(48);
      Page page2 = page1.dropColumn(2);
      assertEquals(4, page2.getChannelCount());
      assertEquals(1, page1.getPositionCount());
      assertEquals(1, page2.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null, (Block) null).when(block0).copyPositions(any(int[].class) , anyInt() , anyInt());
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      Page page0 = new Page(178, blockArray0);
      int[] intArray0 = new int[2];
      Page page1 = page0.copyPositions(intArray0, (-3898), 0);
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null, (Block) null).when(block0).copyPositions(any(int[].class) , anyInt() , anyInt());
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      Page page0 = Page.wrapBlocksWithoutCopy((-2063), blockArray0);
      int[] intArray0 = new int[4];
      Page page1 = page0.copyPositions(intArray0, 3, (-2063));
      assertEquals((-2063), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[1];
      Page page0 = new Page(125);
      Page page1 = page0.copyPositions(intArray0, 125, 1800);
      assertEquals(1800, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Page page0 = new Page(0);
      Page page1 = page0.compact();
      assertSame(page1, page0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Block[] blockArray0 = new Block[3];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      Page page0 = new Page(0, blockArray0);
      Page page1 = page0.appendColumn(block0);
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(2944, 2944).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      Page page1 = page0.appendColumn(block0);
      assertEquals(2944, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Page.wrapBlocksWithoutCopy(1791, (Block[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // blocks is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(2392).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      // Undeclared exception!
      try { 
        page0.prependColumn(blockArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Block[] blockArray0 = new Block[6];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null, (Block) null, (Block) null, (Block) null, (Block) null).when(block0).getLoadedBlock();
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      blockArray0[2] = block0;
      blockArray0[3] = block0;
      blockArray0[4] = block0;
      blockArray0[5] = block0;
      Page page0 = Page.wrapBlocksWithoutCopy(0, blockArray0);
      Page page1 = page0.getLoadedPage();
      // Undeclared exception!
      try { 
        page1.getSingleValuePage(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Page page0 = new Page(4096);
      // Undeclared exception!
      try { 
        page0.getPositions((int[]) null, (-319), 1235);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // retainedPositions is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Page page0 = new Page(125);
      // Undeclared exception!
      try { 
        page0.getLoadedPage((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // channels is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 48;
      // Undeclared exception!
      try { 
        page0.getLoadedPage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).copyPositions(any(int[].class) , anyInt() , anyInt());
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      int[] intArray0 = new int[2];
      Page page1 = page0.copyPositions(intArray0, 125, 3);
      // Undeclared exception!
      try { 
        page1.getLoadedPage(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      // Undeclared exception!
      try { 
        page0.getLoadedPage(240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 240
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Block[] blockArray0 = new Block[4];
      Page page0 = Page.wrapBlocksWithoutCopy(0, blockArray0);
      // Undeclared exception!
      try { 
        page0.extractChannels((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // channels is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-2114)).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-4214);
      // Undeclared exception!
      try { 
        page0.extractChannels(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4214
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Page page0 = new Page(2, blockArray0);
      // Undeclared exception!
      try { 
        page0.extractChannel(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Block[] blockArray0 = new Block[6];
      Page page0 = Page.wrapBlocksWithoutCopy(0, blockArray0);
      // Undeclared exception!
      try { 
        page0.copyPositions((int[]) null, 30, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // retainedPositions is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).copyRegion(anyInt() , anyInt());
      doReturn(0, 0).when(block0).getPositionCount();
      doReturn(0L).when(block0).getRetainedSizeInBytes();
      doReturn(0L).when(block0).getSizeInBytes();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      // Undeclared exception!
      try { 
        page0.compact();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Block[] blockArray0 = new Block[4];
      Page page0 = Page.wrapBlocksWithoutCopy((-379), blockArray0);
      // Undeclared exception!
      try { 
        page0.appendColumn((Block) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // block is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Page page0 = null;
      try {
        page0 = new Page((Block[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // blocks is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Page page0 = null;
      try {
        page0 = new Page(4, (Block[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // blocks is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Page page0 = new Page(3079, blockArray0);
      // Undeclared exception!
      try { 
        page0.getRetainedSizeInBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((long)3079).when(block0).getRetainedSizeInBytes();
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(block1).copyRegion(anyInt() , anyInt());
      doReturn(3079).when(block1).getPositionCount();
      doReturn(0L).when(block1).getRetainedSizeInBytes();
      doReturn((-1207L)).when(block1).getSizeInBytes();
      blockArray0[0] = block1;
      Page page0 = new Page(3079, blockArray0);
      page0.compact();
      long long0 = page0.getRetainedSizeInBytes();
      assertEquals(3147L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-1207L)).when(block0).getSizeInBytes();
      blockArray0[0] = block0;
      Page page0 = new Page(3079, blockArray0);
      long long0 = page0.getSizeInBytes();
      assertEquals((-1207L), long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-2648L)).when(block0).getRetainedSizeInBytes();
      doReturn((long)3079).when(block0).getSizeInBytes();
      blockArray0[0] = block0;
      Page page0 = new Page(3079, blockArray0);
      Page page1 = page0.compact();
      long long0 = page1.getSizeInBytes();
      assertEquals(3079L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Block[] blockArray0 = new Block[17];
      Page page0 = Page.wrapBlocksWithoutCopy((-37), blockArray0);
      // Undeclared exception!
      try { 
        page0.getSizeInBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Page page0 = new Page((-1726));
      int int0 = page0.getChannelCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Block[] blockArray0 = new Block[8];
      Page page0 = new Page(3, blockArray0);
      // Undeclared exception!
      try { 
        page0.dropColumn(1575);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid channel 1575 in page with 8 channels
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Page page0 = new Page((-1317));
      // Undeclared exception!
      try { 
        page0.dropColumn((-1317));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid channel -1317 in page with 0 channels
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Block[] blockArray0 = new Block[2];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(1975, 0, 0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      // Undeclared exception!
      try { 
        page0.prependColumn(block0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column does not have same position count (0) as page (1975)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Page page0 = new Page((-1726), blockArray0);
      int[] intArray0 = new int[4];
      Page page1 = page0.extractChannels(intArray0);
      assertEquals((-1726), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Page page0 = new Page(10);
      int[] intArray0 = new int[0];
      Page page1 = page0.extractChannels(intArray0);
      assertEquals(10, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).getPositions(any(int[].class) , anyInt() , anyInt());
      blockArray0[0] = block0;
      Page page0 = new Page(3079, blockArray0);
      int[] intArray0 = new int[8];
      Page page1 = page0.getPositions(intArray0, 3079, (-1807));
      assertEquals((-1807), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Block[] blockArray0 = new Block[0];
      Page page0 = null;
      try {
        page0 = new Page(blockArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blocks is empty
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Block[] blockArray0 = new Block[4];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).getLoadedBlock();
      blockArray0[0] = block0;
      int[] intArray0 = new int[1];
      Page page0 = Page.wrapBlocksWithoutCopy(1724, blockArray0);
      Page page1 = page0.getLoadedPage(intArray0);
      assertEquals(1724, page1.getPositionCount());
      assertEquals(1724, page0.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Block[] blockArray0 = new Block[7];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null, (Block) null, (Block) null, (Block) null, (Block) null).when(block0).getLoadedBlock();
      blockArray0[0] = block0;
      blockArray0[1] = block0;
      blockArray0[2] = block0;
      blockArray0[3] = block0;
      blockArray0[4] = block0;
      blockArray0[5] = block0;
      blockArray0[6] = block0;
      Page page0 = new Page((-3328), blockArray0);
      Page page1 = page0.getLoadedPage();
      assertEquals((-3328), page1.getPositionCount());
      assertNotSame(page1, page0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Block[] blockArray0 = new Block[7];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).getLoadedBlock();
      blockArray0[0] = block0;
      Page page0 = new Page((-3328), blockArray0);
      // Undeclared exception!
      try { 
        page0.getLoadedPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Page page0 = new Page(4096);
      Page page1 = page0.getLoadedPage();
      assertEquals(4096, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Block[] blockArray0 = new Block[9];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-1455)).when(block0).getPositionCount();
      Page page0 = new Page(0, blockArray0);
      // Undeclared exception!
      try { 
        page0.appendColumn(block0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Block does not have same position count
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-2492), (-2492)).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      assertEquals((-2492), page0.getPositionCount());
      
      Page page1 = page0.appendColumn(block0);
      assertEquals((-2492), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-2379)).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      // Undeclared exception!
      try { 
        page0.getRegion(48, (-2379));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid position 48 and length -2379 in page with -2379 positions
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((-2492)).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      // Undeclared exception!
      try { 
        page0.getRegion(228, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid position 228 and length 48 in page with -2492 positions
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Page page0 = new Page(3079, blockArray0);
      // Undeclared exception!
      try { 
        page0.getRegion((-379), 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid position -379 and length 29 in page with 3079 positions
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Page page0 = new Page((-1317));
      Page page1 = page0.compact();
      assertEquals((-1317), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Block[] blockArray0 = new Block[9];
      Page page0 = new Page(0, blockArray0);
      // Undeclared exception!
      try { 
        page0.getApproximateLogicalSizeInBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Page page0 = new Page((-1317));
      long long0 = page0.getApproximateLogicalSizeInBytes();
      assertEquals((-1317), page0.getPositionCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(block0).getLogicalSizeInBytes();
      blockArray0[0] = block0;
      Page page0 = new Page(3079, blockArray0);
      long long0 = page0.getLogicalSizeInBytes();
      assertEquals(0L, long0);
      assertEquals(3079, page0.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Page page0 = new Page(3079, blockArray0);
      // Undeclared exception!
      try { 
        page0.getLogicalSizeInBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Page page0 = new Page((-1726));
      long long0 = page0.getLogicalSizeInBytes();
      assertEquals((-1726), page0.getPositionCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Block[] blockArray0 = new Block[5];
      Page page0 = Page.wrapBlocksWithoutCopy((-779), blockArray0);
      Page page1 = page0.extractChannel(2);
      assertEquals((-779), page0.getPositionCount());
      assertEquals((-779), page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Page page0 = new Page(3079, blockArray0);
      String string0 = page0.toString();
      assertEquals("Page{positions=3079, channels=1}@1", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Page page0 = new Page((-1726));
      // Undeclared exception!
      try { 
        page0.getBlock(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).getLoadedBlock();
      doReturn(0).when(block0).getPositionCount();
      blockArray0[0] = block0;
      Page page0 = new Page(blockArray0);
      assertEquals(1, page0.getChannelCount());
      
      Page page1 = page0.getLoadedPage(0);
      assertEquals(0, page1.getPositionCount());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Block[] blockArray0 = new Block[1];
      Page page0 = new Page(3079, blockArray0);
      int int0 = page0.getPositionCount();
      assertEquals(3079, int0);
      assertEquals(1, page0.getChannelCount());
  }
}
