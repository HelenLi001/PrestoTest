/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 23:04:53 GMT 2021
 */

package com.facebook.presto.common.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.block.AbstractMapBlock;
import com.facebook.presto.common.block.Block;
import java.lang.invoke.MethodHandle;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMapBlock_ESTest extends AbstractMapBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[21];
      Optional<int[]> optional0 = Optional.ofNullable(intArray0);
      AbstractMapBlock.HashTables abstractMapBlock_HashTables0 = new AbstractMapBlock.HashTables(optional0, 44);
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        abstractMapBlock_HashTables0.loadHashTables(44, intArray0, booleanArray0, (Block) null, (MethodHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.block.AbstractMapBlock$HashTables", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Optional<int[]> optional0 = Optional.empty();
      AbstractMapBlock.HashTables abstractMapBlock_HashTables0 = new AbstractMapBlock.HashTables(optional0, (-1867));
      int int0 = abstractMapBlock_HashTables0.getExpectedHashTableCount();
      assertEquals((-1867), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Optional<int[]> optional0 = Optional.empty();
      AbstractMapBlock.HashTables abstractMapBlock_HashTables0 = new AbstractMapBlock.HashTables(optional0, (-1867));
      int[] intArray0 = abstractMapBlock_HashTables0.get();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[2];
      Optional<int[]> optional0 = Optional.ofNullable(intArray0);
      AbstractMapBlock.HashTables abstractMapBlock_HashTables0 = new AbstractMapBlock.HashTables(optional0, (-33));
      abstractMapBlock_HashTables0.setExpectedHashTableCount((-33));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[2];
      Optional<int[]> optional0 = Optional.ofNullable(intArray0);
      AbstractMapBlock.HashTables abstractMapBlock_HashTables0 = new AbstractMapBlock.HashTables(optional0, (-33));
      long long0 = abstractMapBlock_HashTables0.getRetainedSizeInBytes();
      assertEquals(48L, long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[2];
      Optional<int[]> optional0 = Optional.ofNullable(intArray0);
      AbstractMapBlock.HashTables abstractMapBlock_HashTables0 = new AbstractMapBlock.HashTables(optional0, (-33));
      abstractMapBlock_HashTables0.set(intArray0);
  }
}
