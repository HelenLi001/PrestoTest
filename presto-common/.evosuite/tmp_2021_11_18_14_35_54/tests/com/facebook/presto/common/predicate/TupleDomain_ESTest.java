/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:45:11 GMT 2021
 */

package com.facebook.presto.common.predicate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.function.SqlFunctionProperties;
import com.facebook.presto.common.predicate.AllOrNoneValueSet;
import com.facebook.presto.common.predicate.Domain;
import com.facebook.presto.common.predicate.EquatableValueSet;
import com.facebook.presto.common.predicate.SortedRangeSet;
import com.facebook.presto.common.predicate.TupleDomain;
import com.facebook.presto.common.predicate.ValueSet;
import com.facebook.presto.common.type.BigintEnumType;
import com.facebook.presto.common.type.P4HyperLogLogType;
import com.facebook.presto.common.type.TimeType;
import com.facebook.presto.common.type.VarbinaryType;
import java.lang.reflect.Array;
import java.sql.SQLClientInfoException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.Stack;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.Collector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TupleDomain_ESTest extends TupleDomain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        TupleDomain.withColumnDomains((Map<LinkedList<AllOrNoneValueSet>, Domain>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // domains is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TupleDomain<TupleDomain.ColumnDomain<EquatableValueSet>> tupleDomain0 = TupleDomain.all();
      // Undeclared exception!
      try { 
        tupleDomain0.overlaps((TupleDomain<TupleDomain.ColumnDomain<EquatableValueSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.predicate.TupleDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<EquatableValueSet, Domain> hashMap0 = new HashMap<EquatableValueSet, Domain>(122, 122);
      TupleDomain<EquatableValueSet> tupleDomain0 = TupleDomain.withColumnDomains((Map<EquatableValueSet, Domain>) hashMap0);
      // Undeclared exception!
      try { 
        tupleDomain0.intersect((TupleDomain<EquatableValueSet>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.predicate.TupleDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TupleDomain.fromColumnDomains((Optional<List<TupleDomain.ColumnDomain<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.predicate.TupleDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TupleDomain<Optional<AllOrNoneValueSet>> tupleDomain0 = TupleDomain.none();
      // Undeclared exception!
      try { 
        tupleDomain0.contains((TupleDomain<Optional<AllOrNoneValueSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.predicate.TupleDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        TupleDomain.columnWiseUnion((List<TupleDomain<SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TupleDomain<Optional<Integer>> tupleDomain0 = TupleDomain.all();
      TupleDomain<Optional<Integer>>[] tupleDomainArray0 = (TupleDomain<Optional<Integer>>[]) Array.newInstance(TupleDomain.class, 2);
      TupleDomain<Optional<Integer>> tupleDomain1 = TupleDomain.columnWiseUnion(tupleDomain0, tupleDomain0, tupleDomainArray0);
      boolean boolean0 = tupleDomain1.equals(tupleDomain0);
      assertTrue(boolean0);
      assertNotSame(tupleDomain1, tupleDomain0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<EquatableValueSet, Domain> hashMap0 = new HashMap<EquatableValueSet, Domain>();
      TupleDomain<EquatableValueSet> tupleDomain0 = TupleDomain.withColumnDomains((Map<EquatableValueSet, Domain>) hashMap0);
      boolean boolean0 = tupleDomain0.equals(tupleDomain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TupleDomain<TupleDomain.ColumnDomain<String>>> linkedList0 = new LinkedList<TupleDomain<TupleDomain.ColumnDomain<String>>>();
      TupleDomain<TupleDomain.ColumnDomain<String>> tupleDomain0 = TupleDomain.all();
      linkedList0.add(tupleDomain0);
      linkedList0.add((TupleDomain<TupleDomain.ColumnDomain<String>>) null);
      TupleDomain<TupleDomain.ColumnDomain<String>> tupleDomain1 = TupleDomain.columnWiseUnion((List<TupleDomain<TupleDomain.ColumnDomain<String>>>) linkedList0);
      assertNotSame(tupleDomain1, tupleDomain0);
      assertTrue(linkedList0.contains(tupleDomain1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Domain> hashMap0 = new HashMap<Integer, Domain>();
      TupleDomain<Integer> tupleDomain0 = TupleDomain.withColumnDomains((Map<Integer, Domain>) hashMap0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      TupleDomain<Integer> tupleDomain1 = tupleDomain0.transform((Function<Integer, Integer>) unaryOperator0);
      TupleDomain<Integer> tupleDomain2 = tupleDomain0.intersect(tupleDomain1);
      assertSame(tupleDomain2, tupleDomain1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TupleDomain<Object> tupleDomain0 = TupleDomain.all();
      TupleDomain<Object> tupleDomain1 = TupleDomain.none();
      TupleDomain<Object> tupleDomain2 = tupleDomain0.intersect(tupleDomain1);
      assertNotSame(tupleDomain2, tupleDomain1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TupleDomain<LinkedHashSet<SQLClientInfoException>> tupleDomain0 = TupleDomain.all();
      boolean boolean0 = tupleDomain0.isNone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TupleDomain<AllOrNoneValueSet> tupleDomain0 = TupleDomain.none();
      boolean boolean0 = tupleDomain0.isNone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TupleDomain<Domain> tupleDomain0 = TupleDomain.none();
      boolean boolean0 = tupleDomain0.isAll();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TupleDomain<ValueSet> tupleDomain0 = TupleDomain.all();
      boolean boolean0 = tupleDomain0.isAll();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Collector<Locale.Category, ?, Map<EquatableValueSet, Object>> collector0 = TupleDomain.toLinkedMap((Function<? super Locale.Category, ? extends EquatableValueSet>) null, (Function<? super Locale.Category, ?>) null);
      assertNotNull(collector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<List<TupleDomain.ColumnDomain<AllOrNoneValueSet>>, Domain> hashMap0 = new HashMap<List<TupleDomain.ColumnDomain<AllOrNoneValueSet>>, Domain>();
      TupleDomain<List<TupleDomain.ColumnDomain<AllOrNoneValueSet>>> tupleDomain0 = TupleDomain.withColumnDomains((Map<List<TupleDomain.ColumnDomain<AllOrNoneValueSet>>, Domain>) hashMap0);
      Optional<Map<List<TupleDomain.ColumnDomain<AllOrNoneValueSet>>, Domain>> optional0 = tupleDomain0.getDomains();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TupleDomain<SortedRangeSet> tupleDomain0 = TupleDomain.none();
      TupleDomain<SortedRangeSet> tupleDomain1 = tupleDomain0.simplify();
      assertSame(tupleDomain0, tupleDomain1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TupleDomain<SortedRangeSet> tupleDomain0 = TupleDomain.none();
      TupleDomain<AllOrNoneValueSet> tupleDomain1 = tupleDomain0.transform((Function<SortedRangeSet, AllOrNoneValueSet>) null);
      assertNotNull(tupleDomain1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TupleDomain<Domain> tupleDomain0 = TupleDomain.all();
      String string0 = tupleDomain0.toString((SqlFunctionProperties) null);
      assertEquals("ALL", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TupleDomain<Locale.Category> tupleDomain0 = TupleDomain.none();
      String string0 = tupleDomain0.toString((SqlFunctionProperties) null);
      assertEquals("NONE", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TupleDomain<Domain> tupleDomain0 = TupleDomain.all();
      TupleDomain<SortedRangeSet> tupleDomain1 = tupleDomain0.transform((Function<Domain, SortedRangeSet>) null);
      String string0 = tupleDomain1.toString();
      assertEquals("TupleDomain{ALL}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TupleDomain<TupleDomain<Domain>> tupleDomain0 = TupleDomain.none();
      String string0 = tupleDomain0.toString();
      assertEquals("TupleDomain{NONE}", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TupleDomain<TupleDomain<Domain>> tupleDomain0 = TupleDomain.none();
      boolean boolean0 = tupleDomain0.equals("domain is null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TupleDomain<Object> tupleDomain0 = TupleDomain.none();
      TupleDomain<Object> tupleDomain1 = TupleDomain.all();
      boolean boolean0 = tupleDomain0.contains(tupleDomain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TupleDomain<SQLClientInfoException> tupleDomain0 = TupleDomain.all();
      boolean boolean0 = tupleDomain0.contains(tupleDomain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Optional<List<TupleDomain.ColumnDomain<LinkedHashSet<AllOrNoneValueSet>>>> optional0 = Optional.ofNullable((List<TupleDomain.ColumnDomain<LinkedHashSet<AllOrNoneValueSet>>>) null);
      TupleDomain<LinkedHashSet<AllOrNoneValueSet>> tupleDomain0 = TupleDomain.fromColumnDomains((Optional<List<TupleDomain.ColumnDomain<LinkedHashSet<AllOrNoneValueSet>>>>) optional0);
      boolean boolean0 = tupleDomain0.contains(tupleDomain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Optional<List<TupleDomain.ColumnDomain<SortedRangeSet>>> optional0 = Optional.empty();
      TupleDomain<SortedRangeSet> tupleDomain0 = TupleDomain.fromColumnDomains((Optional<List<TupleDomain.ColumnDomain<SortedRangeSet>>>) optional0);
      TupleDomain<SortedRangeSet>[] tupleDomainArray0 = (TupleDomain<SortedRangeSet>[]) Array.newInstance(TupleDomain.class, 9);
      tupleDomainArray0[0] = tupleDomain0;
      tupleDomainArray0[1] = tupleDomain0;
      tupleDomainArray0[2] = tupleDomain0;
      tupleDomainArray0[3] = tupleDomain0;
      tupleDomainArray0[4] = tupleDomain0;
      tupleDomainArray0[5] = tupleDomain0;
      tupleDomainArray0[6] = tupleDomain0;
      tupleDomainArray0[7] = tupleDomain0;
      tupleDomainArray0[8] = tupleDomain0;
      TupleDomain<SortedRangeSet> tupleDomain1 = TupleDomain.columnWiseUnion(tupleDomain0, tupleDomain0, tupleDomainArray0);
      assertNotSame(tupleDomain1, tupleDomain0);
      assertTrue(tupleDomain1.equals((Object)tupleDomain0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<TupleDomain<TimeType>> stack0 = new Stack<TupleDomain<TimeType>>();
      HashMap<TimeType, Domain> hashMap0 = new HashMap<TimeType, Domain>();
      TupleDomain<TimeType> tupleDomain0 = TupleDomain.withColumnDomains((Map<TimeType, Domain>) hashMap0);
      stack0.add(tupleDomain0);
      TupleDomain<TimeType> tupleDomain1 = TupleDomain.columnWiseUnion((List<TupleDomain<TimeType>>) stack0);
      assertSame(tupleDomain1, tupleDomain0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<TupleDomain<Integer>> arrayList0 = new ArrayList<TupleDomain<Integer>>();
      // Undeclared exception!
      try { 
        TupleDomain.columnWiseUnion((List<TupleDomain<Integer>>) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tupleDomains must have at least one element
         //
         verifyException("com.facebook.presto.common.predicate.TupleDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TupleDomain<String> tupleDomain0 = TupleDomain.all();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      BigintEnumType.LongEnumMap bigintEnumType_LongEnumMap0 = new BigintEnumType.LongEnumMap("1HLb]E_z=h?=W)", hashMap0);
      BigintEnumType bigintEnumType0 = new BigintEnumType(bigintEnumType_LongEnumMap0);
      AllOrNoneValueSet allOrNoneValueSet0 = new AllOrNoneValueSet(bigintEnumType0, false);
      Domain domain0 = Domain.create(allOrNoneValueSet0, true);
      HashMap<String, Domain> hashMap1 = new HashMap<String, Domain>();
      hashMap1.put("Mismatched Marker types: %s vs %s", domain0);
      TupleDomain<String> tupleDomain1 = TupleDomain.withColumnDomains((Map<String, Domain>) hashMap1);
      boolean boolean0 = tupleDomain0.overlaps(tupleDomain1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TupleDomain<String> tupleDomain0 = TupleDomain.all();
      TupleDomain<String> tupleDomain1 = TupleDomain.none();
      boolean boolean0 = tupleDomain0.overlaps(tupleDomain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TupleDomain<EquatableValueSet> tupleDomain0 = TupleDomain.all();
      TupleDomain<EquatableValueSet> tupleDomain1 = tupleDomain0.intersect(tupleDomain0);
      assertSame(tupleDomain1, tupleDomain0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TupleDomain<SortedRangeSet> tupleDomain0 = TupleDomain.none();
      TupleDomain<SortedRangeSet> tupleDomain1 = tupleDomain0.intersect(tupleDomain0);
      assertNotSame(tupleDomain1, tupleDomain0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TupleDomain<EquatableValueSet> tupleDomain0 = TupleDomain.all();
      TupleDomain<EquatableValueSet> tupleDomain1 = tupleDomain0.simplify();
      assertNotSame(tupleDomain1, tupleDomain0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Optional<List<TupleDomain.ColumnDomain<SortedRangeSet>>> optional0 = Optional.empty();
      TupleDomain<SortedRangeSet> tupleDomain0 = TupleDomain.fromColumnDomains((Optional<List<TupleDomain.ColumnDomain<SortedRangeSet>>>) optional0);
      TupleDomain<SortedRangeSet>[] tupleDomainArray0 = (TupleDomain<SortedRangeSet>[]) Array.newInstance(TupleDomain.class, 9);
      // Undeclared exception!
      try { 
        TupleDomain.columnWiseUnion(tupleDomain0, tupleDomain0, tupleDomainArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.predicate.TupleDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TupleDomain<LinkedHashSet<ValueSet>> tupleDomain0 = TupleDomain.none();
      tupleDomain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TupleDomain<SortedRangeSet> tupleDomain0 = TupleDomain.none();
      TupleDomain<SortedRangeSet> tupleDomain1 = tupleDomain0.compact((-10));
      assertNotSame(tupleDomain0, tupleDomain1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TupleDomain<EquatableValueSet> tupleDomain0 = TupleDomain.all();
      Optional<List<TupleDomain.ColumnDomain<EquatableValueSet>>> optional0 = (Optional<List<TupleDomain.ColumnDomain<EquatableValueSet>>>)tupleDomain0.getColumnDomains();
      TupleDomain<EquatableValueSet> tupleDomain1 = TupleDomain.fromColumnDomains((Optional<List<TupleDomain.ColumnDomain<EquatableValueSet>>>) optional0);
      assertTrue(tupleDomain1.equals((Object)tupleDomain0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TupleDomain<Optional<Integer>> tupleDomain0 = TupleDomain.all();
      TupleDomain<Optional<Integer>>[] tupleDomainArray0 = (TupleDomain<Optional<Integer>>[]) Array.newInstance(TupleDomain.class, 17);
      tupleDomainArray0[0] = tupleDomain0;
      boolean boolean0 = tupleDomainArray0[0].equals(tupleDomainArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      AllOrNoneValueSet allOrNoneValueSet0 = AllOrNoneValueSet.all(varbinaryType0);
      Domain domain0 = Domain.notNull(varbinaryType0);
      TupleDomain.ColumnDomain<AllOrNoneValueSet> tupleDomain_ColumnDomain0 = new TupleDomain.ColumnDomain<AllOrNoneValueSet>(allOrNoneValueSet0, domain0);
      Domain domain1 = tupleDomain_ColumnDomain0.getDomain();
      assertFalse(domain1.isNullAllowed());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>(arrayList0);
      P4HyperLogLogType p4HyperLogLogType0 = P4HyperLogLogType.P4_HYPER_LOG_LOG;
      Domain domain0 = Domain.onlyNull(p4HyperLogLogType0);
      TupleDomain.ColumnDomain<LinkedList<SQLClientInfoException>> tupleDomain_ColumnDomain0 = new TupleDomain.ColumnDomain<LinkedList<SQLClientInfoException>>(linkedList0, domain0);
      LinkedList<SQLClientInfoException> linkedList1 = tupleDomain_ColumnDomain0.getColumn();
      assertSame(linkedList1, linkedList0);
  }
}
