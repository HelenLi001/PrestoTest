/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 18 22:49:14 GMT 2021
 */

package com.facebook.presto.common.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.TimeZoneKey;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeZoneKey_ESTest extends TimeZoneKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey("UT~C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Time zone not supported: UT~C
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("etc/}H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKeyForOffset(840L);
      assertEquals("+14:00", timeZoneKey0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKeyForOffset((-840L));
      assertEquals((short)1, timeZoneKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey((short)2231);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid time zone key 2231
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = new TimeZoneKey("", (short)885);
      timeZoneKey0.toString();
      assertEquals((short)885, timeZoneKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey((short)0);
      assertEquals("UTC", timeZoneKey0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = new TimeZoneKey("", (short)2);
      timeZoneKey0.getId();
      assertEquals((short)2, timeZoneKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.isUtcZoneId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey((short) (-29768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -29768
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone id is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = null;
      try {
        timeZoneKey0 = new TimeZoneKey((String) null, (short)549);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("universal");
      assertEquals("UTC", timeZoneKey0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("greenwich");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("gmt0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("gmt");
      assertEquals((short)0, timeZoneKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("uct");
      assertEquals((short)2230, TimeZoneKey.MAX_TIME_ZONE_KEY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("ut");
      assertEquals((short)0, timeZoneKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("z");
      assertEquals("UTC", timeZoneKey0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("UTC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey("-e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Time zone not supported: -e
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("-Hi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("-1");
      assertEquals("-01:00", timeZoneKey0.getId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("eNc/pp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("+00:01");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("-00:00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("+00:00");
      assertEquals("UTC", timeZoneKey0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("ut+0");
      assertEquals((short)2230, TimeZoneKey.MAX_TIME_ZONE_KEY);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey("etc/utcgq=n7]-,5k9:?$p2%x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Time zone not supported: etc/utcgq=n7]-,5k9:?$p2%x
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("utc.=8l@_uqoyvnaw{e}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = TimeZoneKey.isUtcZoneId("etc/gmt1<pv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("zulu");
      boolean boolean0 = timeZoneKey0.equals("zulu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = new TimeZoneKey("", (short)885);
      boolean boolean0 = timeZoneKey0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((short)885, timeZoneKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.UTC_KEY;
      boolean boolean0 = timeZoneKey0.equals(timeZoneKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.UTC_KEY;
      TimeZoneKey timeZoneKey1 = new TimeZoneKey("ut+0", (short)2230);
      boolean boolean0 = timeZoneKey0.equals(timeZoneKey1);
      assertEquals((short)2230, timeZoneKey1.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = null;
      try {
        timeZoneKey0 = new TimeZoneKey("Zone file should not contain a mapping for key 0", (short) (-818));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key is negative
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKeyForOffset((short)2230);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid offset minutes 2230
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKeyForOffset((-987L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid offset minutes -987
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKeyForOffset(0L);
      assertEquals((short)2230, TimeZoneKey.MAX_TIME_ZONE_KEY);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKeyForOffset(1L);
      short short0 = timeZoneKey0.getKey();
      assertEquals((short)841, short0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("+00:01");
      assertEquals((short)841, timeZoneKey0.getKey());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zone id is an empty string
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZoneKey.getTimeZoneKey((short)32596);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid time zone key 32596
         //
         verifyException("com.facebook.presto.common.type.TimeZoneKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.UTC_KEY;
      String string0 = timeZoneKey0.toString();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.UTC_KEY;
      timeZoneKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey((short)1);
      String string0 = timeZoneKey0.getId();
      assertEquals("-14:00", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = TimeZoneKey.getTimeZoneKey("zulu");
      short short0 = timeZoneKey0.getKey();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Set<TimeZoneKey> set0 = TimeZoneKey.getTimeZoneKeys();
      assertFalse(set0.isEmpty());
  }
}
