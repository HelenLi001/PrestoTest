/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 08:53:34 GMT 2021
 */

package com.facebook.presto.druid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.druid.DruidColumnHandle;
import com.facebook.presto.spi.ColumnMetadata;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DruidColumnHandle_ESTest extends DruidColumnHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("", type0);
      String string0 = druidColumnHandle0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("", type0);
      // Undeclared exception!
      try { 
        druidColumnHandle0.getColumnMetadata();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.DERIVED;
      DruidColumnHandle druidColumnHandle0 = null;
      try {
        druidColumnHandle0 = new DruidColumnHandle((String) null, type0, druidColumnHandle_DruidColumnType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnName is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DruidColumnHandle druidColumnHandle0 = null;
      try {
        druidColumnHandle0 = new DruidColumnHandle("", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.REGULAR;
      DruidColumnHandle druidColumnHandle0 = null;
      try {
        druidColumnHandle0 = new DruidColumnHandle((VariableReferenceExpression) null, druidColumnHandle_DruidColumnType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.druid.DruidColumnHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.REGULAR;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("^SW@<", type0, druidColumnHandle_DruidColumnType0);
      Type type1 = druidColumnHandle0.getColumnType();
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.DERIVED;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("9<sq0mHhmy.", type0, druidColumnHandle_DruidColumnType0);
      String string0 = druidColumnHandle0.getColumnName();
      assertEquals("9<sq0mHhmy.", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.REGULAR;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("KA", type0, druidColumnHandle_DruidColumnType0);
      DruidColumnHandle druidColumnHandle1 = new DruidColumnHandle("KA", type0, druidColumnHandle_DruidColumnType0);
      boolean boolean0 = druidColumnHandle0.equals(druidColumnHandle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("", type0);
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.REGULAR;
      DruidColumnHandle druidColumnHandle1 = new DruidColumnHandle("", type1, druidColumnHandle_DruidColumnType0);
      boolean boolean0 = druidColumnHandle0.equals(druidColumnHandle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.DERIVED;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("9<sq0mHhmy.", type0, druidColumnHandle_DruidColumnType0);
      boolean boolean0 = druidColumnHandle0.equals(druidColumnHandle_DruidColumnType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.DERIVED;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("9<sq0mHhmy.", type0, druidColumnHandle_DruidColumnType0);
      boolean boolean0 = druidColumnHandle0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      VariableReferenceExpression variableReferenceExpression0 = mock(VariableReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn("Fk").when(variableReferenceExpression0).getName();
      doReturn(type0).when(variableReferenceExpression0).getType();
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.DERIVED;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle(variableReferenceExpression0, druidColumnHandle_DruidColumnType0);
      boolean boolean0 = druidColumnHandle0.equals(druidColumnHandle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("AUTO", type0);
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle druidColumnHandle1 = new DruidColumnHandle("Hpn", type1);
      boolean boolean0 = druidColumnHandle0.equals(druidColumnHandle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.REGULAR;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("KA", type0, druidColumnHandle_DruidColumnType0);
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType1 = druidColumnHandle0.getType();
      assertSame(druidColumnHandle_DruidColumnType0, druidColumnHandle_DruidColumnType1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      VariableReferenceExpression variableReferenceExpression0 = mock(VariableReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn("Fk").when(variableReferenceExpression0).getName();
      doReturn(type0).when(variableReferenceExpression0).getType();
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.DERIVED;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle(variableReferenceExpression0, druidColumnHandle_DruidColumnType0);
      druidColumnHandle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("Fk", "Fk").when(type0).toString();
      VariableReferenceExpression variableReferenceExpression0 = mock(VariableReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn("Fk").when(variableReferenceExpression0).getName();
      doReturn(type0).when(variableReferenceExpression0).getType();
      DruidColumnHandle.DruidColumnType druidColumnHandle_DruidColumnType0 = DruidColumnHandle.DruidColumnType.DERIVED;
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle(variableReferenceExpression0, druidColumnHandle_DruidColumnType0);
      ColumnMetadata columnMetadata0 = druidColumnHandle0.getColumnMetadata();
      assertTrue(columnMetadata0.isNullable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("AUTO").when(type0).toString();
      DruidColumnHandle druidColumnHandle0 = new DruidColumnHandle("AUTO", type0);
      String string0 = druidColumnHandle0.toString();
      assertEquals("DruidColumnHandle{columnName=AUTO, columnType=AUTO, type=REGULAR}", string0);
  }
}
