/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 08:45:55 GMT 2021
 */

package com.facebook.presto.druid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.druid.DruidConfig;
import io.airlift.units.Duration;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DruidConfig_ESTest extends DruidConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setComputePushdownEnabled(true);
      druidConfig0.setIngestionStoragePath("");
      assertTrue(druidConfig0.isComputePushdownEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig1.setIngestionStoragePath((String) null);
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      List<String> list0 = druidConfig0.getHadoopConfiguration();
      druidConfig0.setComputePushdownEnabled(true);
      druidConfig0.setHadoopConfiguration(list0);
      assertTrue(druidConfig0.isComputePushdownEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setCaseInsensitiveNameMatching(true);
      List<String> list0 = druidConfig0.getHadoopConfiguration();
      druidConfig0.setHadoopConfiguration(list0);
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setComputePushdownEnabled(true);
      druidConfig1.setHadoopConfiguration("");
      assertTrue(druidConfig0.isComputePushdownEnabled());
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig0.setHadoopConfiguration("R8vj;;.iFH7");
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setComputePushdownEnabled(true);
      druidConfig0.setDruidSchema("");
      assertTrue(druidConfig0.isComputePushdownEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig0.setDruidSchema("HT|J&QqSBb;");
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setComputePushdownEnabled(true);
      druidConfig1.setDruidCoordinatorUrl("");
      assertTrue(druidConfig0.isComputePushdownEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig1.setDruidCoordinatorUrl("R8vj;;.iFH7");
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setComputePushdownEnabled(true);
      druidConfig0.setDruidBrokerUrl("Yt!<c)|ZK");
      assertTrue(druidConfig0.isComputePushdownEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig1.setDruidBrokerUrl("#]*r}8;HlsZW81L7J%1");
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setComputePushdownEnabled(true);
      DruidConfig.DruidAuthenticationType druidConfig_DruidAuthenticationType0 = DruidConfig.DruidAuthenticationType.KERBEROS;
      druidConfig1.setDruidAuthenticationType(druidConfig_DruidAuthenticationType0);
      assertEquals(DruidConfig.DruidAuthenticationType.KERBEROS, druidConfig1.getDruidAuthenticationType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setCaseInsensitiveNameMatching(true);
      DruidConfig.DruidAuthenticationType druidConfig_DruidAuthenticationType0 = DruidConfig.DruidAuthenticationType.KERBEROS;
      druidConfig0.setDruidAuthenticationType(druidConfig_DruidAuthenticationType0);
      assertEquals(DruidConfig.DruidAuthenticationType.KERBEROS, druidConfig0.getDruidAuthenticationType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig0.setComputePushdownEnabled(false);
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig0.setCaseInsensitiveNameMatchingCacheTtl((Duration) null);
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setComputePushdownEnabled(true);
      druidConfig0.setCaseInsensitiveNameMatching(true);
      assertTrue(druidConfig0.isComputePushdownEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setComputePushdownEnabled(true);
      druidConfig1.setBasicAuthenticationUsername("");
      assertTrue(druidConfig0.isComputePushdownEnabled());
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig1.setBasicAuthenticationUsername("u(Q)pgOzeo$~q<T:9");
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setComputePushdownEnabled(true);
      druidConfig0.setBasicAuthenticationPassword("|>>Xt");
      assertTrue(druidConfig0.isComputePushdownEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setCaseInsensitiveNameMatching(true);
      druidConfig0.setBasicAuthenticationPassword("HT|J&QqSBb;");
      assertTrue(druidConfig0.isCaseInsensitiveNameMatching());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setCaseInsensitiveNameMatching(true);
      boolean boolean0 = druidConfig1.isCaseInsensitiveNameMatching();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setIngestionStoragePath("");
      druidConfig0.getIngestionStoragePath();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setDruidSchema((String) null);
      String string0 = druidConfig0.getDruidSchema();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setDruidSchema("");
      String string0 = druidConfig0.getDruidSchema();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setDruidCoordinatorUrl("/user");
      druidConfig0.getDruidCoordinatorUrl();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setDruidCoordinatorUrl("");
      druidConfig1.getDruidCoordinatorUrl();
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setDruidBrokerUrl("lu");
      druidConfig1.getDruidBrokerUrl();
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setCaseInsensitiveNameMatchingCacheTtl((Duration) null);
      druidConfig1.getCaseInsensitiveNameMatchingCacheTtl();
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setBasicAuthenticationUsername("$VALUES");
      druidConfig0.getBasicAuthenticationUsername();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setBasicAuthenticationUsername("");
      druidConfig1.getBasicAuthenticationUsername();
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setBasicAuthenticationPassword("druid");
      druidConfig1.getBasicAuthenticationPassword();
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setBasicAuthenticationPassword("");
      druidConfig0.getBasicAuthenticationPassword();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setHadoopConfiguration("S:U DABzH^=\"");
      // Undeclared exception!
      try { 
        druidConfig0.readHadoopConfiguration();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.net.URISyntaxException: Relative path in absolute URI: S:U%20DABzH%5E=%22
         //
         verifyException("org.apache.hadoop.fs.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setHadoopConfiguration((List<String>) null);
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setHadoopConfiguration((String) null);
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.readHadoopConfiguration();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setHadoopConfiguration("ly[D{]x;");
      druidConfig1.readHadoopConfiguration();
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.getDruidCoordinatorUrl();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setDruidBrokerUrl("");
      druidConfig0.getDruidBrokerUrl();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.isCaseInsensitiveNameMatching();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      Duration duration0 = druidConfig0.getCaseInsensitiveNameMatchingCacheTtl();
      DruidConfig druidConfig1 = druidConfig0.setComputePushdownEnabled(true);
      druidConfig1.setCaseInsensitiveNameMatchingCacheTtl(duration0);
      assertTrue(druidConfig0.isComputePushdownEnabled());
      assertEquals(1.0, duration0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      String string0 = druidConfig0.getDruidSchema();
      assertEquals("druid", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.isComputePushdownEnabled();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      DruidConfig druidConfig1 = druidConfig0.setCaseInsensitiveNameMatching(false);
      assertFalse(druidConfig1.isCaseInsensitiveNameMatching());
      assertEquals("druid", druidConfig1.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.getIngestionStoragePath();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.getBasicAuthenticationUsername();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.setComputePushdownEnabled(true);
      boolean boolean0 = druidConfig0.isComputePushdownEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.getBasicAuthenticationPassword();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.getDruidAuthenticationType();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DruidConfig druidConfig0 = new DruidConfig();
      druidConfig0.getDruidBrokerUrl();
      assertEquals("druid", druidConfig0.getDruidSchema());
  }
}
