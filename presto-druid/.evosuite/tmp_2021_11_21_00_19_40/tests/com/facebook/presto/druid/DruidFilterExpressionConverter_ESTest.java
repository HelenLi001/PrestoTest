/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 08:25:10 GMT 2021
 */

package com.facebook.presto.druid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeManager;
import com.facebook.presto.druid.DruidExpression;
import com.facebook.presto.druid.DruidFilterExpressionConverter;
import com.facebook.presto.druid.DruidQueryGeneratorContext;
import com.facebook.presto.spi.ConnectorSession;
import com.facebook.presto.spi.function.FunctionHandle;
import com.facebook.presto.spi.function.FunctionMetadata;
import com.facebook.presto.spi.function.FunctionMetadataManager;
import com.facebook.presto.spi.function.StandardFunctionResolution;
import com.facebook.presto.spi.relation.CallExpression;
import com.facebook.presto.spi.relation.ConstantExpression;
import com.facebook.presto.spi.relation.InputReferenceExpression;
import com.facebook.presto.spi.relation.LambdaDefinitionExpression;
import com.facebook.presto.spi.relation.RowExpression;
import com.facebook.presto.spi.relation.SpecialFormExpression;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import java.util.List;
import java.util.Vector;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DruidFilterExpressionConverter_ESTest extends DruidFilterExpressionConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      VariableReferenceExpression variableReferenceExpression0 = mock(VariableReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn("").when(variableReferenceExpression0).toString();
      DruidQueryGeneratorContext.Origin druidQueryGeneratorContext_Origin0 = DruidQueryGeneratorContext.Origin.LITERAL;
      DruidQueryGeneratorContext.Selection druidQueryGeneratorContext_Selection0 = mock(DruidQueryGeneratorContext.Selection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(druidQueryGeneratorContext_Selection0).getEscapedDefinition();
      doReturn(druidQueryGeneratorContext_Origin0).when(druidQueryGeneratorContext_Selection0).getOrigin();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("").when(function0).toString();
      doReturn(druidQueryGeneratorContext_Selection0).when(function0).apply(any(com.facebook.presto.spi.relation.VariableReferenceExpression.class));
      DruidExpression druidExpression0 = druidFilterExpressionConverter0.visitVariableReference(variableReferenceExpression0, function0);
      assertEquals("", druidExpression0.getDefinition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.AND;
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(specialFormExpression0).getArguments();
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, function0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitConstant((ConstantExpression) null, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.druid.DruidPushdownUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadata functionMetadata0 = mock(FunctionMetadata.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(standardFunctionResolution0).isCastFunction(any(com.facebook.presto.spi.function.FunctionHandle.class));
      doReturn(false).when(standardFunctionResolution0).isNotFunction(any(com.facebook.presto.spi.function.FunctionHandle.class));
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression specialFormExpression0 = null;
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      VariableReferenceExpression variableReferenceExpression0 = mock(VariableReferenceExpression.class, new ViolatedAssumptionAnswer());
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function1 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      FunctionHandle functionHandle0 = mock(FunctionHandle.class, new ViolatedAssumptionAnswer());
      CallExpression callExpression0 = mock(CallExpression.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(callExpression0).getArguments();
      doReturn(functionHandle0).when(callExpression0).getFunctionHandle();
      doReturn((String) null).when(callExpression0).toString();
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitCall(callExpression0, (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This type of CAST operator not supported: Mock for CallExpression, hashCode: 1851891331
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.AND;
      Vector<RowExpression> vector0 = new Vector<RowExpression>();
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(specialFormExpression0).getArguments();
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, function0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.BIND;
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      doReturn((String) null).when(specialFormExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, function0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support special form: null
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.ROW_CONSTRUCTOR;
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      doReturn((String) null).when(specialFormExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, function0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support special form: null
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.COALESCE;
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      doReturn((String) null).when(specialFormExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, function0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support special form: null
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.IS_NULL;
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      doReturn((String) null).when(specialFormExpression0).toString();
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support special form: null
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.IN;
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(specialFormExpression0).getArguments();
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      SpecialFormExpression.Form specialFormExpression_Form0 = SpecialFormExpression.Form.IF;
      SpecialFormExpression specialFormExpression0 = mock(SpecialFormExpression.class, new ViolatedAssumptionAnswer());
      doReturn(specialFormExpression_Form0).when(specialFormExpression0).getForm();
      doReturn((String) null).when(specialFormExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitSpecialForm(specialFormExpression0, function0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support special form: null
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadata functionMetadata0 = mock(FunctionMetadata.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      doReturn((FunctionMetadata) null).when(functionMetadataManager0).getFunctionMetadata(any(com.facebook.presto.spi.function.FunctionHandle.class));
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(standardFunctionResolution0).isBetweenFunction(any(com.facebook.presto.spi.function.FunctionHandle.class));
      doReturn(false).when(standardFunctionResolution0).isCastFunction(any(com.facebook.presto.spi.function.FunctionHandle.class));
      doReturn(false).when(standardFunctionResolution0).isNotFunction(any(com.facebook.presto.spi.function.FunctionHandle.class));
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      CallExpression callExpression0 = mock(CallExpression.class, new ViolatedAssumptionAnswer());
      doReturn((FunctionHandle) null, (FunctionHandle) null).when(callExpression0).getFunctionHandle();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitCall(callExpression0, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(standardFunctionResolution0).isNotFunction(any(com.facebook.presto.spi.function.FunctionHandle.class));
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      FunctionHandle functionHandle0 = mock(FunctionHandle.class, new ViolatedAssumptionAnswer());
      CallExpression callExpression0 = mock(CallExpression.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(callExpression0).getArguments();
      doReturn(functionHandle0).when(callExpression0).getFunctionHandle();
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitCall(callExpression0, (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      InputReferenceExpression inputReferenceExpression0 = mock(InputReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputReferenceExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitInputReference(inputReferenceExpression0, function0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support struct dereference: null
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      LambdaDefinitionExpression lambdaDefinitionExpression0 = mock(LambdaDefinitionExpression.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(lambdaDefinitionExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitLambda(lambdaDefinitionExpression0, function0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support lambda: null
         //
         verifyException("com.facebook.presto.druid.DruidFilterExpressionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      VariableReferenceExpression variableReferenceExpression0 = mock(VariableReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableReferenceExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(function0).toString();
      doReturn((Object) null).when(function0).apply(any(com.facebook.presto.spi.relation.VariableReferenceExpression.class));
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitVariableReference(variableReferenceExpression0, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Input column null does not exist in the input: null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      FunctionMetadataManager functionMetadataManager0 = mock(FunctionMetadataManager.class, new ViolatedAssumptionAnswer());
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = new DruidFilterExpressionConverter(typeManager0, functionMetadataManager0, standardFunctionResolution0, connectorSession0);
      ConstantExpression constantExpression0 = mock(ConstantExpression.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(constantExpression0).getType();
      doReturn((Object) null).when(constantExpression0).getValue();
      doReturn((String) null).when(constantExpression0).toString();
      Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> function0 = (Function<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        druidFilterExpressionConverter0.visitConstant(constantExpression0, function0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null constant expression: null with value of type: null
         //
         verifyException("com.facebook.presto.druid.DruidPushdownUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardFunctionResolution standardFunctionResolution0 = mock(StandardFunctionResolution.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      DruidFilterExpressionConverter druidFilterExpressionConverter0 = null;
      try {
        druidFilterExpressionConverter0 = new DruidFilterExpressionConverter((TypeManager) null, (FunctionMetadataManager) null, standardFunctionResolution0, connectorSession0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type manager is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
