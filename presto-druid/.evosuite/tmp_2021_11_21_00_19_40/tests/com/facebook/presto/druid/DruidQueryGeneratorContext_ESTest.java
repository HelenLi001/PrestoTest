/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 08:29:09 GMT 2021
 */

package com.facebook.presto.druid;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.druid.DruidColumnHandle;
import com.facebook.presto.druid.DruidQueryGeneratorContext;
import com.facebook.presto.spi.plan.PlanNodeId;
import com.facebook.presto.spi.relation.VariableReferenceExpression;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DruidQueryGeneratorContext_ESTest extends DruidQueryGeneratorContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withLimit(1089L);
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext1.getSelections();
      Set<VariableReferenceExpression> set0 = druidQueryGeneratorContext0.getHiddenColumnSet();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map1 = druidQueryGeneratorContext0.getSelections();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext1.withAggregation(map0, map1, 0, set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Druid doesn't support aggregation on top of the limit
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withLimit(9223372036854775807L);
      assertNotSame(druidQueryGeneratorContext0, druidQueryGeneratorContext1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withLimit(0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid limit: 0
         //
         verifyException("com.facebook.presto.druid.DruidQueryGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext0.getSelections();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = new DruidQueryGeneratorContext(map0, "6Z}^", (PlanNodeId) null);
      assertFalse(druidQueryGeneratorContext1.equals((Object)druidQueryGeneratorContext0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withVariablesInAggregation((Set<VariableReferenceExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // variables in aggregation is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withProject((Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // selections can't be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withFilter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext0.getSelections();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withAggregation(map0, map0, 93, (Set<VariableReferenceExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hidden column set is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = null;
      try {
        druidQueryGeneratorContext0 = new DruidQueryGeneratorContext((Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection>) null, (String) null, (PlanNodeId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // selections can't be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DruidQueryGeneratorContext.Origin druidQueryGeneratorContext_Origin0 = DruidQueryGeneratorContext.Origin.DERIVED;
      DruidQueryGeneratorContext.Selection druidQueryGeneratorContext_Selection0 = new DruidQueryGeneratorContext.Selection("ZZ6Nn6xLKJ{", druidQueryGeneratorContext_Origin0);
      String string0 = druidQueryGeneratorContext_Selection0.getEscapedDefinition();
      assertEquals("ZZ6Nn6xLKJ{", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext0.getSelections();
      Set<VariableReferenceExpression> set0 = druidQueryGeneratorContext0.getVariablesInAggregation();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withAggregation(map0, map0, 1556, set0);
      DruidQueryGeneratorContext druidQueryGeneratorContext2 = druidQueryGeneratorContext1.withLimit(1556);
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext2.toQuery();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Empty Druid query
         //
         verifyException("com.facebook.presto.druid.DruidQueryGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withLimit(1556);
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext1.toQuery();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Empty Druid query
         //
         verifyException("com.facebook.presto.druid.DruidQueryGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.toQuery();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Empty Druid query
         //
         verifyException("com.facebook.presto.druid.DruidQueryGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext0.getSelections();
      Set<VariableReferenceExpression> set0 = druidQueryGeneratorContext0.getVariablesInAggregation();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withAggregation(map0, map0, (-1729), set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid number of aggregations
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withLimit(1070L);
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext1.withLimit(4257L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Limit already exists. Druid doesn't support limit on top of another limit
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withLimit((-1425L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid limit: -1425
         //
         verifyException("com.facebook.presto.druid.DruidQueryGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Set<VariableReferenceExpression> set0 = druidQueryGeneratorContext0.getHiddenColumnSet();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext0.getSelections();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withAggregation(map0, map0, 2, set0);
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext1.withFilter(",.Nk@8\"MlItzI)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Druid does not support filter on top of AggregationNode.
         //
         verifyException("com.facebook.presto.druid.DruidQueryGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DruidQueryGeneratorContext.Origin druidQueryGeneratorContext_Origin0 = DruidQueryGeneratorContext.Origin.TABLE_COLUMN;
      DruidQueryGeneratorContext.Selection druidQueryGeneratorContext_Selection0 = new DruidQueryGeneratorContext.Selection("com.google.common.collect.ImmutableList", druidQueryGeneratorContext_Origin0);
      DruidQueryGeneratorContext.Origin druidQueryGeneratorContext_Origin1 = druidQueryGeneratorContext_Selection0.getOrigin();
      assertEquals(DruidQueryGeneratorContext.Origin.TABLE_COLUMN, druidQueryGeneratorContext_Origin1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DruidQueryGeneratorContext.Origin druidQueryGeneratorContext_Origin0 = DruidQueryGeneratorContext.Origin.DERIVED;
      DruidQueryGeneratorContext.Selection druidQueryGeneratorContext_Selection0 = new DruidQueryGeneratorContext.Selection("ZZ6Nn6xLKJ{", druidQueryGeneratorContext_Origin0);
      String string0 = druidQueryGeneratorContext_Selection0.toString();
      assertEquals("ZZ6Nn6xLKJ{", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DruidQueryGeneratorContext.Origin druidQueryGeneratorContext_Origin0 = DruidQueryGeneratorContext.Origin.TABLE_COLUMN;
      DruidQueryGeneratorContext.Selection druidQueryGeneratorContext_Selection0 = new DruidQueryGeneratorContext.Selection("com.google.common.collect.ImmutableList", druidQueryGeneratorContext_Origin0);
      String string0 = druidQueryGeneratorContext_Selection0.getDefinition();
      assertEquals("com.google.common.collect.ImmutableList", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext0.getSelections();
      Set<VariableReferenceExpression> set0 = druidQueryGeneratorContext0.getHiddenColumnSet();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withAggregation(map0, map0, 2853, set0);
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext1.withAggregation(map0, map0, 2853, set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Druid doesn't support aggregation on top of the aggregated data
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withFilter("");
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext1.withFilter("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Druid doesn't support filters at multiple levels under AggregationNode
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Map<VariableReferenceExpression, DruidColumnHandle> map0 = druidQueryGeneratorContext0.getAssignments();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Set<VariableReferenceExpression> set0 = druidQueryGeneratorContext0.getHiddenColumnSet();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withVariablesInAggregation(set0);
      assertNotSame(druidQueryGeneratorContext0, druidQueryGeneratorContext1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      // Undeclared exception!
      try { 
        druidQueryGeneratorContext0.withOutputColumns((List<VariableReferenceExpression>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.druid.DruidQueryGeneratorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Map<VariableReferenceExpression, DruidQueryGeneratorContext.Selection> map0 = druidQueryGeneratorContext0.getSelections();
      DruidQueryGeneratorContext druidQueryGeneratorContext1 = druidQueryGeneratorContext0.withProject(map0);
      assertNotSame(druidQueryGeneratorContext1, druidQueryGeneratorContext0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      Optional<PlanNodeId> optional0 = druidQueryGeneratorContext0.getTableScanNodeId();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DruidQueryGeneratorContext.Origin druidQueryGeneratorContext_Origin0 = DruidQueryGeneratorContext.Origin.TABLE_COLUMN;
      DruidQueryGeneratorContext.Selection druidQueryGeneratorContext_Selection0 = new DruidQueryGeneratorContext.Selection("DERIVED", druidQueryGeneratorContext_Origin0);
      String string0 = druidQueryGeneratorContext_Selection0.getEscapedDefinition();
      assertEquals("\"DERIVED\"", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DruidQueryGeneratorContext druidQueryGeneratorContext0 = new DruidQueryGeneratorContext();
      String string0 = druidQueryGeneratorContext0.toString();
      assertEquals("DruidQueryGeneratorContext{selections={}, groupByColumns={}, hiddenColumnSet=[], variablesInAggregation=[], from=Optional.empty, filter=Optional.empty, limit=OptionalLong.empty, aggregations=0, tableScanNodeId=Optional.empty}", string0);
  }
}
