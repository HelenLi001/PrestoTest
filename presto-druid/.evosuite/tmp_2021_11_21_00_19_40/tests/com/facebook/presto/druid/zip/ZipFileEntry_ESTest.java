/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 08:39:08 GMT 2021
 */

package com.facebook.presto.druid.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.druid.zip.ExtraDataList;
import com.facebook.presto.druid.zip.ZipFileEntry;
import java.util.EnumSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZipFileEntry_ESTest extends ZipFileEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("incomplete extra data entry in buffer");
      zipFileEntry0.setLocalHeaderOffset(4294967295L);
      assertEquals(4294967295L, zipFileEntry0.getLocalHeaderOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("incomplete extra data entry in buffer");
      ZipFileEntry.Flag zipFileEntry_Flag0 = ZipFileEntry.Flag.DATA_DESCRIPTOR;
      zipFileEntry0.setFlag(zipFileEntry_Flag0, true);
      zipFileEntry0.setFlag(zipFileEntry_Flag0, true);
      assertEquals((short)8, zipFileEntry0.getFlags());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.setSize(4294967295L);
      assertEquals(4294967295L, zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("9]`_yG~Q+H");
      zipFileEntry0.setCrc(4294967295L);
      assertEquals(4294967295L, zipFileEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipFileEntry.Compression zipFileEntry_Compression0 = ZipFileEntry.Compression.fromValue(8);
      assertEquals(ZipFileEntry.Compression.DEFLATED, zipFileEntry_Compression0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipFileEntry.Compression.fromValue(1809);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipFileEntry.Compression zipFileEntry_Compression0 = ZipFileEntry.Compression.DEFLATED;
      short short0 = zipFileEntry_Compression0.getValue();
      assertEquals((short)8, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("={%zH'i/5wV&qw)4a");
      EnumSet<ZipFileEntry.Feature> enumSet0 = zipFileEntry0.getFeatureSet();
      short short0 = ZipFileEntry.Feature.getMinRequiredVersion(enumSet0);
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((short)10, short0);
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      assertEquals((-1L), zipFileEntry0.getTime());
      
      zipFileEntry0.setTime(0L);
      zipFileEntry0.getTime();
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("0j)o3=|BjW%Gh");
      zipFileEntry0.setTime(4294967295L);
      long long0 = zipFileEntry0.getTime();
      assertEquals(4294967295L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      assertEquals((-1L), zipFileEntry0.getSize());
      
      zipFileEntry0.setSize(0L);
      zipFileEntry0.getSize();
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("ZipFileEntry[");
      zipFileEntry0.setSize(2956L);
      long long0 = zipFileEntry0.getSize();
      assertEquals(2956L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("5#g@y:");
      zipFileEntry0.getName();
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("invalid entry size");
      ZipFileEntry.Compression zipFileEntry_Compression0 = ZipFileEntry.Compression.DEFLATED;
      zipFileEntry0.setMethod(zipFileEntry_Compression0);
      zipFileEntry0.getMethod();
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.setLocalHeaderOffset((short)10);
      long long0 = zipFileEntry0.getLocalHeaderOffset();
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("invalid extra field length");
      zipFileEntry0.setInternalAttributes((short)1084);
      short short0 = zipFileEntry0.getInternalAttributes();
      assertEquals((short)1084, short0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("={%zH'i/5wV&qw)4a");
      zipFileEntry0.setInternalAttributes((short) (-301));
      short short0 = zipFileEntry0.getInternalAttributes();
      assertEquals((short) (-301), short0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.setFlags((short) (-2821));
      short short0 = zipFileEntry0.getFlags();
      assertEquals((short) (-2821), short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("com.facebook.presto.druid.zip.ExtraData");
      zipFileEntry0.setExternalAttributes(4);
      int int0 = zipFileEntry0.getExternalAttributes();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("y_,!Q6ywmqPH4Dh");
      zipFileEntry0.setExternalAttributes((short) (-2176));
      int int0 = zipFileEntry0.getExternalAttributes();
      assertEquals((-2176), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("invalid extra field length");
      assertEquals((-1L), zipFileEntry0.getCrc());
      
      zipFileEntry0.setCrc(0L);
      zipFileEntry0.getCrc();
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("ZipFileEntry[");
      zipFileEntry0.setCrc(2956L);
      long long0 = zipFileEntry0.getCrc();
      assertEquals(2956L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("com.facebook.presto.druid.zip.ExtraData");
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      
      zipFileEntry0.setCompressedSize(0L);
      zipFileEntry0.getCompressedSize();
      assertEquals((-1L), zipFileEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.setCompressedSize(4294967303L);
      long long0 = zipFileEntry0.getCompressedSize();
      assertEquals(4294967303L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("5#g@y:");
      zipFileEntry0.setComment("vUTm");
      zipFileEntry0.getComment();
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.setComment("");
      zipFileEntry0.getComment();
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = null;
      try {
        zipFileEntry0 = new ZipFileEntry((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zip file name could not be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = null;
      try {
        zipFileEntry0 = new ZipFileEntry((ZipFileEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.druid.zip.ZipFileEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.setName("");
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.getComment();
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      long long0 = zipFileEntry0.getCrc();
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), long0);
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.getName();
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      int int0 = zipFileEntry0.getExternalAttributes();
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals(0, int0);
      assertEquals((-1L), zipFileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZipFileEntry.Flag zipFileEntry_Flag0 = ZipFileEntry.Flag.DATA_DESCRIPTOR;
      int int0 = zipFileEntry_Flag0.getBit();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("={%zH'i/5wV&qw)4a");
      ExtraDataList extraDataList0 = zipFileEntry0.getExtra();
      zipFileEntry0.setExtra(extraDataList0);
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("={%zH'i/5wV&qw)4a");
      long long0 = zipFileEntry0.getTime();
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), long0);
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZipFileEntry.Feature zipFileEntry_Feature0 = ZipFileEntry.Feature.ZIP64_CSIZE;
      short short0 = zipFileEntry_Feature0.getMinVersion();
      assertEquals((short)45, short0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("/");
      zipFileEntry0.getMethod();
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      short short0 = zipFileEntry0.getVersionNeeded();
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((short)10, short0);
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      long long0 = zipFileEntry0.getCompressedSize();
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), long0);
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      long long0 = zipFileEntry0.getSize();
      assertEquals((-1L), long0);
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      long long0 = zipFileEntry0.getLocalHeaderOffset();
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), long0);
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      zipFileEntry0.getFlags();
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("={%zH'i/5wV&qw)4a");
      zipFileEntry0.getInternalAttributes();
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("qFMB:OH");
      short short0 = zipFileEntry0.getVersion();
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((short)10, short0);
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("&d6(");
      // Undeclared exception!
      try { 
        zipFileEntry0.setExtra((ExtraDataList) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zip file data could not be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      
      zipFileEntry0.setLocalHeaderOffset(0L);
      zipFileEntry0.getLocalHeaderOffset();
      assertEquals((-1L), zipFileEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("$VALUES");
      // Undeclared exception!
      try { 
        zipFileEntry0.setLocalHeaderOffset((-56L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid local header offset
         //
         verifyException("com.facebook.presto.druid.zip.ZipFileEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("JV,U# xz,[G9)c>");
      zipFileEntry0.setLocalHeaderOffset(4294967314L);
      assertEquals(4294967314L, zipFileEntry0.getLocalHeaderOffset());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      ZipFileEntry.Flag zipFileEntry_Flag0 = ZipFileEntry.Flag.DATA_DESCRIPTOR;
      zipFileEntry0.setFlag(zipFileEntry_Flag0, true);
      short short0 = zipFileEntry0.getFlags();
      assertEquals((short)8, short0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("8y,#[");
      // Undeclared exception!
      try { 
        zipFileEntry0.setMethod((ZipFileEntry.Compression) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zip file compression could not be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      // Undeclared exception!
      try { 
        zipFileEntry0.setCompressedSize((short) (-16020));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry size
         //
         verifyException("com.facebook.presto.druid.zip.ZipFileEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("com.facebook.presto.druid.zip.ExtraData");
      zipFileEntry0.setCompressedSize(4294967295L);
      assertEquals(4294967295L, zipFileEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("com.fcebook.preto.drid.zip.ExtraData");
      zipFileEntry0.setSize(4294967301L);
      assertEquals(4294967301L, zipFileEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("com.facebook.presto.druid.zip.ExtraData");
      // Undeclared exception!
      try { 
        zipFileEntry0.setSize((-4923L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry size
         //
         verifyException("com.facebook.presto.druid.zip.ZipFileEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("");
      // Undeclared exception!
      try { 
        zipFileEntry0.setCrc(4294967302L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry crc-32
         //
         verifyException("com.facebook.presto.druid.zip.ZipFileEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("qFMB:OH");
      // Undeclared exception!
      try { 
        zipFileEntry0.setCrc((-1956L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid entry crc-32
         //
         verifyException("com.facebook.presto.druid.zip.ZipFileEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("9]`_yG~Q+H");
      // Undeclared exception!
      try { 
        zipFileEntry0.setName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zip file name could not be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ZipFileEntry.Compression zipFileEntry_Compression0 = ZipFileEntry.Compression.fromValue(0);
      assertEquals(ZipFileEntry.Compression.STORED, zipFileEntry_Compression0);
      
      zipFileEntry_Compression0.getFeature();
      assertEquals((short)10, zipFileEntry_Compression0.getMinVersion());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ZipFileEntry.Compression.fromValue((-1));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ZipFileEntry.Compression zipFileEntry_Compression0 = ZipFileEntry.Compression.DEFLATED;
      short short0 = zipFileEntry_Compression0.getMinVersion();
      assertEquals((short)20, short0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("qFMB:OH");
      ZipFileEntry.Flag zipFileEntry_Flag0 = ZipFileEntry.Flag.DATA_DESCRIPTOR;
      zipFileEntry0.setFlag(zipFileEntry_Flag0, false);
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((short)0, zipFileEntry0.getFlags());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("9]`_yG~Q+H");
      String string0 = zipFileEntry0.toString();
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals("ZipFileEntry[9]`_yG~Q+H]", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("qFMB:OH");
      zipFileEntry0.setVersion((short)8);
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("qFMB:OH");
      zipFileEntry0.setVersionNeeded((short)8);
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ZipFileEntry zipFileEntry0 = new ZipFileEntry("$VALUES");
      ZipFileEntry zipFileEntry1 = new ZipFileEntry(zipFileEntry0);
      assertEquals((-1L), zipFileEntry0.getCrc());
      assertEquals((-1L), zipFileEntry0.getTime());
      assertEquals(0, zipFileEntry1.getExternalAttributes());
      assertEquals((-1L), zipFileEntry0.getLocalHeaderOffset());
      assertEquals((-1L), zipFileEntry0.getSize());
      assertEquals((-1L), zipFileEntry0.getCompressedSize());
  }
}
