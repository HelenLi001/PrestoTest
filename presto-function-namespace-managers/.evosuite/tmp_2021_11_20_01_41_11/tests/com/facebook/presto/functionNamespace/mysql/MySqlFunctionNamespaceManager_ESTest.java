/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 09:46:01 GMT 2021
 */

package com.facebook.presto.functionNamespace.mysql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;
import com.facebook.presto.functionNamespace.execution.SqlFunctionExecutors;
import com.facebook.presto.functionNamespace.execution.thrift.ThriftSqlFunctionExecutor;
import com.facebook.presto.functionNamespace.mysql.FunctionNamespaceDao;
import com.facebook.presto.functionNamespace.mysql.MySqlFunctionNamespaceManager;
import com.facebook.presto.spi.function.FunctionImplementationType;
import com.facebook.presto.spi.function.RoutineCharacteristics;
import io.airlift.units.Duration;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdbi.v3.core.Jdbi;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MySqlFunctionNamespaceManager_ESTest extends MySqlFunctionNamespaceManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Jdbi jdbi0 = Jdbi.create("Return type", "Return type", "");
      Class<FunctionNamespaceDao> class0 = FunctionNamespaceDao.class;
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Duration duration0 = Duration.succinctDuration(3.4028235E37, timeUnit0);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig1 = sqlInvokedFunctionNamespaceManagerConfig0.setFunctionInstanceCacheExpiration(duration0);
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      MySqlFunctionNamespaceManager mySqlFunctionNamespaceManager0 = null;
      try {
        mySqlFunctionNamespaceManager0 = new MySqlFunctionNamespaceManager(jdbi0, (FunctionNamespaceDao) null, class0, sqlInvokedFunctionNamespaceManagerConfig1, sqlFunctionExecutors0, "fromIterable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size is too large to be represented in requested unit as a long
         //
         verifyException("io.airlift.units.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Jdbi jdbi0 = Jdbi.create("Return type", "Return type", "");
      Class<FunctionNamespaceDao> class0 = FunctionNamespaceDao.class;
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      MySqlFunctionNamespaceManager mySqlFunctionNamespaceManager0 = null;
      try {
        mySqlFunctionNamespaceManager0 = new MySqlFunctionNamespaceManager(jdbi0, (FunctionNamespaceDao) null, class0, sqlInvokedFunctionNamespaceManagerConfig0, sqlFunctionExecutors0, "fromIterable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // functionNamespaceDao is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
