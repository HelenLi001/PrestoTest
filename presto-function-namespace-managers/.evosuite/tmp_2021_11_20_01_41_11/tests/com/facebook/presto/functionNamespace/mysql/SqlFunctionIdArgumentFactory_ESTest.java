/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 09:55:33 GMT 2021
 */

package com.facebook.presto.functionNamespace.mysql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.functionNamespace.mysql.SqlFunctionIdArgumentFactory;
import com.facebook.presto.spi.function.SqlFunctionId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jdbi.v3.core.argument.Argument;
import org.jdbi.v3.core.config.ConfigRegistry;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlFunctionIdArgumentFactory_ESTest extends SqlFunctionIdArgumentFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlFunctionIdArgumentFactory sqlFunctionIdArgumentFactory0 = new SqlFunctionIdArgumentFactory();
      // Undeclared exception!
      try { 
        sqlFunctionIdArgumentFactory0.build((SqlFunctionId) null, (ConfigRegistry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.functionNamespace.mysql.SqlFunctionIdArgumentFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConfigRegistry configRegistry0 = mock(ConfigRegistry.class, new ViolatedAssumptionAnswer());
      SqlFunctionIdArgumentFactory sqlFunctionIdArgumentFactory0 = new SqlFunctionIdArgumentFactory();
      SqlFunctionId sqlFunctionId0 = mock(SqlFunctionId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sqlFunctionId0).getId();
      Argument argument0 = sqlFunctionIdArgumentFactory0.build(sqlFunctionId0, configRegistry0);
      assertNotNull(argument0);
  }
}
