/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 10:02:22 GMT 2021
 */

package com.facebook.presto.functionNamespace.mysql;

import org.junit.Test;
import static org.junit.Assert.*;
import com.facebook.presto.functionNamespace.mysql.UserDefinedTypesTableCustomizerFactory;
import java.lang.reflect.Method;
import org.apache.bval.cdi.BValAnnotatedType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserDefinedTypesTableCustomizerFactory_ESTest extends UserDefinedTypesTableCustomizerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserDefinedTypesTableCustomizerFactory userDefinedTypesTableCustomizerFactory0 = new UserDefinedTypesTableCustomizerFactory();
      BValAnnotatedType.BValBindingLiteral bValAnnotatedType_BValBindingLiteral0 = (BValAnnotatedType.BValBindingLiteral)BValAnnotatedType.BValBindingLiteral.INSTANCE;
      Class<String> class0 = String.class;
      SqlStatementCustomizer sqlStatementCustomizer0 = userDefinedTypesTableCustomizerFactory0.createForType(bValAnnotatedType_BValBindingLiteral0, class0);
      assertNotNull(sqlStatementCustomizer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserDefinedTypesTableCustomizerFactory.Config userDefinedTypesTableCustomizerFactory_Config0 = new UserDefinedTypesTableCustomizerFactory.Config();
      userDefinedTypesTableCustomizerFactory_Config0.setTableName("`dj");
      assertEquals("`dj", userDefinedTypesTableCustomizerFactory_Config0.getTableName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserDefinedTypesTableCustomizerFactory.Config userDefinedTypesTableCustomizerFactory_Config0 = new UserDefinedTypesTableCustomizerFactory.Config();
      String string0 = userDefinedTypesTableCustomizerFactory_Config0.getTableName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserDefinedTypesTableCustomizerFactory.Config userDefinedTypesTableCustomizerFactory_Config0 = new UserDefinedTypesTableCustomizerFactory.Config();
      UserDefinedTypesTableCustomizerFactory.Config userDefinedTypesTableCustomizerFactory_Config1 = userDefinedTypesTableCustomizerFactory_Config0.createCopy();
      assertFalse(userDefinedTypesTableCustomizerFactory_Config1.equals((Object)userDefinedTypesTableCustomizerFactory_Config0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserDefinedTypesTableCustomizerFactory userDefinedTypesTableCustomizerFactory0 = new UserDefinedTypesTableCustomizerFactory();
      BValAnnotatedType.BValBindingLiteral bValAnnotatedType_BValBindingLiteral0 = (BValAnnotatedType.BValBindingLiteral)BValAnnotatedType.BValBindingLiteral.INSTANCE;
      Class<UserDefinedTypesTableCustomizerFactory.Config> class0 = UserDefinedTypesTableCustomizerFactory.Config.class;
      SqlStatementCustomizer sqlStatementCustomizer0 = userDefinedTypesTableCustomizerFactory0.createForMethod(bValAnnotatedType_BValBindingLiteral0, class0, (Method) null);
      assertNotNull(sqlStatementCustomizer0);
  }
}
