/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 09:53:00 GMT 2021
 */

package com.facebook.presto.functionNamespace.testing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.CatalogSchemaName;
import com.facebook.presto.common.QualifiedObjectName;
import com.facebook.presto.common.block.BlockEncodingSerde;
import com.facebook.presto.common.function.OperatorType;
import com.facebook.presto.common.type.ArrayType;
import com.facebook.presto.common.type.TypeSignature;
import com.facebook.presto.common.type.UserDefinedType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;
import com.facebook.presto.functionNamespace.execution.SqlFunctionExecutors;
import com.facebook.presto.functionNamespace.execution.thrift.ThriftSqlFunctionExecutor;
import com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager;
import com.facebook.presto.spi.function.AlterRoutineCharacteristics;
import com.facebook.presto.spi.function.FunctionImplementationType;
import com.facebook.presto.spi.function.FunctionKind;
import com.facebook.presto.spi.function.LongVariableConstraint;
import com.facebook.presto.spi.function.Parameter;
import com.facebook.presto.spi.function.RoutineCharacteristics;
import com.facebook.presto.spi.function.Signature;
import com.facebook.presto.spi.function.SqlFunctionHandle;
import com.facebook.presto.spi.function.SqlFunctionId;
import com.facebook.presto.spi.function.SqlInvokedFunction;
import com.facebook.presto.spi.function.TypeVariableConstraint;
import io.airlift.units.Duration;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InMemoryFunctionNamespaceManager_ESTest extends InMemoryFunctionNamespaceManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("/9hg8", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("", "}3");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "");
      VarcharType varcharType0 = VarcharType.createVarcharType(0);
      ArrayType arrayType0 = new ArrayType(varcharType0);
      TypeSignature typeSignature0 = arrayType0.getTypeSignature();
      UserDefinedType userDefinedType0 = new UserDefinedType(qualifiedObjectName0, typeSignature0);
      inMemoryFunctionNamespaceManager0.addUserDefinedType(userDefinedType0);
      UserDefinedType userDefinedType1 = inMemoryFunctionNamespaceManager0.fetchUserDefinedTypeDirect(qualifiedObjectName0);
      assertSame(userDefinedType1, userDefinedType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("Can", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.fetchUserDefinedTypeDirect((QualifiedObjectName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("Can", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      OperatorType operatorType0 = OperatorType.NOT_EQUAL;
      QualifiedObjectName qualifiedObjectName0 = operatorType0.getFunctionName();
      LinkedList<TypeSignature> linkedList0 = new LinkedList<TypeSignature>();
      SqlFunctionId sqlFunctionId0 = new SqlFunctionId(qualifiedObjectName0, linkedList0);
      SqlFunctionHandle sqlFunctionHandle0 = new SqlFunctionHandle(sqlFunctionId0, "Can");
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.fetchFunctionMetadataDirect(sqlFunctionHandle0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.MoreCollectors$ToOptionalState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("Can", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.fetchFunctionImplementationDirect((SqlFunctionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("SHORT_ARRAY", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.createFunction((SqlInvokedFunction) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.functionNamespace.AbstractSqlInvokedFunctionNamespaceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("}Eo<<L >]snjU", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      Vector<Parameter> vector0 = new Vector<Parameter>();
      RoutineCharacteristics.Language routineCharacteristics_Language0 = RoutineCharacteristics.Language.SQL;
      FunctionImplementationType functionImplementationType0 = FunctionImplementationType.THRIFT;
      hashMap0.put(routineCharacteristics_Language0, functionImplementationType0);
      Optional<RoutineCharacteristics.Language> optional0 = Optional.empty();
      RoutineCharacteristics.Determinism routineCharacteristics_Determinism0 = RoutineCharacteristics.Determinism.DETERMINISTIC;
      Optional<RoutineCharacteristics.Determinism> optional1 = Optional.ofNullable(routineCharacteristics_Determinism0);
      RoutineCharacteristics.NullCallClause routineCharacteristics_NullCallClause0 = RoutineCharacteristics.NullCallClause.CALLED_ON_NULL_INPUT;
      Optional<RoutineCharacteristics.NullCallClause> optional2 = Optional.of(routineCharacteristics_NullCallClause0);
      RoutineCharacteristics routineCharacteristics0 = new RoutineCharacteristics(optional0, optional1, optional2);
      QualifiedObjectName qualifiedObjectName0 = new QualifiedObjectName("", "", "");
      FunctionKind functionKind0 = FunctionKind.SCALAR;
      Stack<TypeVariableConstraint> stack0 = new Stack<TypeVariableConstraint>();
      Stack<LongVariableConstraint> stack1 = new Stack<LongVariableConstraint>();
      TypeSignature typeSignature0 = new TypeSignature(qualifiedObjectName0);
      List<TypeSignature> list0 = typeSignature0.getTypeParametersAsTypeSignatures();
      Signature signature0 = new Signature(qualifiedObjectName0, functionKind0, stack0, stack1, typeSignature0, list0, true);
      SqlFunctionId sqlFunctionId0 = new SqlFunctionId(qualifiedObjectName0, list0);
      SqlInvokedFunction sqlInvokedFunction0 = new SqlInvokedFunction(vector0, "}Eo<<L >]snjU", routineCharacteristics0, "}Eo<<L >]snjU", signature0, sqlFunctionId0);
      SqlInvokedFunction sqlInvokedFunction1 = sqlInvokedFunction0.withVersion("}Eo<<L >]snjU");
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.createFunction(sqlInvokedFunction1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function .. is already with version }Eo<<L >]snjU
         //
         verifyException("com.facebook.presto.spi.function.SqlInvokedFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("com.facebook.presto.common.block.IntArrayBlockEncoding", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.addUserDefinedType((UserDefinedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = null;
      try {
        inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("", (SqlFunctionExecutors) null, sqlInvokedFunctionNamespaceManagerConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sqlFunctionExecutors is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Duration duration0 = new Duration(9.223372036854776E18, timeUnit0);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig1 = sqlInvokedFunctionNamespaceManagerConfig0.setFunctionCacheExpiration(duration0);
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = null;
      try {
        inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("z3Al?", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size is too large to be represented in requested unit as a long
         //
         verifyException("io.airlift.units.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("Can", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      OperatorType operatorType0 = OperatorType.NOT_EQUAL;
      QualifiedObjectName qualifiedObjectName0 = operatorType0.getFunctionName();
      Collection<SqlInvokedFunction> collection0 = inMemoryFunctionNamespaceManager0.fetchFunctionsDirect(qualifiedObjectName0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("/9g8", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      CatalogSchemaName catalogSchemaName0 = new CatalogSchemaName("", "}3");
      QualifiedObjectName qualifiedObjectName0 = QualifiedObjectName.valueOf(catalogSchemaName0, "");
      VarcharType varcharType0 = VarcharType.createVarcharType(0);
      ArrayType arrayType0 = new ArrayType(varcharType0);
      TypeSignature typeSignature0 = arrayType0.getTypeSignature();
      UserDefinedType userDefinedType0 = new UserDefinedType(qualifiedObjectName0, typeSignature0);
      inMemoryFunctionNamespaceManager0.addUserDefinedType(userDefinedType0);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.addUserDefinedType(userDefinedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parametric type .}3. already registered
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("}Eo<<L >]snjU", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      Vector<Parameter> vector0 = new Vector<Parameter>();
      RoutineCharacteristics.Language routineCharacteristics_Language0 = RoutineCharacteristics.Language.SQL;
      FunctionImplementationType functionImplementationType0 = FunctionImplementationType.THRIFT;
      hashMap0.put(routineCharacteristics_Language0, functionImplementationType0);
      Optional<RoutineCharacteristics.Language> optional0 = Optional.empty();
      RoutineCharacteristics.Determinism routineCharacteristics_Determinism0 = RoutineCharacteristics.Determinism.DETERMINISTIC;
      Optional<RoutineCharacteristics.Determinism> optional1 = Optional.ofNullable(routineCharacteristics_Determinism0);
      RoutineCharacteristics.NullCallClause routineCharacteristics_NullCallClause0 = RoutineCharacteristics.NullCallClause.CALLED_ON_NULL_INPUT;
      Optional<RoutineCharacteristics.NullCallClause> optional2 = Optional.of(routineCharacteristics_NullCallClause0);
      RoutineCharacteristics routineCharacteristics0 = new RoutineCharacteristics(optional0, optional1, optional2);
      QualifiedObjectName qualifiedObjectName0 = new QualifiedObjectName("", "", "");
      FunctionKind functionKind0 = FunctionKind.SCALAR;
      Stack<TypeVariableConstraint> stack0 = new Stack<TypeVariableConstraint>();
      Stack<LongVariableConstraint> stack1 = new Stack<LongVariableConstraint>();
      TypeSignature typeSignature0 = new TypeSignature(qualifiedObjectName0);
      List<TypeSignature> list0 = typeSignature0.getTypeParametersAsTypeSignatures();
      Signature signature0 = new Signature(qualifiedObjectName0, functionKind0, stack0, stack1, typeSignature0, list0, true);
      SqlFunctionId sqlFunctionId0 = new SqlFunctionId(qualifiedObjectName0, list0);
      SqlInvokedFunction sqlInvokedFunction0 = new SqlInvokedFunction(vector0, "}Eo<<L >]snjU", routineCharacteristics0, "}Eo<<L >]snjU", signature0, sqlFunctionId0);
      inMemoryFunctionNamespaceManager0.createFunction(sqlInvokedFunction0, true);
      inMemoryFunctionNamespaceManager0.createFunction(sqlInvokedFunction0, true);
      assertEquals("}Eo<<L >]snjU", sqlInvokedFunction0.getBody());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("}Eo<<L >]snjU", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      RoutineCharacteristics.Language routineCharacteristics_Language0 = RoutineCharacteristics.Language.SQL;
      FunctionImplementationType functionImplementationType0 = FunctionImplementationType.THRIFT;
      hashMap0.put(routineCharacteristics_Language0, functionImplementationType0);
      Optional<RoutineCharacteristics.Language> optional0 = Optional.empty();
      RoutineCharacteristics.Determinism routineCharacteristics_Determinism0 = RoutineCharacteristics.Determinism.DETERMINISTIC;
      Optional<RoutineCharacteristics.Determinism> optional1 = Optional.ofNullable(routineCharacteristics_Determinism0);
      RoutineCharacteristics.NullCallClause routineCharacteristics_NullCallClause0 = RoutineCharacteristics.NullCallClause.CALLED_ON_NULL_INPUT;
      Optional<RoutineCharacteristics.NullCallClause> optional2 = Optional.of(routineCharacteristics_NullCallClause0);
      RoutineCharacteristics routineCharacteristics0 = new RoutineCharacteristics(optional0, optional1, optional2);
      QualifiedObjectName qualifiedObjectName0 = new QualifiedObjectName("", "", "");
      FunctionKind functionKind0 = FunctionKind.SCALAR;
      Vector<TypeVariableConstraint> vector0 = new Vector<TypeVariableConstraint>();
      Stack<LongVariableConstraint> stack1 = new Stack<LongVariableConstraint>();
      TypeSignature typeSignature0 = new TypeSignature(qualifiedObjectName0);
      List<TypeSignature> list0 = typeSignature0.getTypeParametersAsTypeSignatures();
      Signature signature0 = new Signature(qualifiedObjectName0, functionKind0, vector0, stack1, typeSignature0, list0, false);
      SqlFunctionId sqlFunctionId0 = new SqlFunctionId(qualifiedObjectName0, list0);
      SqlInvokedFunction sqlInvokedFunction0 = new SqlInvokedFunction(stack0, "}Eo<<L >]snjU", routineCharacteristics0, "}Eo<<L >]snjU", signature0, sqlFunctionId0);
      inMemoryFunctionNamespaceManager0.createFunction(sqlInvokedFunction0, false);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.createFunction(sqlInvokedFunction0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Function '..()' already exists
         //
         verifyException("com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      OperatorType operatorType0 = OperatorType.EQUAL;
      QualifiedObjectName qualifiedObjectName0 = operatorType0.getFunctionName();
      Optional<List<TypeSignature>> optional0 = Optional.empty();
      RoutineCharacteristics.NullCallClause routineCharacteristics_NullCallClause0 = RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;
      Optional<RoutineCharacteristics.NullCallClause> optional1 = Optional.ofNullable(routineCharacteristics_NullCallClause0);
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("Y5)zv^w", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      AlterRoutineCharacteristics alterRoutineCharacteristics0 = new AlterRoutineCharacteristics(optional1);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.alterFunction(qualifiedObjectName0, optional0, alterRoutineCharacteristics0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Alter Function is not supported in InMemoryFunctionNamespaceManager
         //
         verifyException("com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("/9g8", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      inMemoryFunctionNamespaceManager0.setBlockEncodingSerde((BlockEncodingSerde) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("jGtTlMJsG=94 %x7]DQ", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.fetchFunctionMetadataDirect((SqlFunctionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("CMK,Y", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      OperatorType operatorType0 = OperatorType.NOT_EQUAL;
      QualifiedObjectName qualifiedObjectName0 = operatorType0.getFunctionName();
      UserDefinedType userDefinedType0 = inMemoryFunctionNamespaceManager0.fetchUserDefinedTypeDirect(qualifiedObjectName0);
      assertNull(userDefinedType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("}Eo<<L >]snjU", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      Stack<Parameter> stack0 = new Stack<Parameter>();
      RoutineCharacteristics.Language routineCharacteristics_Language0 = RoutineCharacteristics.Language.SQL;
      FunctionImplementationType functionImplementationType0 = FunctionImplementationType.SQL;
      hashMap0.put(routineCharacteristics_Language0, functionImplementationType0);
      Optional<RoutineCharacteristics.Language> optional0 = Optional.empty();
      RoutineCharacteristics.Determinism routineCharacteristics_Determinism0 = RoutineCharacteristics.Determinism.DETERMINISTIC;
      Optional<RoutineCharacteristics.Determinism> optional1 = Optional.ofNullable(routineCharacteristics_Determinism0);
      RoutineCharacteristics.NullCallClause routineCharacteristics_NullCallClause0 = RoutineCharacteristics.NullCallClause.CALLED_ON_NULL_INPUT;
      Optional<RoutineCharacteristics.NullCallClause> optional2 = Optional.of(routineCharacteristics_NullCallClause0);
      RoutineCharacteristics routineCharacteristics0 = new RoutineCharacteristics(optional0, optional1, optional2);
      QualifiedObjectName qualifiedObjectName0 = new QualifiedObjectName("", "", "");
      FunctionKind functionKind0 = FunctionKind.SCALAR;
      TypeSignature typeSignature0 = new TypeSignature(qualifiedObjectName0);
      LinkedList<TypeSignature> linkedList0 = new LinkedList<TypeSignature>();
      Signature signature0 = new Signature(qualifiedObjectName0, functionKind0, typeSignature0, linkedList0);
      SqlFunctionId sqlFunctionId0 = new SqlFunctionId(qualifiedObjectName0, linkedList0);
      SqlInvokedFunction sqlInvokedFunction0 = new SqlInvokedFunction(stack0, "}Eo<<L >]snjU", routineCharacteristics0, "}Eo<<L >]snjU", signature0, sqlFunctionId0);
      inMemoryFunctionNamespaceManager0.createFunction(sqlInvokedFunction0, true);
      SqlFunctionHandle sqlFunctionHandle0 = new SqlFunctionHandle(sqlFunctionId0, "}Eo<<L >]snjU");
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.fetchFunctionImplementationDirect(sqlFunctionHandle0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.MoreCollectors$ToOptionalState", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("w('<fsmj'}", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      QualifiedObjectName qualifiedObjectName0 = new QualifiedObjectName("w('<fsmj'}", "w('<fsmj'}", "w('<fsmj'}");
      Optional<List<TypeSignature>> optional0 = Optional.empty();
      // Undeclared exception!
      try { 
        inMemoryFunctionNamespaceManager0.dropFunction(qualifiedObjectName0, optional0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Drop Function is not supported in InMemoryFunctionNamespaceManager
         //
         verifyException("com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<RoutineCharacteristics.Language, FunctionImplementationType> hashMap0 = new HashMap<RoutineCharacteristics.Language, FunctionImplementationType>();
      SqlFunctionExecutors sqlFunctionExecutors0 = new SqlFunctionExecutors(hashMap0, (ThriftSqlFunctionExecutor) null);
      SqlInvokedFunctionNamespaceManagerConfig sqlInvokedFunctionNamespaceManagerConfig0 = new SqlInvokedFunctionNamespaceManagerConfig();
      InMemoryFunctionNamespaceManager inMemoryFunctionNamespaceManager0 = new InMemoryFunctionNamespaceManager("CMK,Y", sqlFunctionExecutors0, sqlInvokedFunctionNamespaceManagerConfig0);
      Optional<String> optional0 = Optional.ofNullable("CMK,Y");
      Collection<SqlInvokedFunction> collection0 = inMemoryFunctionNamespaceManager0.listFunctions(optional0, optional0);
      assertNotNull(collection0);
  }
}
