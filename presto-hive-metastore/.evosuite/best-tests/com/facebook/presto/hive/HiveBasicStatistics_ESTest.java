/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:32:44 GMT 2021
 */

package com.facebook.presto.hive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.HiveBasicStatistics;
import java.util.OptionalLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HiveBasicStatistics_ESTest extends HiveBasicStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = null;
      try {
        hiveBasicStatistics0 = new HiveBasicStatistics((OptionalLong) null, (OptionalLong) null, (OptionalLong) null, (OptionalLong) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileCount is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createEmptyStatistics();
      OptionalLong optionalLong0 = OptionalLong.empty();
      OptionalLong optionalLong1 = OptionalLong.of(3000L);
      HiveBasicStatistics hiveBasicStatistics1 = new HiveBasicStatistics(optionalLong0, optionalLong0, optionalLong0, optionalLong1);
      boolean boolean0 = hiveBasicStatistics0.equals(hiveBasicStatistics1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createZeroStatistics();
      OptionalLong optionalLong0 = hiveBasicStatistics0.getFileCount();
      HiveBasicStatistics hiveBasicStatistics1 = HiveBasicStatistics.createEmptyStatistics();
      OptionalLong optionalLong1 = hiveBasicStatistics1.getOnDiskDataSizeInBytes();
      HiveBasicStatistics hiveBasicStatistics2 = new HiveBasicStatistics(optionalLong0, optionalLong0, optionalLong1, optionalLong1);
      boolean boolean0 = hiveBasicStatistics0.equals(hiveBasicStatistics2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createZeroStatistics();
      OptionalLong optionalLong0 = hiveBasicStatistics0.getFileCount();
      HiveBasicStatistics hiveBasicStatistics1 = new HiveBasicStatistics(optionalLong0, optionalLong0, optionalLong0, optionalLong0);
      boolean boolean0 = hiveBasicStatistics0.equals(hiveBasicStatistics1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createEmptyStatistics();
      HiveBasicStatistics hiveBasicStatistics1 = HiveBasicStatistics.createZeroStatistics();
      boolean boolean0 = hiveBasicStatistics1.equals(hiveBasicStatistics0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createEmptyStatistics();
      OptionalLong optionalLong0 = hiveBasicStatistics0.getOnDiskDataSizeInBytes();
      boolean boolean0 = hiveBasicStatistics0.equals(optionalLong0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createZeroStatistics();
      boolean boolean0 = hiveBasicStatistics0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = new HiveBasicStatistics(0L, 552L, 0L, 552L);
      HiveBasicStatistics hiveBasicStatistics1 = HiveBasicStatistics.createZeroStatistics();
      boolean boolean0 = hiveBasicStatistics0.equals(hiveBasicStatistics1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = new HiveBasicStatistics(0L, 552L, 0L, 552L);
      hiveBasicStatistics0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = new HiveBasicStatistics(0L, 552L, 0L, 552L);
      OptionalLong optionalLong0 = hiveBasicStatistics0.getInMemoryDataSizeInBytes();
      assertNotNull(optionalLong0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createEmptyStatistics();
      boolean boolean0 = hiveBasicStatistics0.equals(hiveBasicStatistics0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createZeroStatistics();
      String string0 = hiveBasicStatistics0.toString();
      assertEquals("HiveBasicStatistics{fileCount=OptionalLong[0], rowCount=OptionalLong[0], inMemoryDataSizeInBytes=OptionalLong[0], onDiskDataSizeInBytes=OptionalLong[0]}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = HiveBasicStatistics.createZeroStatistics();
      OptionalLong optionalLong0 = hiveBasicStatistics0.getRowCount();
      assertNotNull(optionalLong0);
  }
}
