/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:25:35 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.Database;
import com.facebook.presto.spi.security.PrincipalType;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Database_ESTest extends Database_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setDatabaseName("");
      PrincipalType principalType0 = PrincipalType.ROLE;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder2.setOwnerName("");
      Database database0 = database_Builder2.build();
      String string0 = database0.getOwnerName();
      assertEquals("", string0);
      assertEquals("", database0.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder0.setOwnerType(principalType0);
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      database_Builder0.setDatabaseName("");
      Database database0 = database_Builder1.build();
      String string0 = database0.getDatabaseName();
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getOwnerName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Database.builder((Database) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.Database", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrincipalType principalType0 = PrincipalType.USER;
      Database database0 = null;
      try {
        database0 = new Database("", (Optional<String>) null, "", principalType0, (Optional<String>) null, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // location is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Database.Builder database_Builder0 = new Database.Builder();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      PrincipalType principalType0 = PrincipalType.ROLE;
      Database.Builder database_Builder1 = database_Builder0.setOwnerType(principalType0);
      database_Builder1.setOwnerName("JO7V");
      database_Builder1.setDatabaseName("p7?BSB#>S*");
      Database database0 = database_Builder1.build();
      Database.Builder database_Builder2 = new Database.Builder(database0);
      assertEquals("p7?BSB#>S*", database0.getDatabaseName());
      assertEquals("JO7V", database0.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder0.setOwnerType(principalType0);
      database_Builder0.setDatabaseName("eXl0kW^g0kzw{]!QFs");
      database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      Database database0 = database_Builder0.build();
      Map<String, String> map0 = database0.getParameters();
      Optional<String> optional0 = database0.getLocation();
      PrincipalType principalType1 = PrincipalType.ROLE;
      Database database1 = new Database("eXl0kW^g0kzw{]!QFs", optional0, "X$/Jpi&g`s#K5Ze<d3", principalType1, optional0, map0);
      boolean boolean0 = database0.equals(database1);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database1.getOwnerName());
      assertEquals("eXl0kW^g0kzw{]!QFs", database1.getDatabaseName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder0.setOwnerType(principalType0);
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("eXl0kW^g0kzw{]!QFs");
      database_Builder1.setDatabaseName("1@)=d]");
      Database database0 = database_Builder1.build();
      Optional<String> optional0 = database0.getComment();
      Map<String, String> map0 = database0.getParameters();
      Database database1 = new Database("1@)=d]", optional0, "com.google.common.collect.AbstractMapEntry", principalType0, optional0, map0);
      boolean boolean0 = database0.equals(database1);
      assertFalse(boolean0);
      assertEquals("1@)=d]", database1.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setDatabaseName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder1.setOwnerType(principalType0);
      Database.Builder database_Builder2 = database_Builder1.setOwnerName("eXl0kW^g0kzw{]!QFs");
      Database database0 = database_Builder2.build();
      Optional<String> optional0 = database0.getComment();
      Map<String, String> map0 = database0.getParameters();
      Database database1 = new Database("Database{databaseName=1@)=d], location=Optional.empty, ownerName=X$/Jpi&g`s#K5Ze<d3, ownerType=USER, comment=Optional.empty, parameters={}}", optional0, "X$/Jpi&g`s#K5Ze<d3", principalType0, optional0, map0);
      boolean boolean0 = database0.equals(database1);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database1.getOwnerName());
      assertEquals("Database{databaseName=1@)=d], location=Optional.empty, ownerName=X$/Jpi&g`s#K5Ze<d3, ownerType=USER, comment=Optional.empty, parameters={}}", database1.getDatabaseName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder2.setDatabaseName("1@)=d]");
      Database database0 = database_Builder2.build();
      Database database1 = database_Builder1.build();
      boolean boolean0 = database0.equals(database1);
      assertEquals("1@)=d]", database1.getDatabaseName());
      assertTrue(boolean0);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database1.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setDatabaseName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder1.setOwnerType(principalType0);
      Database.Builder database_Builder2 = database_Builder1.setOwnerName("eXl0kW^g0kzw{]!QFs");
      Database database0 = database_Builder2.build();
      boolean boolean0 = database0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getDatabaseName());
      assertEquals("eXl0kW^g0kzw{]!QFs", database0.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder2.setDatabaseName("1@)=d]");
      Database database0 = database_Builder2.build();
      boolean boolean0 = database0.equals(database0);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getOwnerName());
      assertTrue(boolean0);
      assertEquals("1@)=d]", database0.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder1.setOwnerType(principalType0);
      database_Builder1.setDatabaseName("1@)=d]");
      Database database0 = database_Builder0.build();
      boolean boolean0 = database0.equals("eXl0kW^g0kzw{]!QFs");
      assertEquals("1@)=d]", database0.getDatabaseName());
      assertFalse(boolean0);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder2.setDatabaseName("1@)=d]");
      Database database0 = database_Builder0.build();
      Optional<String> optional0 = database0.getComment();
      database_Builder1.setLocation(optional0);
      assertEquals("1@)=d]", database0.getDatabaseName());
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder0.setDatabaseName("1@)=d]");
      Database database0 = database_Builder2.build();
      Map<String, String> map0 = database0.getParameters();
      database_Builder1.setParameters(map0);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getOwnerName());
      assertEquals("1@)=d]", database0.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder1.setDatabaseName("1@)=d]");
      Database database0 = database_Builder2.build();
      String string0 = database0.toString();
      assertEquals("Database{databaseName=1@)=d], location=Optional.empty, ownerName=X$/Jpi&g`s#K5Ze<d3, ownerType=USER, comment=Optional.empty, parameters={}}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder2.setDatabaseName("1@)=d]");
      Database database0 = database_Builder1.build();
      database0.getOwnerType();
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getOwnerName());
      assertEquals("1@)=d]", database0.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      Database.Builder database_Builder2 = database_Builder1.setOwnerType(principalType0);
      database_Builder0.setDatabaseName("1@)=d]");
      Database database0 = database_Builder2.build();
      String string0 = database0.getOwnerName();
      assertEquals("1@)=d]", database0.getDatabaseName());
      assertEquals("X$/Jpi&g`s#K5Ze<d3", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder0.setOwnerType(principalType0);
      Database.Builder database_Builder1 = database_Builder0.setOwnerName("eXl0kW[^g0kzw{]!QFs");
      database_Builder1.setDatabaseName("eXl0kW[^g0kzw{]!QFs");
      Database database0 = database_Builder1.build();
      Database.builder(database0);
      assertEquals("eXl0kW[^g0kzw{]!QFs", database0.getOwnerName());
      assertEquals("eXl0kW[^g0kzw{]!QFs", database0.getDatabaseName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setDatabaseName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder1.setOwnerType(principalType0);
      Database.Builder database_Builder2 = database_Builder1.setOwnerName("eXl0kW^g0kzw{]!QFs");
      Database database0 = database_Builder2.build();
      Optional<String> optional0 = database0.getComment();
      database_Builder2.setComment(optional0);
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getDatabaseName());
      assertEquals("eXl0kW^g0kzw{]!QFs", database0.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setDatabaseName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder1.setOwnerType(principalType0);
      Database.Builder database_Builder2 = database_Builder1.setOwnerName("eXl0kW^g0kzw{]!QFs");
      Database database0 = database_Builder2.build();
      database0.hashCode();
      assertEquals("X$/Jpi&g`s#K5Ze<d3", database0.getDatabaseName());
      assertEquals("eXl0kW^g0kzw{]!QFs", database0.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Database.Builder database_Builder0 = Database.builder();
      Database.Builder database_Builder1 = database_Builder0.setDatabaseName("X$/Jpi&g`s#K5Ze<d3");
      PrincipalType principalType0 = PrincipalType.USER;
      database_Builder1.setOwnerType(principalType0);
      Database.Builder database_Builder2 = database_Builder1.setOwnerName("eXl0kW^g0kzw{]!QFs");
      Database database0 = database_Builder2.build();
      String string0 = database0.getDatabaseName();
      assertEquals("eXl0kW^g0kzw{]!QFs", database0.getOwnerName());
      assertEquals("X$/Jpi&g`s#K5Ze<d3", string0);
  }
}
