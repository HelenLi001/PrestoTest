/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:39:25 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.DoubleStatistics;
import java.util.OptionalDouble;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleStatistics_ESTest extends DoubleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleStatistics doubleStatistics0 = null;
      try {
        doubleStatistics0 = new DoubleStatistics((OptionalDouble) null, (OptionalDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // min is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.empty();
      OptionalDouble optionalDouble1 = OptionalDouble.of(1.0);
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      DoubleStatistics doubleStatistics1 = new DoubleStatistics(optionalDouble0, optionalDouble1);
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.empty();
      OptionalDouble optionalDouble1 = OptionalDouble.of(977.429581);
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble1);
      DoubleStatistics doubleStatistics1 = new DoubleStatistics(optionalDouble1, optionalDouble0);
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.empty();
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      DoubleStatistics doubleStatistics1 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.empty();
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      boolean boolean0 = doubleStatistics0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.empty();
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.of(1881.281119727269);
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      boolean boolean0 = doubleStatistics0.equals(optionalDouble0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.of(1881.281119727269);
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      OptionalDouble optionalDouble1 = doubleStatistics0.getMax();
      assertSame(optionalDouble0, optionalDouble1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.of(0.0);
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      OptionalDouble optionalDouble1 = doubleStatistics0.getMin();
      assertSame(optionalDouble1, optionalDouble0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.empty();
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      String string0 = doubleStatistics0.toString();
      assertEquals("DoubleStatistics{min=OptionalDouble.empty, max=OptionalDouble.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionalDouble optionalDouble0 = OptionalDouble.empty();
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(optionalDouble0, optionalDouble0);
      doubleStatistics0.hashCode();
  }
}
