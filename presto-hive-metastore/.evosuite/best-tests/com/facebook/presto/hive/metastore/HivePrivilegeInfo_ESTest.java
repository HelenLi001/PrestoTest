/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:16:46 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.HivePrivilegeInfo;
import com.facebook.presto.spi.security.PrestoPrincipal;
import com.facebook.presto.spi.security.Privilege;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HivePrivilegeInfo_ESTest extends HivePrivilegeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      boolean boolean0 = hivePrivilegeInfo0.isGrantOption();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        HivePrivilegeInfo.toHivePrivilege((Privilege) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.HivePrivilegeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.SELECT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal1);
      // Undeclared exception!
      try { 
        hivePrivilegeInfo0.isContainedIn((HivePrivilegeInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.HivePrivilegeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.UPDATE;
      HivePrivilegeInfo hivePrivilegeInfo0 = null;
      try {
        hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, (PrestoPrincipal) null, (PrestoPrincipal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // grantor is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.SELECT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      boolean boolean0 = hivePrivilegeInfo0.isGrantOption();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.OWNERSHIP;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.getHivePrivilege();
      assertFalse(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.DELETE;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(prestoPrincipal0).toString();
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal1);
      PrestoPrincipal prestoPrincipal2 = hivePrivilegeInfo0.getGrantor();
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal2, prestoPrincipal2);
      boolean boolean0 = hivePrivilegeInfo0.equals(hivePrivilegeInfo1);
      assertFalse(boolean0);
      assertFalse(hivePrivilegeInfo1.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.OWNERSHIP;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(prestoPrincipal0).toString();
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      PrestoPrincipal prestoPrincipal1 = hivePrivilegeInfo0.getGrantor();
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal1, prestoPrincipal1);
      boolean boolean0 = hivePrivilegeInfo0.equals(hivePrivilegeInfo1);
      assertTrue(boolean0);
      assertFalse(hivePrivilegeInfo1.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.SELECT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal1, prestoPrincipal1);
      boolean boolean0 = hivePrivilegeInfo1.equals(hivePrivilegeInfo0);
      assertFalse(boolean0);
      assertTrue(hivePrivilegeInfo1.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege1 = HivePrivilegeInfo.HivePrivilege.UPDATE;
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege1, true, prestoPrincipal1, prestoPrincipal1);
      boolean boolean0 = hivePrivilegeInfo1.equals(hivePrivilegeInfo0);
      assertFalse(boolean0);
      assertTrue(hivePrivilegeInfo1.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      Privilege privilege0 = Privilege.DELETE;
      boolean boolean0 = hivePrivilegeInfo0.equals(privilege0);
      assertTrue(hivePrivilegeInfo0.isGrantOption());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.SELECT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      boolean boolean0 = hivePrivilegeInfo0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.OWNERSHIP;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      boolean boolean0 = hivePrivilegeInfo0.equals(hivePrivilegeInfo0);
      assertTrue(boolean0);
      assertFalse(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal1, prestoPrincipal1);
      boolean boolean0 = hivePrivilegeInfo0.equals(hivePrivilegeInfo1);
      assertTrue(hivePrivilegeInfo1.isGrantOption());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.OWNERSHIP;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.toPrivilegeInfo();
      assertFalse(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.UPDATE;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.toPrivilegeInfo();
      assertTrue(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.toPrivilegeInfo();
      assertTrue(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.SELECT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.toPrivilegeInfo();
      assertTrue(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.SELECT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal1, prestoPrincipal1);
      boolean boolean0 = hivePrivilegeInfo1.isContainedIn(hivePrivilegeInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.OWNERSHIP;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal1, prestoPrincipal1);
      boolean boolean0 = hivePrivilegeInfo0.isContainedIn(hivePrivilegeInfo1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege1 = HivePrivilegeInfo.HivePrivilege.UPDATE;
      PrestoPrincipal prestoPrincipal1 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo1 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege1, true, prestoPrincipal1, prestoPrincipal1);
      boolean boolean0 = hivePrivilegeInfo0.isContainedIn(hivePrivilegeInfo1);
      assertFalse(boolean0);
      assertTrue(hivePrivilegeInfo1.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Privilege privilege0 = Privilege.UPDATE;
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.toHivePrivilege(privilege0);
      assertEquals(HivePrivilegeInfo.HivePrivilege.UPDATE, hivePrivilegeInfo_HivePrivilege0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Privilege privilege0 = Privilege.INSERT;
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.toHivePrivilege(privilege0);
      assertEquals(HivePrivilegeInfo.HivePrivilege.INSERT, hivePrivilegeInfo_HivePrivilege0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Privilege privilege0 = Privilege.DELETE;
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.toHivePrivilege(privilege0);
      assertEquals(HivePrivilegeInfo.HivePrivilege.DELETE, hivePrivilegeInfo_HivePrivilege0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Privilege privilege0 = Privilege.SELECT;
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.toHivePrivilege(privilege0);
      assertEquals(HivePrivilegeInfo.HivePrivilege.SELECT, hivePrivilegeInfo_HivePrivilege0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.hashCode();
      assertTrue(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      boolean boolean0 = hivePrivilegeInfo0.isContainedIn(hivePrivilegeInfo0);
      assertTrue(boolean0);
      assertTrue(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(prestoPrincipal0).toString();
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.getGrantee();
      assertTrue(hivePrivilegeInfo0.isGrantOption());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.INSERT;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(prestoPrincipal0).toString();
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, true, prestoPrincipal0, prestoPrincipal0);
      String string0 = hivePrivilegeInfo0.toString();
      assertEquals("HivePrivilegeInfo{privilege=INSERT, grantOption=true, grantor=null, grantee=null}", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HivePrivilegeInfo.HivePrivilege hivePrivilegeInfo_HivePrivilege0 = HivePrivilegeInfo.HivePrivilege.DELETE;
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      HivePrivilegeInfo hivePrivilegeInfo0 = new HivePrivilegeInfo(hivePrivilegeInfo_HivePrivilege0, false, prestoPrincipal0, prestoPrincipal0);
      hivePrivilegeInfo0.toPrivilegeInfo();
      assertFalse(hivePrivilegeInfo0.isGrantOption());
  }
}
