/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:35:59 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.IntegerStatistics;
import java.util.OptionalLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntegerStatistics_ESTest extends IntegerStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      OptionalLong optionalLong1 = OptionalLong.of((-1L));
      IntegerStatistics integerStatistics1 = new IntegerStatistics(optionalLong0, optionalLong1);
      boolean boolean0 = integerStatistics0.equals(integerStatistics1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.of((-50L));
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      OptionalLong optionalLong1 = OptionalLong.empty();
      IntegerStatistics integerStatistics1 = new IntegerStatistics(optionalLong1, optionalLong0);
      boolean boolean0 = integerStatistics0.equals(integerStatistics1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      IntegerStatistics integerStatistics1 = new IntegerStatistics(optionalLong0, optionalLong0);
      boolean boolean0 = integerStatistics0.equals(integerStatistics1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      boolean boolean0 = integerStatistics0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      boolean boolean0 = integerStatistics0.equals(integerStatistics0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      boolean boolean0 = integerStatistics0.equals(optionalLong0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      integerStatistics0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      OptionalLong optionalLong1 = integerStatistics0.getMin();
      assertSame(optionalLong0, optionalLong1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      String string0 = integerStatistics0.toString();
      assertEquals("IntegerStatistics{min=OptionalLong.empty, max=OptionalLong.empty}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = new IntegerStatistics(optionalLong0, optionalLong0);
      OptionalLong optionalLong1 = integerStatistics0.getMax();
      assertSame(optionalLong0, optionalLong1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionalLong optionalLong0 = OptionalLong.empty();
      IntegerStatistics integerStatistics0 = null;
      try {
        integerStatistics0 = new IntegerStatistics((OptionalLong) null, optionalLong0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // min is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
