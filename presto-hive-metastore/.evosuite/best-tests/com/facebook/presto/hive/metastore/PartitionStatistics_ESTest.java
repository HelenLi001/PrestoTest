/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:39:25 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.HiveBasicStatistics;
import com.facebook.presto.hive.metastore.HiveColumnStatistics;
import com.facebook.presto.hive.metastore.PartitionStatistics;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PartitionStatistics_ESTest extends PartitionStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = mock(HiveBasicStatistics.class, new ViolatedAssumptionAnswer());
      PartitionStatistics partitionStatistics0 = PartitionStatistics.empty();
      Map<String, HiveColumnStatistics> map0 = partitionStatistics0.getColumnStatistics();
      PartitionStatistics partitionStatistics1 = new PartitionStatistics(hiveBasicStatistics0, map0);
      assertFalse(partitionStatistics1.equals((Object)partitionStatistics0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HiveBasicStatistics hiveBasicStatistics0 = mock(HiveBasicStatistics.class, new ViolatedAssumptionAnswer());
      PartitionStatistics partitionStatistics0 = null;
      try {
        partitionStatistics0 = new PartitionStatistics(hiveBasicStatistics0, (Map<String, HiveColumnStatistics>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnStatistics can not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PartitionStatistics partitionStatistics0 = PartitionStatistics.empty();
      PartitionStatistics.Builder partitionStatistics_Builder0 = PartitionStatistics.builder();
      HiveBasicStatistics hiveBasicStatistics0 = mock(HiveBasicStatistics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hiveBasicStatistics0).toString();
      PartitionStatistics.Builder partitionStatistics_Builder1 = partitionStatistics_Builder0.setBasicStatistics(hiveBasicStatistics0);
      PartitionStatistics partitionStatistics1 = partitionStatistics_Builder1.build();
      boolean boolean0 = partitionStatistics0.equals(partitionStatistics1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PartitionStatistics.Builder partitionStatistics_Builder0 = new PartitionStatistics.Builder();
      PartitionStatistics partitionStatistics0 = partitionStatistics_Builder0.build();
      PartitionStatistics partitionStatistics1 = partitionStatistics_Builder0.build();
      boolean boolean0 = partitionStatistics1.equals(partitionStatistics0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PartitionStatistics partitionStatistics0 = PartitionStatistics.empty();
      boolean boolean0 = partitionStatistics0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PartitionStatistics.Builder partitionStatistics_Builder0 = new PartitionStatistics.Builder();
      PartitionStatistics partitionStatistics0 = partitionStatistics_Builder0.build();
      boolean boolean0 = partitionStatistics0.equals(partitionStatistics0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PartitionStatistics.Builder partitionStatistics_Builder0 = new PartitionStatistics.Builder();
      PartitionStatistics partitionStatistics0 = partitionStatistics_Builder0.build();
      boolean boolean0 = partitionStatistics0.equals(partitionStatistics_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PartitionStatistics.Builder partitionStatistics_Builder0 = new PartitionStatistics.Builder();
      PartitionStatistics partitionStatistics0 = partitionStatistics_Builder0.build();
      partitionStatistics0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PartitionStatistics.Builder partitionStatistics_Builder0 = new PartitionStatistics.Builder();
      PartitionStatistics partitionStatistics0 = partitionStatistics_Builder0.build();
      HiveBasicStatistics hiveBasicStatistics0 = partitionStatistics0.getBasicStatistics();
      assertNotNull(hiveBasicStatistics0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PartitionStatistics partitionStatistics0 = PartitionStatistics.empty();
      String string0 = partitionStatistics0.toString();
      assertEquals("PartitionStatistics{basicStatistics=HiveBasicStatistics{fileCount=OptionalLong.empty, rowCount=OptionalLong.empty, inMemoryDataSizeInBytes=OptionalLong.empty, onDiskDataSizeInBytes=OptionalLong.empty}, columnStatistics={}}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PartitionStatistics.Builder partitionStatistics_Builder0 = new PartitionStatistics.Builder();
      PartitionStatistics partitionStatistics0 = partitionStatistics_Builder0.build();
      Map<String, HiveColumnStatistics> map0 = partitionStatistics0.getColumnStatistics();
      PartitionStatistics.Builder partitionStatistics_Builder1 = partitionStatistics_Builder0.setColumnStatistics(map0);
      assertSame(partitionStatistics_Builder1, partitionStatistics_Builder0);
  }
}
