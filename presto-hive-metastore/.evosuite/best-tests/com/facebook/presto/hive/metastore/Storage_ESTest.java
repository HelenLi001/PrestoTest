/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:27:09 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.HiveBucketProperty;
import com.facebook.presto.hive.metastore.Storage;
import com.facebook.presto.hive.metastore.StorageFormat;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Storage_ESTest extends Storage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn(" #S&YP=KVB/J<Iqh").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      storage_Builder0.setSkewed(true);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation(" #S&YP=KVB/J<Iqh");
      Storage storage0 = storage_Builder2.build();
      boolean boolean0 = storage0.isSkewed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder0.build();
      storage0.getLocation();
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.base.Preconditions").when(storageFormat0).toString();
      Storage.Builder storage_Builder0 = Storage.builder();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("serdeParameters");
      Storage storage0 = storage_Builder2.build();
      Storage.builder(storage0);
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = null;
      try {
        storage0 = new Storage(storageFormat0, "parameters is null", (Optional<HiveBucketProperty>) null, false, (Map<String, String>) null, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bucketProperty is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn(" #S&YP=KVB/J<Iqh", " #S&YP=KVB/J<Iqh").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      storage_Builder0.setSkewed(true);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation(" #S&YP=KVB/J<Iqh");
      Storage storage0 = storage_Builder2.build();
      Optional<HiveBucketProperty> optional0 = storage0.getBucketProperty();
      Map<String, String> map0 = storage0.getSerdeParameters();
      StorageFormat storageFormat1 = storage0.getStorageFormat();
      Storage storage1 = new Storage(storageFormat1, "=", optional0, true, map0, map0);
      boolean boolean0 = storage0.equals(storage1);
      assertFalse(boolean0);
      assertTrue(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      StorageFormat storageFormat1 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(storageFormat1).toString();
      Storage.Builder storage_Builder3 = storage_Builder1.setStorageFormat(storageFormat1);
      Storage storage1 = storage_Builder3.build();
      boolean boolean0 = storage0.equals(storage1);
      assertFalse(storage1.isSkewed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("dz(zxX").when(storageFormat0).toString();
      Storage.Builder storage_Builder0 = Storage.builder();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("dz(zxX");
      Storage storage0 = storage_Builder2.build();
      Optional<HiveBucketProperty> optional0 = storage0.getBucketProperty();
      Map<String, String> map0 = storage0.getParameters();
      Storage storage1 = new Storage(storageFormat0, "dz(zxX", optional0, true, map0, map0);
      boolean boolean0 = storage1.equals(storage0);
      assertTrue(storage1.isSkewed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW", "UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      Storage storage1 = storage_Builder1.build();
      boolean boolean0 = storage0.equals(storage1);
      assertTrue(boolean0);
      assertFalse(storage1.isSkewed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(storageFormat0).toString();
      Storage.Builder storage_Builder0 = Storage.builder();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("serdeParameters");
      Storage storage0 = storage_Builder2.build();
      boolean boolean0 = storage0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.base.Preconditions").when(storageFormat0).toString();
      Storage.Builder storage_Builder0 = Storage.builder();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("serdeParameters");
      Storage storage0 = storage_Builder2.build();
      boolean boolean0 = storage0.equals(storage0);
      assertTrue(boolean0);
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      boolean boolean0 = storage0.equals(storage_Builder0);
      assertFalse(storage0.isSkewed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      Map<String, String> map0 = storage0.getSerdeParameters();
      storage_Builder0.setParameters(map0);
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      Map<String, String> map0 = storage0.getSerdeParameters();
      storage_Builder1.setSerdeParameters(map0);
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      Optional<HiveBucketProperty> optional0 = storage0.getBucketProperty();
      storage_Builder2.setBucketProperty(optional0);
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW", "UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      storage0.toString();
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      boolean boolean0 = storage0.isSkewed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Storage.Builder storage_Builder0 = Storage.builder();
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("UF]Zf@7kTtxhN+WW").when(storageFormat0).toString();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("");
      Storage storage0 = storage_Builder2.build();
      storage0.hashCode();
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.common.base.Preconditions").when(storageFormat0).toString();
      Storage.Builder storage_Builder0 = Storage.builder();
      Storage.Builder storage_Builder1 = storage_Builder0.setStorageFormat(storageFormat0);
      Storage.Builder storage_Builder2 = storage_Builder1.setLocation("serdeParameters");
      Storage storage0 = storage_Builder2.build();
      storage0.getLocation();
      assertFalse(storage0.isSkewed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Storage.builder((Storage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.Storage", e);
      }
  }
}
