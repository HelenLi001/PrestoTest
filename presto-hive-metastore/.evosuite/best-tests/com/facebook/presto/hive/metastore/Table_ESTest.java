/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:18:37 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.Column;
import com.facebook.presto.hive.metastore.PrestoTableType;
import com.facebook.presto.hive.metastore.Storage;
import com.facebook.presto.hive.metastore.Table;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Table_ESTest extends Table_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Table.Builder table_Builder1 = table_Builder0.setParameter("storage", "");
      assertSame(table_Builder0, table_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      PrestoTableType prestoTableType0 = PrestoTableType.OTHER;
      Table table0 = null;
      try {
        table0 = new Table("dtabaseName is null", "dtabaseName is null", "gwzzb", prestoTableType0, storage0, (List<Column>) null, (List<Column>) null, (Map<String, String>) null, (Optional<String>) null, (Optional<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // dataColumns is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      // Undeclared exception!
      try { 
        table_Builder0.setParameters((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Table.Builder table_Builder1 = table_Builder0.setOwner("storageFormat");
      assertSame(table_Builder1, table_Builder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Consumer<Storage.Builder> consumer0 = (Consumer<Storage.Builder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Table.Builder table_Builder1 = table_Builder0.withStorage(consumer0);
      assertSame(table_Builder1, table_Builder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Table.Builder table_Builder1 = table_Builder0.setDatabaseName("storageFormat");
      assertSame(table_Builder1, table_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Storage.Builder storage_Builder0 = table_Builder0.getStorageBuilder();
      assertNotNull(storage_Builder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Table.Builder table_Builder1 = table_Builder0.setTableName("storageFormat");
      assertSame(table_Builder0, table_Builder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      // Undeclared exception!
      try { 
        table_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // storageFormat is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Table.Builder table_Builder1 = table_Builder0.addDataColumn((Column) null);
      assertSame(table_Builder0, table_Builder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Table.Builder table_Builder1 = table_Builder0.setViewOriginalText((Optional<String>) null);
      assertSame(table_Builder1, table_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      // Undeclared exception!
      try { 
        table_Builder0.setDataColumns((List<Column>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      Table.Builder table_Builder1 = table_Builder0.setTableType(prestoTableType0);
      assertSame(table_Builder1, table_Builder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      Table.Builder table_Builder1 = table_Builder0.setViewExpandedText((Optional<String>) null);
      assertSame(table_Builder1, table_Builder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Table.Builder table_Builder0 = Table.builder();
      // Undeclared exception!
      try { 
        table_Builder0.setPartitionColumns((List<Column>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Table.builder((Table) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.Table", e);
      }
  }
}
