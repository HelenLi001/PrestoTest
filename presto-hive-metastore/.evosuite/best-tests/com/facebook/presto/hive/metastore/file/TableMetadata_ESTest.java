/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:24:00 GMT 2021
 */

package com.facebook.presto.hive.metastore.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.HiveBucketProperty;
import com.facebook.presto.hive.HiveStorageFormat;
import com.facebook.presto.hive.metastore.Column;
import com.facebook.presto.hive.metastore.HiveColumnStatistics;
import com.facebook.presto.hive.metastore.PrestoTableType;
import com.facebook.presto.hive.metastore.Storage;
import com.facebook.presto.hive.metastore.StorageFormat;
import com.facebook.presto.hive.metastore.Table;
import com.facebook.presto.hive.metastore.file.TableMetadata;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TableMetadata_ESTest extends TableMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      List<Column> list0 = null;
      Map<String, String> map0 = null;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn("long").when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, (Storage) null).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      String string0 = "";
      PrestoTableType prestoTableType1 = PrestoTableType.MANAGED_TABLE;
      TableMetadata tableMetadata0 = null;
      try {
        tableMetadata0 = new TableMetadata(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.file.TableMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.EXTERNAL_TABLE;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage0).getBucketProperty();
      doReturn((String) null).when(storage0).getLocation();
      doReturn((Map) null).when(storage0).getParameters();
      doReturn((Map) null).when(storage0).getSerdeParameters();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage1).getStorageFormat();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn((String) null).when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage1, storage0, storage0, storage0, storage0).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      TableMetadata tableMetadata0 = null;
      try {
        tableMetadata0 = new TableMetadata(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      List<Column> list0 = null;
      Map<String, String> map0 = null;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      Storage storage2 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage2).getStorageFormat();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn((String) null).when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage2, (Storage) null).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      TableMetadata tableMetadata0 = null;
      try {
        tableMetadata0 = new TableMetadata(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.file.TableMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table1 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table1).getDataColumns();
      doReturn("long").when(table1).getOwner();
      doReturn((Map<String, String>) null).when(table1).getParameters();
      doReturn((List<Column>) null).when(table1).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table1).getStorage();
      doReturn(prestoTableType0).when(table1).getTableType();
      doReturn((Optional<String>) null).when(table1).getViewExpandedText();
      doReturn((Optional<String>) null).when(table1).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table1);
      tableMetadata0.getExternalLocation();
      tableMetadata0.getStorageParameters();
      // Undeclared exception!
      try { 
        tableMetadata0.withParameters((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // dataColumns is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.VIRTUAL_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      StorageFormat storageFormat1 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      Storage storage2 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage2).getStorageFormat();
      Storage storage3 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage3).getBucketProperty();
      doReturn((Map) null).when(storage3).getParameters();
      doReturn((Map) null).when(storage3).getSerdeParameters();
      Table table1 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table1).getDataColumns();
      doReturn((String) null).when(table1).getOwner();
      doReturn((Map<String, String>) null).when(table1).getParameters();
      doReturn((List<Column>) null).when(table1).getPartitionColumns();
      doReturn(storage2, storage3, storage3, storage3).when(table1).getStorage();
      doReturn(prestoTableType0).when(table1).getTableType();
      doReturn((Optional<String>) null).when(table1).getViewExpandedText();
      doReturn((Optional<String>) null).when(table1).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table1);
      tableMetadata0.getViewExpandedText();
      Table table2 = mock(Table.class, new ViolatedAssumptionAnswer());
      tableMetadata0.getBucketProperty();
      Map<String, String> map0 = tableMetadata0.getSerdeParameters();
      // Undeclared exception!
      try { 
        tableMetadata0.withParameters(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // owner is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      List<Column> list0 = null;
      Map<String, String> map0 = null;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Table table1 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table1).getDataColumns();
      doReturn("long").when(table1).getOwner();
      doReturn((Map<String, String>) null).when(table1).getParameters();
      doReturn((List<Column>) null).when(table1).getPartitionColumns();
      doReturn(storage0, (Storage) null).when(table1).getStorage();
      doReturn(prestoTableType0).when(table1).getTableType();
      String string0 = "";
      PrestoTableType prestoTableType1 = PrestoTableType.MANAGED_TABLE;
      TableMetadata tableMetadata0 = null;
      try {
        tableMetadata0 = new TableMetadata(table1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.file.TableMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn("").when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional<String>) null).when(table0).getViewExpandedText();
      doReturn((Optional<String>) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      String string0 = tableMetadata0.getOwner();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      List<Column> list0 = null;
      Map<String, String> map0 = null;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      Storage storage2 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage2).getStorageFormat();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn((String) null).when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage2, (Storage) null).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      TableMetadata tableMetadata0 = null;
      try {
        tableMetadata0 = new TableMetadata(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.file.TableMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      List<Column> list0 = null;
      Map<String, String> map0 = null;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Table table1 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table1).getDataColumns();
      doReturn("long").when(table1).getOwner();
      doReturn((Map<String, String>) null).when(table1).getParameters();
      doReturn((List<Column>) null).when(table1).getPartitionColumns();
      doReturn(storage0, (Storage) null).when(table1).getStorage();
      doReturn(prestoTableType0).when(table1).getTableType();
      String string0 = "";
      PrestoTableType prestoTableType1 = PrestoTableType.MANAGED_TABLE;
      TableMetadata tableMetadata0 = null;
      try {
        tableMetadata0 = new TableMetadata(table1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.file.TableMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn("long").when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional<String>) null).when(table0).getViewExpandedText();
      doReturn((Optional<String>) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      Optional<HiveStorageFormat> optional0 = tableMetadata0.getStorageFormat();
      Map<String, HiveColumnStatistics> map0 = tableMetadata0.getColumnStatistics();
      TableMetadata tableMetadata1 = null;
      try {
        tableMetadata1 = new TableMetadata("", prestoTableType0, (List<Column>) null, (List<Column>) null, (Map<String, String>) null, optional0, (Optional<HiveBucketProperty>) null, (Map<String, String>) null, (Map<String, String>) null, (Optional<String>) null, (Optional<String>) null, (Optional<String>) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // dataColumns is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      List<Column> list0 = null;
      Map<String, String> map0 = null;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn("long").when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, (Storage) null).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      String string0 = "";
      PrestoTableType prestoTableType1 = PrestoTableType.MANAGED_TABLE;
      TableMetadata tableMetadata0 = null;
      try {
        tableMetadata0 = new TableMetadata(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.file.TableMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn((String) null).when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional<String>) null).when(table0).getViewExpandedText();
      doReturn((Optional<String>) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      // Undeclared exception!
      try { 
        tableMetadata0.withDataColumns((List<Column>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // owner is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.VIRTUAL_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn((String) null).when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional<String>) null).when(table0).getViewExpandedText();
      doReturn((Optional<String>) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      // Undeclared exception!
      try { 
        tableMetadata0.toTable((String) null, "long", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // location is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.VIRTUAL_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn((String) null).when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional<String>) null).when(table0).getViewExpandedText();
      doReturn((Optional<String>) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      List<Column> list0 = tableMetadata0.getPartitionColumns();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn("lo9g").when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional<String>) null).when(table0).getViewExpandedText();
      doReturn((Optional<String>) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      Map<String, String> map0 = tableMetadata0.getParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn((String) null).when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional<String>) null).when(table0).getViewExpandedText();
      doReturn((Optional<String>) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      Optional<String> optional0 = tableMetadata0.getViewOriginalText();
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrestoTableType prestoTableType0 = PrestoTableType.MATERIALIZED_VIEW;
      StorageFormat storageFormat0 = mock(StorageFormat.class, new ViolatedAssumptionAnswer());
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn(storageFormat0).when(storage0).getStorageFormat();
      Storage storage1 = mock(Storage.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(storage1).getBucketProperty();
      doReturn((Map) null).when(storage1).getParameters();
      doReturn((Map) null).when(storage1).getSerdeParameters();
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((List<Column>) null).when(table0).getDataColumns();
      doReturn("lo9g").when(table0).getOwner();
      doReturn((Map<String, String>) null).when(table0).getParameters();
      doReturn((List<Column>) null).when(table0).getPartitionColumns();
      doReturn(storage0, storage1, storage1, storage1).when(table0).getStorage();
      doReturn(prestoTableType0).when(table0).getTableType();
      doReturn((Optional) null).when(table0).getViewExpandedText();
      doReturn((Optional) null).when(table0).getViewOriginalText();
      TableMetadata tableMetadata0 = new TableMetadata(table0);
      PrestoTableType prestoTableType1 = tableMetadata0.getTableType();
      assertSame(prestoTableType1, prestoTableType0);
  }
}
