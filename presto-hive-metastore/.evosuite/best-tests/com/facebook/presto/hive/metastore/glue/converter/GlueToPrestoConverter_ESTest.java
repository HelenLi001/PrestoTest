/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:28:42 GMT 2021
 */

package com.facebook.presto.hive.metastore.glue.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.services.glue.model.Database;
import com.amazonaws.services.glue.model.StorageDescriptor;
import com.amazonaws.services.glue.model.Table;
import com.facebook.presto.hive.metastore.Column;
import com.facebook.presto.hive.metastore.Partition;
import com.facebook.presto.hive.metastore.PrestoTableType;
import com.facebook.presto.hive.metastore.glue.converter.GlueToPrestoConverter;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlueToPrestoConverter_ESTest extends GlueToPrestoConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GlueToPrestoConverter.GluePartitionConverter glueToPrestoConverter_GluePartitionConverter0 = new GlueToPrestoConverter.GluePartitionConverter("VBBI0C3Gho^ur", "~#W$Ua'Ewaq)v");
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      glueToPrestoConverter_GluePartitionConverter0.andThen((Function<? super Partition, ? extends Integer>) function0);
      Function<Object, com.amazonaws.services.glue.model.Partition> function1 = (Function<Object, com.amazonaws.services.glue.model.Partition>) mock(Function.class, new ViolatedAssumptionAnswer());
      glueToPrestoConverter_GluePartitionConverter0.compose((Function<? super PrestoTableType, ? extends com.amazonaws.services.glue.model.Partition>) function1);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      glueToPrestoConverter_GluePartitionConverter0.andThen((Function<? super Partition, ? extends Integer>) function2);
      StorageDescriptor storageDescriptor0 = mock(StorageDescriptor.class, new ViolatedAssumptionAnswer());
      com.amazonaws.services.glue.model.Partition partition0 = mock(com.amazonaws.services.glue.model.Partition.class, new ViolatedAssumptionAnswer());
      StorageDescriptor storageDescriptor1 = mock(StorageDescriptor.class, new ViolatedAssumptionAnswer());
      StorageDescriptor storageDescriptor2 = mock(StorageDescriptor.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(storageDescriptor2).getColumns();
      com.amazonaws.services.glue.model.Partition partition1 = mock(com.amazonaws.services.glue.model.Partition.class, new ViolatedAssumptionAnswer());
      doReturn("VBBI0C3Gho^ur").when(partition1).getDatabaseName();
      doReturn(storageDescriptor1, storageDescriptor2).when(partition1).getStorageDescriptor();
      doReturn("~#W$Ua'Ewaq)v").when(partition1).getTableName();
      doReturn((List) null).when(partition1).getValues();
      // Undeclared exception!
      try { 
        glueToPrestoConverter_GluePartitionConverter0.apply(partition1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Function<Column, Column> function0 = Function.identity();
      // Undeclared exception!
      try { 
        GlueToPrestoConverter.mappedCopy((List<Column>) null, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // list is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Database database0 = mock(Database.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(database0).getName();
      // Undeclared exception!
      try { 
        GlueToPrestoConverter.convertDatabase(database0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // databaseName is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StorageDescriptor storageDescriptor0 = mock(StorageDescriptor.class, new ViolatedAssumptionAnswer());
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(table0).getName();
      doReturn((String) null).when(table0).getOwner();
      doReturn(storageDescriptor0, (StorageDescriptor) null).when(table0).getStorageDescriptor();
      doReturn((String) null).when(table0).getTableType();
      // Undeclared exception!
      try { 
        GlueToPrestoConverter.convertTable(table0, "FY3fT]YEbmS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.glue.converter.GlueToPrestoConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GlueToPrestoConverter.GluePartitionConverter glueToPrestoConverter_GluePartitionConverter0 = new GlueToPrestoConverter.GluePartitionConverter("6a@!Yx4/R+", "6a@!Yx4/R+");
      StorageDescriptor storageDescriptor0 = mock(StorageDescriptor.class, new ViolatedAssumptionAnswer());
      com.amazonaws.services.glue.model.Partition partition0 = mock(com.amazonaws.services.glue.model.Partition.class, new ViolatedAssumptionAnswer());
      doReturn("*xk]A+<E", "*xk]A+<E").when(partition0).getDatabaseName();
      doReturn(storageDescriptor0, (StorageDescriptor) null).when(partition0).getStorageDescriptor();
      // Undeclared exception!
      try { 
        glueToPrestoConverter_GluePartitionConverter0.apply(partition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected databaseName, expected: 6a@!Yx4/R+, but found: *xk]A+<E
         //
         verifyException("com.facebook.presto.hive.metastore.glue.converter.GlueToPrestoConverter$GluePartitionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Database database0 = mock(Database.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(database0).getDescription();
      doReturn((String) null).when(database0).getLocationUri();
      doReturn("list is null").when(database0).getName();
      doReturn((Map) null).when(database0).getParameters();
      com.facebook.presto.hive.metastore.Database database1 = GlueToPrestoConverter.convertDatabase(database0);
      assertEquals("PUBLIC", database1.getOwnerName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GlueToPrestoConverter.GluePartitionConverter glueToPrestoConverter_GluePartitionConverter0 = new GlueToPrestoConverter.GluePartitionConverter("VBBIDC3Gho^ur", "]#W$Ua'&waq)v");
      StorageDescriptor storageDescriptor0 = mock(StorageDescriptor.class, new ViolatedAssumptionAnswer());
      StorageDescriptor storageDescriptor1 = mock(StorageDescriptor.class, new ViolatedAssumptionAnswer());
      com.amazonaws.services.glue.model.Partition partition0 = mock(com.amazonaws.services.glue.model.Partition.class, new ViolatedAssumptionAnswer());
      doReturn("VBBIDC3Gho^ur").when(partition0).getDatabaseName();
      doReturn(storageDescriptor0, storageDescriptor1).when(partition0).getStorageDescriptor();
      doReturn("VBBIDC3Gho^ur", (String) null).when(partition0).getTableName();
      // Undeclared exception!
      try { 
        glueToPrestoConverter_GluePartitionConverter0.apply(partition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected tableName, expected: ]#W$Ua'&waq)v, but found: null
         //
         verifyException("com.facebook.presto.hive.metastore.glue.converter.GlueToPrestoConverter$GluePartitionConverter", e);
      }
  }
}
