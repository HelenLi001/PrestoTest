/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:24:01 GMT 2021
 */

package com.facebook.presto.hive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.ColumnEncryptionInformation;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColumnEncryptionInformation_ESTest extends ColumnEncryptionInformation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnEncryptionInformation.fromHiveProperty(":7y~J43Oo%:@x=<vik");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encrypted column entry needs to be in the format 'key1:col1,col2'. Received: :7y~J43Oo%:@x=<vik
         //
         verifyException("com.facebook.presto.hive.ColumnEncryptionInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty((String) null);
      String string0 = columnEncryptionInformation0.toHiveProperty();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty("C$kt9o:");
      // Undeclared exception!
      try { 
        ColumnEncryptionInformation.fromTableProperty(columnEncryptionInformation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.hive.ColumnEncryptionInformation cannot be cast to java.util.List
         //
         verifyException("com.facebook.presto.hive.ColumnEncryptionInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("ka[!7e:4&");
      String string0 = columnEncryptionInformation_ColumnWithStructSubfield0.toString();
      assertEquals("ka[!7e:4&", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty("u=CFH1b:LWb");
      List<String> list0 = columnEncryptionInformation0.toTableProperty();
      ColumnEncryptionInformation columnEncryptionInformation1 = ColumnEncryptionInformation.fromTableProperty(list0);
      assertTrue(list0.contains("u=CFH1b:LWb"));
      assertTrue(columnEncryptionInformation1.equals((Object)columnEncryptionInformation0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("");
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield1 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf(".)Ods");
      boolean boolean0 = columnEncryptionInformation_ColumnWithStructSubfield0.equals(columnEncryptionInformation_ColumnWithStructSubfield1);
      assertEquals("", columnEncryptionInformation_ColumnWithStructSubfield1.getColumnName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("ka[!7e:4&");
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield1 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("$*9");
      boolean boolean0 = columnEncryptionInformation_ColumnWithStructSubfield0.equals(columnEncryptionInformation_ColumnWithStructSubfield1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("ka[!7e:4&");
      boolean boolean0 = columnEncryptionInformation_ColumnWithStructSubfield0.equals(columnEncryptionInformation_ColumnWithStructSubfield0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("a");
      boolean boolean0 = columnEncryptionInformation_ColumnWithStructSubfield0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("ka[!7e:4&");
      boolean boolean0 = columnEncryptionInformation_ColumnWithStructSubfield0.equals("ka[!7e:4&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot provide null column name for encryption columns
         //
         verifyException("com.facebook.presto.hive.ColumnEncryptionInformation$ColumnWithStructSubfield", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnEncryptionInformation.fromHiveProperty("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Encrypted column entry needs to be in the format 'key1:col1,col2'. Received: 
         //
         verifyException("com.facebook.presto.hive.ColumnEncryptionInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromTableProperty((Object) null);
      ColumnEncryptionInformation columnEncryptionInformation1 = ColumnEncryptionInformation.fromTableProperty((Object) null);
      boolean boolean0 = columnEncryptionInformation1.equals(columnEncryptionInformation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty((String) null);
      boolean boolean0 = columnEncryptionInformation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromTableProperty((Object) null);
      boolean boolean0 = columnEncryptionInformation0.equals(columnEncryptionInformation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty("%C[kt9o:");
      boolean boolean0 = columnEncryptionInformation0.equals("%C[kt9o:");
      assertTrue(columnEncryptionInformation0.hasEntries());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty((String) null);
      boolean boolean0 = columnEncryptionInformation0.hasEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty("%C[kt9o:");
      boolean boolean0 = columnEncryptionInformation0.hasEntries();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnEncryptionInformation.fromMap((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.ColumnEncryptionInformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty((String) null);
      columnEncryptionInformation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromTableProperty((Object) null);
      Map<ColumnEncryptionInformation.ColumnWithStructSubfield, String> map0 = columnEncryptionInformation0.getColumnToKeyReference();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("com.google.common.base.JdkPattern");
      columnEncryptionInformation_ColumnWithStructSubfield0.getSubfieldPath();
      assertEquals("com", columnEncryptionInformation_ColumnWithStructSubfield0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("");
      String string0 = columnEncryptionInformation_ColumnWithStructSubfield0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColumnEncryptionInformation.ColumnWithStructSubfield columnEncryptionInformation_ColumnWithStructSubfield0 = ColumnEncryptionInformation.ColumnWithStructSubfield.valueOf("a");
      Optional<ColumnEncryptionInformation.ColumnWithStructSubfield> optional0 = columnEncryptionInformation_ColumnWithStructSubfield0.getChildField();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnEncryptionInformation columnEncryptionInformation0 = ColumnEncryptionInformation.fromHiveProperty("%C[kt9o:");
      String string0 = columnEncryptionInformation0.toHiveProperty();
      assertEquals("%C[kt9o:", string0);
  }
}
