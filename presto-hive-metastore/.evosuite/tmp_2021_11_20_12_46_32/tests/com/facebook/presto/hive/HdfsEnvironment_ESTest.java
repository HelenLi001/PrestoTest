/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:48:23 GMT 2021
 */

package com.facebook.presto.hive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.HdfsConfiguration;
import com.facebook.presto.hive.HdfsContext;
import com.facebook.presto.hive.HdfsEnvironment;
import com.facebook.presto.hive.MetastoreClientConfig;
import com.facebook.presto.hive.authentication.GenericExceptionAction;
import com.facebook.presto.hive.authentication.HdfsAuthentication;
import com.facebook.presto.hive.filesystem.ExtendedFileSystem;
import com.facebook.presto.spi.security.ConnectorIdentity;
import com.facebook.presto.spi.security.SelectedRole;
import java.net.URI;
import java.security.Principal;
import java.util.Optional;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HdfsEnvironment_ESTest extends HdfsEnvironment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((Configuration) null).when(hdfsConfiguration0).getConfiguration(any(com.facebook.presto.hive.HdfsContext.class) , any(java.net.URI.class));
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isRequireHadoopNative();
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(hdfsAuthentication0).doAs(anyString() , nullable(com.facebook.presto.hive.authentication.GenericExceptionAction.class));
      HdfsEnvironment hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
      Optional<Principal> optional0 = Optional.empty();
      SelectedRole selectedRole0 = mock(SelectedRole.class, new ViolatedAssumptionAnswer());
      Optional<SelectedRole> optional1 = Optional.of(selectedRole0);
      ConnectorIdentity connectorIdentity0 = new ConnectorIdentity("config is null", optional0, optional1);
      HdfsContext hdfsContext0 = mock(HdfsContext.class, new ViolatedAssumptionAnswer());
      doReturn(connectorIdentity0).when(hdfsContext0).getIdentity();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((URI) null).when(path0).toUri();
      ExtendedFileSystem extendedFileSystem0 = hdfsEnvironment0.getFileSystem(hdfsContext0, path0);
      assertNull(extendedFileSystem0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isRequireHadoopNative();
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
      HdfsEnvironment hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
      HdfsContext hdfsContext0 = mock(HdfsContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hdfsEnvironment0.getConfiguration(hdfsContext0, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.HdfsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsEnvironment hdfsEnvironment0 = null;
      try {
        hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, (HdfsAuthentication) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hdfsAuthentication is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
          MetastoreClientConfig metastoreClientConfig0 = new MetastoreClientConfig();
          HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
          HdfsEnvironment hdfsEnvironment0 = null;
          try {
            hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // failed to load Hadoop native library
             //
             verifyException("com.facebook.presto.hadoop.HadoopNative", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((Configuration) null).when(hdfsConfiguration0).getConfiguration(any(com.facebook.presto.hive.HdfsContext.class) , any(java.net.URI.class));
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isRequireHadoopNative();
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
      HdfsEnvironment hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
      HdfsContext hdfsContext0 = mock(HdfsContext.class, new ViolatedAssumptionAnswer());
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((URI) null).when(path0).toUri();
      Configuration configuration0 = hdfsEnvironment0.getConfiguration(hdfsContext0, path0);
      assertNull(configuration0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isRequireHadoopNative();
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(hdfsAuthentication0).doAs(anyString() , nullable(com.facebook.presto.hive.authentication.GenericExceptionAction.class));
      HdfsEnvironment hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      ExtendedFileSystem extendedFileSystem0 = hdfsEnvironment0.getFileSystem("+(lT`ccj&rs", path0, (Configuration) null);
      assertNull(extendedFileSystem0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isRequireHadoopNative();
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(hdfsAuthentication0).doAs(anyString() , nullable(com.facebook.presto.hive.authentication.GenericExceptionAction.class));
      HdfsEnvironment hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
      GenericExceptionAction<Object, Exception> genericExceptionAction0 = (GenericExceptionAction<Object, Exception>) mock(GenericExceptionAction.class, new ViolatedAssumptionAnswer());
      Object object0 = hdfsEnvironment0.doAs("Can not create a Path from a null string", genericExceptionAction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isRequireHadoopNative();
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
      HdfsEnvironment hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      hdfsEnvironment0.doAs((String) null, runnable0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HdfsConfiguration hdfsConfiguration0 = mock(HdfsConfiguration.class, new ViolatedAssumptionAnswer());
      MetastoreClientConfig metastoreClientConfig0 = mock(MetastoreClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metastoreClientConfig0).isRequireHadoopNative();
      doReturn(false).when(metastoreClientConfig0).isVerifyChecksum();
      HdfsAuthentication hdfsAuthentication0 = mock(HdfsAuthentication.class, new ViolatedAssumptionAnswer());
      HdfsEnvironment hdfsEnvironment0 = new HdfsEnvironment(hdfsConfiguration0, metastoreClientConfig0, hdfsAuthentication0);
      HdfsContext hdfsContext0 = mock(HdfsContext.class, new ViolatedAssumptionAnswer());
      doReturn((ConnectorIdentity) null).when(hdfsContext0).getIdentity();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hdfsEnvironment0.getFileSystem(hdfsContext0, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.HdfsEnvironment", e);
      }
  }
}
