/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:43:26 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;
import com.facebook.presto.hive.metastore.HivePageSinkMetadata;
import com.facebook.presto.hive.metastore.HivePageSinkMetadataProvider;
import com.facebook.presto.hive.metastore.MetastoreContext;
import com.facebook.presto.hive.metastore.Table;
import com.facebook.presto.spi.SchemaTableName;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HivePageSinkMetadataProvider_ESTest extends HivePageSinkMetadataProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HivePageSinkMetadata hivePageSinkMetadata0 = mock(HivePageSinkMetadata.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(hivePageSinkMetadata0).getModifiedPartitions();
      doReturn((SchemaTableName) null).when(hivePageSinkMetadata0).getSchemaTableName();
      doReturn((Optional) null).when(hivePageSinkMetadata0).getTable();
      ExtendedHiveMetastore extendedHiveMetastore0 = mock(ExtendedHiveMetastore.class, new ViolatedAssumptionAnswer());
      HivePageSinkMetadataProvider hivePageSinkMetadataProvider0 = null;
      try {
        hivePageSinkMetadataProvider0 = new HivePageSinkMetadataProvider(hivePageSinkMetadata0, extendedHiveMetastore0, (MetastoreContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // metastoreContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HivePageSinkMetadata hivePageSinkMetadata0 = mock(HivePageSinkMetadata.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(hivePageSinkMetadata0).getModifiedPartitions();
      doReturn((SchemaTableName) null).when(hivePageSinkMetadata0).getSchemaTableName();
      doReturn((Optional) null).when(hivePageSinkMetadata0).getTable();
      ExtendedHiveMetastore extendedHiveMetastore0 = mock(ExtendedHiveMetastore.class, new ViolatedAssumptionAnswer());
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      HivePageSinkMetadataProvider hivePageSinkMetadataProvider0 = new HivePageSinkMetadataProvider(hivePageSinkMetadata0, extendedHiveMetastore0, metastoreContext0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        hivePageSinkMetadataProvider0.getPartition((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.HivePageSinkMetadataProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HivePageSinkMetadata hivePageSinkMetadata0 = mock(HivePageSinkMetadata.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(hivePageSinkMetadata0).getModifiedPartitions();
      doReturn((SchemaTableName) null).when(hivePageSinkMetadata0).getSchemaTableName();
      doReturn((Optional) null).when(hivePageSinkMetadata0).getTable();
      ExtendedHiveMetastore extendedHiveMetastore0 = mock(ExtendedHiveMetastore.class, new ViolatedAssumptionAnswer());
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      HivePageSinkMetadataProvider hivePageSinkMetadataProvider0 = new HivePageSinkMetadataProvider(hivePageSinkMetadata0, extendedHiveMetastore0, metastoreContext0);
      Optional<Table> optional0 = hivePageSinkMetadataProvider0.getTable();
      assertNull(optional0);
  }
}
