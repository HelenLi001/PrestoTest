/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:20:22 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.Column;
import com.facebook.presto.hive.metastore.Partition;
import com.facebook.presto.hive.metastore.Storage;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Partition_ESTest extends Partition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Partition.builder((Partition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.Partition$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Storage storage0 = mock(Storage.class, new ViolatedAssumptionAnswer());
      Partition partition0 = null;
      try {
        partition0 = new Partition("&N", "&N", (List<String>) null, storage0, (List<Column>) null, (Map<String, String>) null, (Optional<Long>) null, false, false, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // values is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setSealedPartition(false);
      assertSame(partition_Builder1, partition_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setParameters((Map<String, String>) null);
      assertSame(partition_Builder1, partition_Builder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setDatabaseName("3t7uUrp(xkDgTTu2");
      assertSame(partition_Builder1, partition_Builder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Storage.Builder storage_Builder0 = partition_Builder0.getStorageBuilder();
      assertNotNull(storage_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Consumer<Storage.Builder> consumer0 = (Consumer<Storage.Builder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Partition.Builder partition_Builder1 = partition_Builder0.withStorage(consumer0);
      assertSame(partition_Builder1, partition_Builder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setEligibleToIgnore(false);
      assertSame(partition_Builder0, partition_Builder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setColumns((List<Column>) null);
      assertSame(partition_Builder1, partition_Builder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      // Undeclared exception!
      try { 
        partition_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // storageFormat is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setTableName("i40.7eJV5Jf/aH(>");
      assertSame(partition_Builder0, partition_Builder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setCreateTime(1973);
      assertSame(partition_Builder1, partition_Builder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setPartitionVersion((-14L));
      assertSame(partition_Builder1, partition_Builder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Partition.Builder partition_Builder0 = Partition.builder();
      Partition.Builder partition_Builder1 = partition_Builder0.setValues((List<String>) null);
      assertSame(partition_Builder0, partition_Builder1);
  }
}
