/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:31:35 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.block.SortOrder;
import com.facebook.presto.hive.metastore.SortingColumn;
import org.apache.hadoop.hive.metastore.api.Order;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortingColumn_ESTest extends SortingColumn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SortingColumn sortingColumn0 = SortingColumn.sortingColumnFromString("e[^0%x:eGy2dMq^)d DESC");
      assertEquals("e[^0%x:eGy2dMq^)d", sortingColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SortingColumn sortingColumn0 = SortingColumn.sortingColumnFromString(" DESHC ASC");
      assertEquals("DESHC", sortingColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SortingColumn sortingColumn0 = SortingColumn.sortingColumnFromString("> AsC");
      assertEquals(">", sortingColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SortingColumn sortingColumn0 = SortingColumn.sortingColumnFromString("");
      String string0 = SortingColumn.sortingColumnToString(sortingColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.DESCENDING;
      SortingColumn sortingColumn0 = new SortingColumn("", sortingColumn_Order0);
      SortingColumn.Order sortingColumn_Order1 = sortingColumn0.getOrder();
      assertSame(sortingColumn_Order0, sortingColumn_Order1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SortingColumn sortingColumn0 = SortingColumn.sortingColumnFromString("");
      String string0 = sortingColumn0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Order order0 = mock(Order.class, new ViolatedAssumptionAnswer());
      doReturn("':0a8@%3?.gy@").when(order0).getCol();
      doReturn(1).when(order0).getOrder();
      SortingColumn sortingColumn0 = SortingColumn.fromMetastoreApiOrder(order0, " ASC");
      assertEquals(SortingColumn.Order.ASCENDING, sortingColumn0.getOrder());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SortingColumn.sortingColumnToString((SortingColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.SortingColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SortingColumn.sortingColumnFromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.SortingColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.ASCENDING;
      SortingColumn sortingColumn0 = null;
      try {
        sortingColumn0 = new SortingColumn((String) null, sortingColumn_Order0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnName is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.fromMetastoreApiOrder(0, "I1x:?^bxE");
      assertEquals(SortingColumn.Order.DESCENDING, sortingColumn_Order0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SortingColumn.Order.fromMetastoreApiOrder(53, "\"[U--08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table/partition metadata has invalid sorting order: \"[U--08
         //
         verifyException("com.facebook.presto.hive.metastore.SortingColumn$Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.valueOf("ASCENDING");
      SortingColumn sortingColumn0 = new SortingColumn("ASCENDING", sortingColumn_Order0);
      String string0 = sortingColumn0.getColumnName();
      assertEquals("ASCENDING", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.ASCENDING;
      SortingColumn sortingColumn0 = new SortingColumn("columnName", sortingColumn_Order0);
      SortingColumn.Order sortingColumn_Order1 = SortingColumn.Order.DESCENDING;
      SortingColumn sortingColumn1 = new SortingColumn("columnName", sortingColumn_Order1);
      boolean boolean0 = sortingColumn0.equals(sortingColumn1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.ASCENDING;
      SortingColumn sortingColumn0 = new SortingColumn("ASCENDING", sortingColumn_Order0);
      SortingColumn sortingColumn1 = new SortingColumn("axsyPE_|!DHa4", sortingColumn_Order0);
      boolean boolean0 = sortingColumn0.equals(sortingColumn1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.ASCENDING;
      SortingColumn sortingColumn0 = new SortingColumn("columnName", sortingColumn_Order0);
      SortingColumn sortingColumn1 = new SortingColumn("columnName", sortingColumn_Order0);
      boolean boolean0 = sortingColumn0.equals(sortingColumn1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SortingColumn sortingColumn0 = SortingColumn.sortingColumnFromString("l{/ZPge");
      boolean boolean0 = sortingColumn0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("l{/ZPge", sortingColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SortingColumn sortingColumn0 = SortingColumn.sortingColumnFromString("columnIName");
      boolean boolean0 = sortingColumn0.equals(sortingColumn0);
      assertEquals("columnIName", sortingColumn0.getColumnName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.valueOf("ASCENDING");
      SortingColumn sortingColumn0 = new SortingColumn("ASCENDING", sortingColumn_Order0);
      boolean boolean0 = sortingColumn0.equals(sortingColumn_Order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.DESCENDING;
      SortingColumn sortingColumn0 = new SortingColumn("cocumnName", sortingColumn_Order0);
      String string0 = SortingColumn.sortingColumnToString(sortingColumn0);
      assertEquals("cocumnName DESC", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Order order0 = mock(Order.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(order0).getCol();
      doReturn(0).when(order0).getOrder();
      // Undeclared exception!
      try { 
        SortingColumn.fromMetastoreApiOrder(order0, "5UN0{+,NMNS5-#c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnName is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.ASCENDING;
      SortingColumn sortingColumn0 = new SortingColumn("columnName", sortingColumn_Order0);
      String string0 = sortingColumn0.toString();
      assertEquals("SortingColumn{columnName=columnName, order=ASCENDING}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Order order0 = mock(Order.class, new ViolatedAssumptionAnswer());
      doReturn("cocumnName").when(order0).getCol();
      doReturn(1351).when(order0).getOrder();
      // Undeclared exception!
      try { 
        SortingColumn.fromMetastoreApiOrder(order0, "cocumnName");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table/partition metadata has invalid sorting order: cocumnName
         //
         verifyException("com.facebook.presto.hive.metastore.SortingColumn$Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.ASCENDING;
      SortingColumn sortingColumn0 = new SortingColumn("ASCENDING", sortingColumn_Order0);
      sortingColumn0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.valueOf("ASCENDING");
      SortingColumn sortingColumn0 = new SortingColumn("ASCENDING", sortingColumn_Order0);
      SortingColumn.Order sortingColumn_Order1 = sortingColumn0.getOrder();
      assertEquals(SortOrder.ASC_NULLS_FIRST, sortingColumn_Order1.getSortOrder());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.DESCENDING;
      SortOrder sortOrder0 = sortingColumn_Order0.getSortOrder();
      assertFalse(sortOrder0.isNullsFirst());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SortingColumn.Order sortingColumn_Order0 = SortingColumn.Order.ASCENDING;
      int int0 = sortingColumn_Order0.getHiveOrder();
      assertEquals(1, int0);
  }
}
