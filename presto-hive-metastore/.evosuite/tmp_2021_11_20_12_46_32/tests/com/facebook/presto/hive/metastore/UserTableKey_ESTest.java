/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:31:20 GMT 2021
 */

package com.facebook.presto.hive.metastore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.hive.metastore.UserTableKey;
import com.facebook.presto.spi.security.PrestoPrincipal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTableKey_ESTest extends UserTableKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserTableKey userTableKey0 = new UserTableKey((PrestoPrincipal) null, "index", "");
      String string0 = userTableKey0.getTable();
      assertEquals("", string0);
      assertEquals("index", userTableKey0.getDatabase());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserTableKey userTableKey0 = new UserTableKey((PrestoPrincipal) null, "", "");
      PrestoPrincipal prestoPrincipal0 = userTableKey0.getPrincipal();
      assertNull(prestoPrincipal0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserTableKey userTableKey0 = new UserTableKey((PrestoPrincipal) null, "", "");
      String string0 = userTableKey0.getDatabase();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserTableKey userTableKey0 = null;
      try {
        userTableKey0 = new UserTableKey((PrestoPrincipal) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // table is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserTableKey userTableKey0 = new UserTableKey((PrestoPrincipal) null, "index", "");
      UserTableKey userTableKey1 = new UserTableKey((PrestoPrincipal) null, "aT.jPDu", "");
      boolean boolean0 = userTableKey0.equals(userTableKey1);
      assertFalse(boolean0);
      assertEquals("", userTableKey1.getTable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      doReturn("com.facebook.presto.hive.metastore.UserTableKey").when(prestoPrincipal0).toString();
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, "com.facebook.presto.hive.metastore.UserTableKey", "com.facebook.presto.hive.metastore.UserTableKey");
      PrestoPrincipal prestoPrincipal1 = userTableKey0.getPrincipal();
      UserTableKey userTableKey1 = new UserTableKey(prestoPrincipal1, "com.facebook.presto.hive.metastore.UserTableKey", "UserTableKey{principal=com.facebook.presto.hive.metastore.UserTableKey, table=com.facebook.presto.hive.metastore.UserTableKey, database=com.facebook.presto.hive.metastore.UserTableKey}");
      boolean boolean0 = userTableKey0.equals(userTableKey1);
      assertFalse(boolean0);
      assertEquals("com.facebook.presto.hive.metastore.UserTableKey", userTableKey1.getDatabase());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, "com.facebook.presto.hive.metastore.UserTableKey", "com.facebook.presto.hive.metastore.UserTableKey");
      UserTableKey userTableKey1 = new UserTableKey((PrestoPrincipal) null, "com.facebook.presto.hive.metastore.UserTableKey", "com.facebook.presto.hive.metastore.UserTableKey");
      boolean boolean0 = userTableKey0.equals(userTableKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(prestoPrincipal0).toString();
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ";;J uFmy*{", ";;J uFmy*{");
      PrestoPrincipal prestoPrincipal1 = userTableKey0.getPrincipal();
      UserTableKey userTableKey1 = new UserTableKey(prestoPrincipal1, ";;J uFmy*{", ";;J uFmy*{");
      boolean boolean0 = userTableKey0.equals(userTableKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserTableKey userTableKey0 = new UserTableKey((PrestoPrincipal) null, "index", "");
      boolean boolean0 = userTableKey0.equals((Object) null);
      assertEquals("", userTableKey0.getTable());
      assertEquals("index", userTableKey0.getDatabase());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ";;J uFmy*{", ";;J uFmy*{");
      boolean boolean0 = userTableKey0.equals(userTableKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ";;J uFmy*{", ";;J uFmy*{");
      boolean boolean0 = userTableKey0.equals(";;J uFmy*{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ",!", ", ");
      boolean boolean0 = userTableKey0.matches(",!", ",!");
      assertFalse(boolean0);
      assertEquals(",!", userTableKey0.getDatabase());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ";;J uFmy*{", ";;J uFmy*{");
      boolean boolean0 = userTableKey0.matches(";;J uFmy*{", ";;J uFmy*{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ";;J uFmy*{", ";;J uFmy*{");
      boolean boolean0 = userTableKey0.matches("UserTableKey{principal=Mock for PrestoPrincipal, hashCode: 669533153, table=;;J uFmy*{, database=;;J uFmy*{}", ";;J uFmy*{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ";;J uFmy*{", ";;J uFmy*{");
      userTableKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ">&3IZTTZ]{IfQ_", ">&3IZTTZ]{IfQ_");
      String string0 = userTableKey0.getTable();
      assertEquals(">&3IZTTZ]{IfQ_", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      doReturn("com.facebook.presto.hive.metastore.UserTableKey").when(prestoPrincipal0).toString();
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, "com.facebook.presto.hive.metastore.UserTableKey", "com.facebook.presto.hive.metastore.UserTableKey");
      String string0 = userTableKey0.toString();
      assertEquals("UserTableKey{principal=com.facebook.presto.hive.metastore.UserTableKey, table=com.facebook.presto.hive.metastore.UserTableKey, database=com.facebook.presto.hive.metastore.UserTableKey}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      UserTableKey userTableKey0 = new UserTableKey(prestoPrincipal0, ">&3IZTTZ]{IfQ_", ">&3IZTTZ]{IfQ_");
      String string0 = userTableKey0.getDatabase();
      assertEquals(">&3IZTTZ]{IfQ_", string0);
  }
}
