/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 21:22:27 GMT 2021
 */

package com.facebook.presto.hive.metastore.thrift;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.predicate.Domain;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.hive.HiveType;
import com.facebook.presto.hive.PartitionMutator;
import com.facebook.presto.hive.metastore.Column;
import com.facebook.presto.hive.metastore.HivePrivilegeInfo;
import com.facebook.presto.hive.metastore.MetastoreContext;
import com.facebook.presto.hive.metastore.Partition;
import com.facebook.presto.hive.metastore.PartitionNameWithVersion;
import com.facebook.presto.hive.metastore.PartitionStatistics;
import com.facebook.presto.hive.metastore.PartitionWithStatistics;
import com.facebook.presto.hive.metastore.PrestoTableType;
import com.facebook.presto.hive.metastore.PrincipalPrivileges;
import com.facebook.presto.hive.metastore.Table;
import com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore;
import com.facebook.presto.hive.metastore.thrift.HiveMetastore;
import com.facebook.presto.spi.security.PrestoPrincipal;
import com.facebook.presto.spi.security.RoleGrant;
import com.facebook.presto.spi.statistics.ColumnStatisticType;
import com.google.common.collect.Range;
import io.airlift.units.Duration;
import it.unimi.dsi.fastutil.Hash;
import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenCustomHashMap;
import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import org.apache.hadoop.hive.metastore.api.Database;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BridgingHiveMetastore_ESTest extends BridgingHiveMetastore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(hiveMetastore0).listTablePrivileges(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString() , any(com.facebook.presto.spi.security.PrestoPrincipal.class));
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      Set<HivePrivilegeInfo> set0 = bridgingHiveMetastore0.listTablePrivileges(metastoreContext0, "com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", "DEMp1/=ah]d9;F7[", prestoPrincipal0);
      bridgingHiveMetastore0.grantTablePrivileges(metastoreContext0, "com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", "DEMp1/=ah]d9;F7[", prestoPrincipal0, set0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(hiveMetastore0).getAllDatabases(any(com.facebook.presto.hive.metastore.MetastoreContext.class));
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, (PartitionMutator) null);
      List<String> list0 = bridgingHiveMetastore0.getAllDatabases((MetastoreContext) null);
      bridgingHiveMetastore0.dropPartition((MetastoreContext) null, "serdeParameters", "", list0, false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.renameTable(metastoreContext0, "Mnm*m6E}]1sX", "Mnm*m6E}]1sX", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Renaming partition columns is not supported";
      stringArray0[1] = "Vs<6%oHO";
      stringArray0[2] = "VStHWHE";
      stringArray0[3] = "Renaming partition columns is not supported";
      stringArray0[4] = "Vs<6%oHO";
      stringArray0[5] = "";
      stringArray0[6] = "}_\"3kdkwM}BC";
      stringArray0[7] = "VStHWHE";
      stringArray0[8] = "Vs<6%oHO";
      Hash.Strategy<String> hash_Strategy0 = (Hash.Strategy<String>) mock(Hash.Strategy.class, new ViolatedAssumptionAnswer());
      Reference2ObjectOpenCustomHashMap<String, String> reference2ObjectOpenCustomHashMap0 = new Reference2ObjectOpenCustomHashMap<String, String>(stringArray0, stringArray0, hash_Strategy0);
      assertFalse(reference2ObjectOpenCustomHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenCustomHashMap0.size());
      assertEquals(9, stringArray0.length);
      assertNotNull(reference2ObjectOpenCustomHashMap0);
      
      Reference2ObjectOpenHashMap<String, String> reference2ObjectOpenHashMap0 = new Reference2ObjectOpenHashMap<String, String>((Reference2ObjectMap<String, String>) reference2ObjectOpenCustomHashMap0);
      assertFalse(reference2ObjectOpenCustomHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenCustomHashMap0.size());
      assertFalse(reference2ObjectOpenHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenHashMap0.size());
      assertEquals(9, stringArray0.length);
      assertNotNull(reference2ObjectOpenHashMap0);
      
      Database database0 = new Database("VStHWHE", "Renaming partition columns is not supported", "Vs<6%oHO", reference2ObjectOpenHashMap0);
      assertFalse(reference2ObjectOpenCustomHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenCustomHashMap0.size());
      assertFalse(reference2ObjectOpenHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenHashMap0.size());
      assertNull(database0.getOwnerType());
      assertTrue(database0.isSetDescription());
      assertFalse(database0.isSetOwnerName());
      assertNull(database0.getOwnerName());
      assertTrue(database0.isSetName());
      assertTrue(database0.isSetParameters());
      assertEquals("Vs<6%oHO", database0.getLocationUri());
      assertEquals("Renaming partition columns is not supported", database0.getDescription());
      assertEquals(9, database0.getParametersSize());
      assertTrue(database0.isSetLocationUri());
      assertFalse(database0.isSetCatalogName());
      assertEquals("VStHWHE", database0.getName());
      assertFalse(database0.isSetOwnerType());
      assertFalse(database0.isSetPrivileges());
      assertNull(database0.getCatalogName());
      assertEquals(9, stringArray0.length);
      assertNotNull(database0);
      
      Optional<Database> optional0 = Optional.ofNullable(database0);
      assertFalse(reference2ObjectOpenCustomHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenCustomHashMap0.size());
      assertFalse(reference2ObjectOpenHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenHashMap0.size());
      assertNull(database0.getOwnerType());
      assertTrue(database0.isSetDescription());
      assertFalse(database0.isSetOwnerName());
      assertNull(database0.getOwnerName());
      assertTrue(database0.isSetName());
      assertTrue(database0.isSetParameters());
      assertEquals("Vs<6%oHO", database0.getLocationUri());
      assertEquals("Renaming partition columns is not supported", database0.getDescription());
      assertEquals(9, database0.getParametersSize());
      assertTrue(database0.isSetLocationUri());
      assertFalse(database0.isSetCatalogName());
      assertEquals("VStHWHE", database0.getName());
      assertFalse(database0.isSetOwnerType());
      assertFalse(database0.isSetPrivileges());
      assertNull(database0.getCatalogName());
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
      
      Range<Database> range0 = Range.closed(database0, database0);
      assertFalse(reference2ObjectOpenCustomHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenCustomHashMap0.size());
      assertFalse(reference2ObjectOpenHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenHashMap0.size());
      assertNull(database0.getOwnerType());
      assertTrue(database0.isSetDescription());
      assertFalse(database0.isSetOwnerName());
      assertNull(database0.getOwnerName());
      assertTrue(database0.isSetName());
      assertTrue(database0.isSetParameters());
      assertEquals("Vs<6%oHO", database0.getLocationUri());
      assertEquals("Renaming partition columns is not supported", database0.getDescription());
      assertEquals(9, database0.getParametersSize());
      assertTrue(database0.isSetLocationUri());
      assertFalse(database0.isSetCatalogName());
      assertEquals("VStHWHE", database0.getName());
      assertFalse(database0.isSetOwnerType());
      assertFalse(database0.isSetPrivileges());
      assertNull(database0.getCatalogName());
      assertEquals(9, stringArray0.length);
      assertNotNull(range0);
      
      Optional<Database> optional1 = optional0.filter(range0);
      assertFalse(reference2ObjectOpenCustomHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenCustomHashMap0.size());
      assertFalse(reference2ObjectOpenHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenHashMap0.size());
      assertNull(database0.getOwnerType());
      assertTrue(database0.isSetDescription());
      assertFalse(database0.isSetOwnerName());
      assertNull(database0.getOwnerName());
      assertTrue(database0.isSetName());
      assertTrue(database0.isSetParameters());
      assertEquals("Vs<6%oHO", database0.getLocationUri());
      assertEquals("Renaming partition columns is not supported", database0.getDescription());
      assertEquals(9, database0.getParametersSize());
      assertTrue(database0.isSetLocationUri());
      assertFalse(database0.isSetCatalogName());
      assertEquals("VStHWHE", database0.getName());
      assertFalse(database0.isSetOwnerType());
      assertFalse(database0.isSetPrivileges());
      assertNull(database0.getCatalogName());
      assertEquals(9, stringArray0.length);
      assertNotNull(optional1);
      assertSame(optional1, optional0);
      assertSame(optional0, optional1);
      
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn(optional1, (Optional) null).when(hiveMetastore0).getDatabase(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertFalse(reference2ObjectOpenCustomHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenCustomHashMap0.size());
      assertFalse(reference2ObjectOpenHashMap0.isEmpty());
      assertEquals(9, reference2ObjectOpenHashMap0.size());
      assertNull(database0.getOwnerType());
      assertTrue(database0.isSetDescription());
      assertFalse(database0.isSetOwnerName());
      assertNull(database0.getOwnerName());
      assertTrue(database0.isSetName());
      assertTrue(database0.isSetParameters());
      assertEquals("Vs<6%oHO", database0.getLocationUri());
      assertEquals("Renaming partition columns is not supported", database0.getDescription());
      assertEquals(9, database0.getParametersSize());
      assertTrue(database0.isSetLocationUri());
      assertFalse(database0.isSetCatalogName());
      assertEquals("VStHWHE", database0.getName());
      assertFalse(database0.isSetOwnerType());
      assertFalse(database0.isSetPrivileges());
      assertNull(database0.getCatalogName());
      assertEquals(9, stringArray0.length);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = null;
      String string0 = "j'}@9.";
      String string1 = "Renaming partition columns is not supported";
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.renameDatabase((MetastoreContext) null, "Renaming partition columns is not supported", "j'}@9.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.dropTable(metastoreContext0, (String) null, "", false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.dropRole(metastoreContext0, "");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      PartitionWithStatistics partitionWithStatistics0 = mock(PartitionWithStatistics.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.alterPartition(metastoreContext0, "5A-^:v4h", "5A-^:v4h", partitionWithStatistics0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getAllTables(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString());
      doReturn((Optional) null).when(hiveMetastore0).getDatabase(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString());
      doReturn((Map) null).when(hiveMetastore0).getPartitionStatistics(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString() , anySet());
      doReturn((Set) null).when(hiveMetastore0).getSupportedColumnStatistics(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , any(com.facebook.presto.common.type.Type.class));
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      HiveMetastore hiveMetastore1 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(hiveMetastore1).getPartitionNamesByFilter(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString() , anyMap());
      PartitionMutator partitionMutator1 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore1 = new BridgingHiveMetastore(hiveMetastore1, partitionMutator1);
      assertFalse(bridgingHiveMetastore1.equals((Object)bridgingHiveMetastore0));
      assertNotNull(bridgingHiveMetastore1);
      
      List<String> list0 = bridgingHiveMetastore1.getPartitionNamesByFilter((MetastoreContext) null, "", "|M,A", (Map<Column, Domain>) null);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("|M,A"));
      assertFalse(bridgingHiveMetastore1.equals((Object)bridgingHiveMetastore0));
      assertNotNull(list0);
      assertNotSame(bridgingHiveMetastore1, bridgingHiveMetastore0);
      
      bridgingHiveMetastore0.dropPartition((MetastoreContext) null, "{Ueo9vz=r}~q", "{Ueo9vz=r}~q", list0, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(""));
      assertFalse(bridgingHiveMetastore0.equals((Object)bridgingHiveMetastore1));
      assertFalse(bridgingHiveMetastore1.equals((Object)bridgingHiveMetastore0));
      assertNotSame(bridgingHiveMetastore0, bridgingHiveMetastore1);
      assertNotSame(bridgingHiveMetastore1, bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      MetastoreContext metastoreContext1 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Optional<List<String>> optional0 = bridgingHiveMetastore0.getAllTables(metastoreContext1, "");
      assertFalse(bridgingHiveMetastore0.equals((Object)bridgingHiveMetastore1));
      assertNull(optional0);
      assertNotSame(bridgingHiveMetastore0, bridgingHiveMetastore1);
      
      MetastoreContext metastoreContext2 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Function<PartitionStatistics, PartitionStatistics> function0 = (Function<PartitionStatistics, PartitionStatistics>) mock(Function.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.updateTableStatistics(metastoreContext2, "partitionNames is null", "", function0);
      assertFalse(bridgingHiveMetastore0.equals((Object)bridgingHiveMetastore1));
      assertNotSame(bridgingHiveMetastore0, bridgingHiveMetastore1);
      
      Map<String, PartitionStatistics> map0 = bridgingHiveMetastore0.getPartitionStatistics(metastoreContext0, ";tC)Dz@K@gEf@T|at^", "gk;$9~J/AGtr{VG93q", (Set<String>) null);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(bridgingHiveMetastore0.equals((Object)bridgingHiveMetastore1));
      assertNotNull(map0);
      assertNotSame(bridgingHiveMetastore0, bridgingHiveMetastore1);
      
      MetastoreContext metastoreContext3 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.addPartitions(metastoreContext3, "gk;$9~J/AGtr{VG93q", "", (List<PartitionWithStatistics>) null);
      assertFalse(bridgingHiveMetastore0.equals((Object)bridgingHiveMetastore1));
      assertNotSame(bridgingHiveMetastore0, bridgingHiveMetastore1);
      
      Map<String, Optional<Partition>> map1 = bridgingHiveMetastore1.getPartitionsByNames((MetastoreContext) null, "%8z4,", "partitionNames is null", list0);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(""));
      assertFalse(bridgingHiveMetastore1.equals((Object)bridgingHiveMetastore0));
      assertNotNull(map1);
      assertNotSame(bridgingHiveMetastore1, bridgingHiveMetastore0);
      
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Set<ColumnStatisticType> set0 = bridgingHiveMetastore0.getSupportedColumnStatistics((MetastoreContext) null, type0);
      assertFalse(bridgingHiveMetastore0.equals((Object)bridgingHiveMetastore1));
      assertNull(set0);
      assertNotSame(bridgingHiveMetastore0, bridgingHiveMetastore1);
      
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.renameDatabase((MetastoreContext) null, (String) null, "Vl>{T2azICmR'/U@JR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // schemaName is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getPartitionNames(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Optional<List<String>> optional0 = bridgingHiveMetastore0.getPartitionNames(metastoreContext0, (String) null, "temporary tables must never be stored in the metastore");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Function<PartitionStatistics, PartitionStatistics> function0 = (Function<PartitionStatistics, PartitionStatistics>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.updatePartitionStatistics(metastoreContext0, "Renaming partition columns is not supported", "Renaming partition columns is not supported", "", function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.setPartitionLeases(metastoreContext0, "vzkY", "Rjk%Kz/XjXs~", (Map<String, String>) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.renameColumn(metastoreContext0, (String) null, "oaM", (String) null, "com.facebook.presto.spi.TableNotFoundException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // schemaName is null
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.getTable(metastoreContext0, "", "gKCFeZKKPTq7 8$#Ce");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.listTablePrivileges(metastoreContext0, "", "", prestoPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.listRoles(metastoreContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.listRoleGrants((MetastoreContext) null, prestoPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.getSupportedColumnStatistics(metastoreContext0, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.getPartitionNames(metastoreContext0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.getAllViews((MetastoreContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.getAllDatabases(metastoreContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.dropRole(metastoreContext0, "k];tej|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.dropColumn(metastoreContext0, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // schemaName is null
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoTableType) null).when(table0).getTableType();
      PrincipalPrivileges principalPrivileges0 = mock(PrincipalPrivileges.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.createTable(metastoreContext0, table0, principalPrivileges0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.createRole((MetastoreContext) null, "T1e3", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, partitionMutator0);
      assertNotNull(bridgingHiveMetastore0);
      
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      PartitionWithStatistics partitionWithStatistics0 = mock(PartitionWithStatistics.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.alterPartition(metastoreContext0, "", "KrTWk^*A&<QwGR\"i", partitionWithStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      doReturn((Set) null).when(hiveMetastore0).listTablePrivileges(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString() , any(com.facebook.presto.spi.security.PrestoPrincipal.class));
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      String string0 = " y";
      MetastoreContext metastoreContext1 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      Set<HivePrivilegeInfo> set0 = bridgingHiveMetastore0.listTablePrivileges(metastoreContext1, "", "", prestoPrincipal0);
      bridgingHiveMetastore0.revokeTablePrivileges(metastoreContext1, "", "<", prestoPrincipal0, set0);
      HiveType hiveType0 = mock(HiveType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.addColumn(metastoreContext0, "", " y", "Error [{}] parsing json text [{}].", (HiveType) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // schemaName is empty
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.addColumn(metastoreContext0, (String) null, "evictionCount", "partitionNames is null", (HiveType) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // schemaName is null
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.renameTable(metastoreContext0, "partitionNames is null", (String) null, "Hive metastore does not support renaming schemas", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // tableName is null
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, (PartitionMutator) null);
      PrestoTableType prestoTableType0 = PrestoTableType.EXTERNAL_TABLE;
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(table0).getDatabaseName();
      doReturn((String) null).when(table0).getOwner();
      doReturn((String) null).when(table0).getTableName();
      doReturn(prestoTableType0, (PrestoTableType) null, (PrestoTableType) null).when(table0).getTableType();
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.replaceTable((MetastoreContext) null, "<%4", "", table0, (PrincipalPrivileges) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid table type: null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(hiveMetastore0).getPartitionNamesWithVersionByFilter(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString() , anyMap());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      List<PartitionNameWithVersion> list0 = bridgingHiveMetastore0.getPartitionNamesWithVersionByFilter(metastoreContext0, "temporary tables must never be stored in the metastore", ")Q?~386bR?kO.#fC", (Map<Column, Domain>) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(hiveMetastore0).listRoles(any(com.facebook.presto.hive.metastore.MetastoreContext.class));
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Set<String> set0 = bridgingHiveMetastore0.listRoles(metastoreContext0);
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.grantRoles(metastoreContext0, set0, (Set<PrestoPrincipal>) null, false, prestoPrincipal0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.createRole(metastoreContext0, (String) null, "base_");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(hiveMetastore0).listRoles(any(com.facebook.presto.hive.metastore.MetastoreContext.class));
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Set<String> set0 = bridgingHiveMetastore0.listRoles(metastoreContext0);
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.revokeRoles(metastoreContext0, set0, (Set<PrestoPrincipal>) null, true, prestoPrincipal0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getDatabase(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.getDatabase(metastoreContext0, "q@*uh8A}'@lBQgM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getTable(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.dropColumn(metastoreContext0, ";IBg", "", "^6Lw:X_~q$dv(u]3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getPartitionNames(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Optional<List<String>> optional0 = bridgingHiveMetastore0.getPartitionNames(metastoreContext0, ",o", "");
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(hiveMetastore0).getAllViews(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Optional<List<String>> optional0 = bridgingHiveMetastore0.getAllViews(metastoreContext0, "temporary tables must never be stored in the metastore");
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.dropDatabase(metastoreContext0, (String) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.setPartitionLeases((MetastoreContext) null, "{(s2", (String) null, (Map<String, String>) null, duration0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      com.facebook.presto.hive.metastore.Database database0 = mock(com.facebook.presto.hive.metastore.Database.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(database0).getDatabaseName();
      doReturn((Optional) null).when(database0).getLocation();
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.createDatabase(metastoreContext0, database0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      Function<PartitionStatistics, PartitionStatistics> function0 = (Function<PartitionStatistics, PartitionStatistics>) mock(Function.class, new ViolatedAssumptionAnswer());
      bridgingHiveMetastore0.updatePartitionStatistics(metastoreContext0, "9wj@:8)2 [b", (String) null, "scale", function0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((PartitionStatistics) null).when(hiveMetastore0).getTableStatistics(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , anyString() , anyString());
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      PartitionStatistics partitionStatistics0 = bridgingHiveMetastore0.getTableStatistics(metastoreContext0, ",o", "");
      assertNull(partitionStatistics0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HiveMetastore hiveMetastore0 = mock(HiveMetastore.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(hiveMetastore0).listRoleGrants(any(com.facebook.presto.hive.metastore.MetastoreContext.class) , any(com.facebook.presto.spi.security.PrestoPrincipal.class));
      PartitionMutator partitionMutator0 = mock(PartitionMutator.class, new ViolatedAssumptionAnswer());
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore(hiveMetastore0, partitionMutator0);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      PrestoPrincipal prestoPrincipal0 = mock(PrestoPrincipal.class, new ViolatedAssumptionAnswer());
      Set<RoleGrant> set0 = bridgingHiveMetastore0.listRoleGrants(metastoreContext0, prestoPrincipal0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BridgingHiveMetastore bridgingHiveMetastore0 = new BridgingHiveMetastore((HiveMetastore) null, (PartitionMutator) null);
      MetastoreContext metastoreContext0 = mock(MetastoreContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bridgingHiveMetastore0.dropTable(metastoreContext0, "", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore", e);
      }
  }
}
