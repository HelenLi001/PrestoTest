/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:53:15 GMT 2021
 */

package com.facebook.presto.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.jdbc.LengthLimitedIterator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthLimitedIterator_ESTest extends LengthLimitedIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-2146016786));
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, true).when(iterator0).hasNext();
      doReturn(integer0).when(iterator0).next();
      LengthLimitedIterator<Integer> lengthLimitedIterator0 = new LengthLimitedIterator<Integer>(iterator0, 1069L);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      lengthLimitedIterator0.forEachRemaining(consumer1);
      lengthLimitedIterator0.forEachRemaining(consumer0);
      LengthLimitedIterator<Integer> lengthLimitedIterator1 = new LengthLimitedIterator<Integer>(lengthLimitedIterator0, 1069L);
      lengthLimitedIterator1.next();
      Iterator<String> iterator1 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      long long0 = 715L;
      LengthLimitedIterator<String> lengthLimitedIterator2 = new LengthLimitedIterator<String>(iterator1, 715L);
      // Undeclared exception!
      try { 
        lengthLimitedIterator2.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("java.util.Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      LengthLimitedIterator<String> lengthLimitedIterator0 = new LengthLimitedIterator<String>(iterator0, 2043L);
      lengthLimitedIterator0.hasNext();
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator1).hasNext();
      LengthLimitedIterator<Object> lengthLimitedIterator1 = new LengthLimitedIterator<Object>(iterator1, 2043L);
      // Undeclared exception!
      try { 
        lengthLimitedIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.LengthLimitedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(iterator0).next();
      LengthLimitedIterator<Object> lengthLimitedIterator0 = new LengthLimitedIterator<Object>(iterator0, 1205L);
      lengthLimitedIterator0.next();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      lengthLimitedIterator0.forEachRemaining(consumer1);
      lengthLimitedIterator0.forEachRemaining(consumer0);
      lengthLimitedIterator0.hasNext();
      LengthLimitedIterator<Object> lengthLimitedIterator1 = new LengthLimitedIterator<Object>(lengthLimitedIterator0, 1205L);
      // Undeclared exception!
      try { 
        lengthLimitedIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("java.util.Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      LengthLimitedIterator<String> lengthLimitedIterator0 = new LengthLimitedIterator<String>(iterator0, 496L);
      lengthLimitedIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      LengthLimitedIterator<Object> lengthLimitedIterator0 = new LengthLimitedIterator<Object>(iterator0, 0L);
      lengthLimitedIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      LengthLimitedIterator<Object> lengthLimitedIterator0 = null;
      try {
        lengthLimitedIterator0 = new LengthLimitedIterator<Object>(iterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit is negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      LengthLimitedIterator<Object> lengthLimitedIterator0 = new LengthLimitedIterator<Object>(iterator0, 347L);
      // Undeclared exception!
      try { 
        lengthLimitedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.LengthLimitedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 3475L;
      LengthLimitedIterator<Integer> lengthLimitedIterator0 = null;
      try {
        lengthLimitedIterator0 = new LengthLimitedIterator<Integer>((Iterator<Integer>) null, 3475L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      LengthLimitedIterator<Integer> lengthLimitedIterator0 = null;
      try {
        lengthLimitedIterator0 = new LengthLimitedIterator<Integer>((Iterator<Integer>) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(iterator0).next();
      LengthLimitedIterator<Integer> lengthLimitedIterator0 = new LengthLimitedIterator<Integer>(iterator0, 1338L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      lengthLimitedIterator0.forEachRemaining(consumer0);
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator1).hasNext();
      LengthLimitedIterator<Object> lengthLimitedIterator1 = new LengthLimitedIterator<Object>(iterator1, 1140L);
      // Undeclared exception!
      try { 
        lengthLimitedIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.LengthLimitedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LengthLimitedIterator<Object> lengthLimitedIterator0 = null;
      try {
        lengthLimitedIterator0 = new LengthLimitedIterator<Object>((Iterator<Object>) null, (-1441L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit is negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
