/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:44:29 GMT 2021
 */

package com.facebook.presto.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.jdbc.ObjectCasts;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectCasts_ESTest extends ObjectCasts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Short short0 = new Short((short) (-125));
      boolean boolean0 = ObjectCasts.castToBoolean(short0, (-672));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Float float0 = new Float(0.0F);
      short short0 = ObjectCasts.castToShort(float0, 2540);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-19));
      short short0 = ObjectCasts.castToShort(byte0, 1026);
      assertEquals((short) (-19), short0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = ObjectCasts.castToLong(bigInteger0, 49);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float((-1961.2F));
      long long0 = ObjectCasts.castToLong(float0, 0);
      assertEquals((-1961L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = ObjectCasts.castToInt(bigInteger0, (-2585));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = ObjectCasts.castToInt(bigInteger0, (byte)0);
      assertEquals((-8388608), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Float float0 = new Float((-1.0));
      float float1 = ObjectCasts.castToFloat(float0, 48);
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Short short0 = new Short((short) (-1037));
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(short0, 2561);
      double double0 = ObjectCasts.castToDouble(bigDecimal0, 0);
      assertEquals((-1037.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = new Float((-1114.44));
      byte byte0 = ObjectCasts.castToByte(float0, 0);
      assertEquals((byte) (-90), byte0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToTimestamp((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToTime((Object) null, 188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToShort((Object) null, (-3287));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToLong((Object) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToInt((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToFloat((Object) null, 2122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToDate((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToByte((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToBoolean((Object) null, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToBinary((Object) null, 2902);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        ObjectCasts.castToTimestamp(" =Fr9S'PJl", (short) (-19));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type -19
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Timestamp timestamp0 = ObjectCasts.castToTimestamp(localDateTime0, 0);
      assertEquals(320000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(272, 0, 285, 1957, 0);
      Timestamp timestamp0 = ObjectCasts.castToTimestamp(mockDate0, 272);
      assertEquals("2172-12-31 13:00:00.0", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Timestamp timestamp0 = Timestamp.valueOf(localDateTime0);
      Timestamp timestamp1 = ObjectCasts.castToTimestamp(timestamp0, (-99));
      assertSame(timestamp1, timestamp0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        ObjectCasts.castToTime("5qYh2Em>k", 3237);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 3237
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Time time0 = ObjectCasts.castToTime(localTime0, 2322);
      assertEquals("02:21:21", time0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      Date date0 = Date.valueOf(localDate0);
      Time time0 = ObjectCasts.castToTime(date0, 2924);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Time time0 = new Time(0L);
      Time time1 = ObjectCasts.castToTime(time0, (-2411));
      assertSame(time1, time0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        ObjectCasts.castToDate("com.facebook.presto.sql.parser.SqlBaseParser$LogicalBinaryContext", 880);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 880
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1988L, 0, zoneOffset0);
      Date date0 = ObjectCasts.castToDate(localDateTime0, 830);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Time time0 = new Time(0L);
      Date date0 = ObjectCasts.castToDate(time0, 2687);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = ObjectCasts.castToBinary("1", (-3287));
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        ObjectCasts.castToBinary(bigInteger0, 0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.math.BigInteger to SQL type 0
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      try { 
        ObjectCasts.castToBigDecimal("", (-2609));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type -2609
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(double0, (-3762));
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(float0, 0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(1957);
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(integer0, 345);
      assertEquals((short)1957, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Short short0 = new Short((short) (-224));
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(short0, (short) (-224));
      assertEquals((byte)32, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Byte byte0 = new Byte((byte)69);
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(byte0, 1333434301);
      assertEquals((short)69, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(bigInteger0, (-2585));
      BigDecimal bigDecimal1 = ObjectCasts.castToBigDecimal(bigDecimal0, 49);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Boolean boolean0 = XmlSuite.DEFAULT_SKIP_FAILED_INVOCATION_COUNTS;
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(boolean0, (-1135563397));
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      BigDecimal bigDecimal0 = ObjectCasts.castToBigDecimal(boolean0, 3027);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToDouble((Object) null, (-1692));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        ObjectCasts.castToDouble("com.facebook.presto.jdbc.ObjectCasts", 4186);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 4186
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      double double0 = ObjectCasts.castToDouble(boolean0, 589);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Boolean boolean0 = XmlSuite.DEFAULT_GROUP_BY_INSTANCES;
      double double0 = ObjectCasts.castToDouble(boolean0, 589);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      try { 
        ObjectCasts.castToFloat("WyARo7Ug} G", 0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 0
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Boolean boolean0 = XmlSuite.DEFAULT_SKIP_FAILED_INVOCATION_COUNTS;
      float float0 = ObjectCasts.castToFloat(boolean0, 3965);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Float float0 = new Float(503.8761952901);
      float float1 = ObjectCasts.castToFloat(float0, 0);
      assertEquals(503.8762F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        ObjectCasts.castToLong("],oS|0BmRm;UFH", 1811);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 1811
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = ObjectCasts.castToLong(bigInteger0, (-2585));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        ObjectCasts.castToInt("Found more than one object-factory tag in your suites", 100);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 100
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Float float0 = new Float(0.0);
      int int0 = ObjectCasts.castToInt(float0, 1811);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      try { 
        ObjectCasts.castToShort("3f1T4{%dae", 1189);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 1189
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      short short0 = ObjectCasts.castToShort(bigInteger0, 0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        ObjectCasts.castToByte("HTTP_1_1", 49);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 49
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = new Boolean("com.facebook.presto.jdbc.ObjectCasts");
      byte byte0 = ObjectCasts.castToByte(boolean0, (-1090));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      byte byte0 = ObjectCasts.castToByte(boolean0, 2979);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        ObjectCasts.castToBoolean(";", 48);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Cannot convert instance of java.lang.String to SQL type 48
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Double double0 = new Double(0.0);
      boolean boolean0 = ObjectCasts.castToBoolean(double0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("lLT+X)4Yp$ij");
      boolean boolean1 = ObjectCasts.castToBoolean(boolean0, 1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = ObjectCasts.castToBoolean(bigInteger0, (-29));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectCasts.castToBigDecimal((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ObjectCasts", e);
      }
  }
}
