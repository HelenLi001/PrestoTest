/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:42:16 GMT 2021
 */

package com.facebook.presto.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.QualifiedObjectName;
import com.facebook.presto.common.type.ArrayType;
import com.facebook.presto.common.type.BigintType;
import com.facebook.presto.common.type.BooleanType;
import com.facebook.presto.common.type.FunctionType;
import com.facebook.presto.common.type.JsonType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeSignature;
import com.facebook.presto.common.type.TypeSignatureParameter;
import com.facebook.presto.common.type.VarbinaryType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.jdbc.ColumnInfo;
import com.facebook.presto.metadata.CastType;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.LinkedListMultimap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColumnInfo_ESTest extends ColumnInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      VarcharType varcharType0 = VarcharType.VARCHAR;
      TypeSignature typeSignature0 = varcharType0.getTypeSignature();
      ColumnInfo.setTypeInfo(columnInfo_Builder0, typeSignature0);
      assertFalse(typeSignature0.isVarcharEnum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0);
      CastType castType0 = CastType.TRY_CAST;
      QualifiedObjectName qualifiedObjectName0 = castType0.getCastName();
      TypeSignature typeSignature0 = new TypeSignature(qualifiedObjectName0);
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.UNKNOWN;
      ColumnInfo columnInfo0 = new ColumnInfo(893, immutableList0, typeSignature0, columnInfo_Nullable0, false, false, 893, 2459, 148, "", "%s, %s %s %s", "18B;~>P&", "#LJJ?yE4jJz_^o+^JDH", "");
      boolean boolean0 = columnInfo0.isSigned();
      assertEquals(148, columnInfo0.getColumnDisplaySize());
      assertEquals(893, columnInfo0.getColumnType());
      assertEquals("%s, %s %s %s", columnInfo0.getColumnName());
      assertEquals(893, columnInfo0.getPrecision());
      assertFalse(columnInfo0.isCurrency());
      assertEquals(2459, columnInfo0.getScale());
      assertFalse(boolean0);
      assertEquals("#LJJ?yE4jJz_^o+^JDH", columnInfo0.getSchemaName());
      assertEquals("18B;~>P&", columnInfo0.getTableName());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("", columnInfo0.getColumnLabel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, false, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      boolean boolean0 = columnInfo0.isCurrency();
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertFalse(boolean0);
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("", columnInfo0.getCatalogName());
      assertTrue(columnInfo0.isSigned());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "", "", "", "");
      columnInfo0.getTableName();
      assertEquals((-2084), columnInfo0.getColumnType());
      assertTrue(columnInfo0.isSigned());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertTrue(columnInfo0.isCurrency());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2256), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 62299, 2677, 1958052177, "D,!", "QLlTx%)E495Jv", "", "^H", "");
      String string0 = columnInfo0.getSchemaName();
      assertEquals(2677, columnInfo0.getScale());
      assertEquals(62299, columnInfo0.getPrecision());
      assertTrue(columnInfo0.isCurrency());
      assertEquals(1958052177, columnInfo0.getColumnDisplaySize());
      assertEquals("D,!", columnInfo0.getColumnLabel());
      assertTrue(columnInfo0.isSigned());
      assertEquals("QLlTx%)E495Jv", columnInfo0.getColumnName());
      assertEquals((-2256), columnInfo0.getColumnType());
      assertEquals("^H", string0);
      assertEquals("", columnInfo0.getTableName());
      assertEquals("", columnInfo0.getCatalogName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeSignatureParameter[] typeSignatureParameterArray0 = new TypeSignatureParameter[1];
      TypeSignatureParameter typeSignatureParameter0 = TypeSignatureParameter.of("tim");
      typeSignatureParameterArray0[0] = typeSignatureParameter0;
      TypeSignature typeSignature0 = new TypeSignature("tim", typeSignatureParameterArray0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NO_NULLS;
      ColumnInfo columnInfo0 = new ColumnInfo(9, arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 9, 9, 1335, "tim(java.lang.String@0000000005)", "?+=W J", "8pFG!$?{yI/", "tim", "org.antlr.v4.runtime.Lexer");
      int int0 = columnInfo0.getScale();
      assertTrue(columnInfo0.isCurrency());
      assertEquals(9, columnInfo0.getPrecision());
      assertEquals("?+=W J", columnInfo0.getColumnName());
      assertEquals(9, int0);
      assertEquals(9, columnInfo0.getColumnType());
      assertEquals("8pFG!$?{yI/", columnInfo0.getTableName());
      assertTrue(columnInfo0.isSigned());
      assertEquals(1335, columnInfo0.getColumnDisplaySize());
      assertEquals("org.antlr.v4.runtime.Lexer", columnInfo0.getCatalogName());
      assertEquals("tim", columnInfo0.getSchemaName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      int int0 = columnInfo0.getPrecision();
      assertEquals(1958052158, int0);
      assertEquals("o", columnInfo0.getTableName());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("", columnInfo0.getCatalogName());
      assertTrue(columnInfo0.isSigned());
      assertEquals("", columnInfo0.getColumnLabel());
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ImmutableList<Integer> immutableList0 = ImmutableList.copyOf((Iterable<? extends Integer>) treeSet0);
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("i?w/!");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2424), immutableList0, typeSignature0, columnInfo_Nullable0, true, true, 5, 14, (-2424), "i?w/!", "i?w/!", "i?w/!", "Failed to submit a listener notification task. Event loop shut down?", "fdi%Y_QC5w.q6T(5*TR");
      columnInfo0.getColumnTypeSignature();
      assertEquals(14, columnInfo0.getScale());
      assertEquals("i?w/!", columnInfo0.getTableName());
      assertEquals((-2424), columnInfo0.getColumnType());
      assertEquals("fdi%Y_QC5w.q6T(5*TR", columnInfo0.getCatalogName());
      assertEquals(5, columnInfo0.getPrecision());
      assertEquals((-2424), columnInfo0.getColumnDisplaySize());
      assertEquals("i?w/!", columnInfo0.getColumnLabel());
      assertEquals("i?w/!", columnInfo0.getColumnName());
      assertEquals("Failed to submit a listener notification task. Event loop shut down?", columnInfo0.getSchemaName());
      assertTrue(columnInfo0.isCurrency());
      assertTrue(columnInfo0.isSigned());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0);
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      BigintType bigintType0 = BigintType.BIGINT;
      ImmutableList<Type> immutableList1 = ImmutableList.of((Type) varbinaryType0, (Type) varbinaryType0, (Type) bigintType0, (Type) bigintType0, (Type) bigintType0);
      FunctionType functionType0 = new FunctionType(immutableList1, varbinaryType0);
      TypeSignature typeSignature0 = functionType0.getTypeSignature();
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NO_NULLS;
      ColumnInfo columnInfo0 = new ColumnInfo(0, immutableList0, typeSignature0, columnInfo_Nullable0, true, true, 1083, 2497, 333358513, "U{LN_l=+-G_#~", "U{LN_l=+-G_#~", "", "", "");
      int int0 = columnInfo0.getColumnType();
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals(2497, columnInfo0.getScale());
      assertEquals(333358513, columnInfo0.getColumnDisplaySize());
      assertEquals("", columnInfo0.getTableName());
      assertEquals(1083, columnInfo0.getPrecision());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals(0, int0);
      assertTrue(columnInfo0.isSigned());
      assertEquals("U{LN_l=+-G_#~", columnInfo0.getColumnLabel());
      assertEquals("U{LN_l=+-G_#~", columnInfo0.getColumnName());
      assertTrue(columnInfo0.isCurrency());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo(795, arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, 795, 795, "", "o", "o", "", "");
      int int0 = columnInfo0.getColumnType();
      assertEquals("", columnInfo0.getCatalogName());
      assertTrue(columnInfo0.isSigned());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals(795, columnInfo0.getScale());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals(795, int0);
      assertEquals("", columnInfo0.getColumnLabel());
      assertTrue(columnInfo0.isCurrency());
      assertEquals(795, columnInfo0.getColumnDisplaySize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      ImmutableList<Integer> immutableList0 = ImmutableList.of(integer0, integer0, integer0);
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.UNKNOWN;
      ColumnInfo columnInfo0 = new ColumnInfo(0, immutableList0, typeSignature0, columnInfo_Nullable0, false, true, 41, 1255150, 11, "", "", "", "", "");
      columnInfo0.getColumnName();
      assertEquals(1255150, columnInfo0.getScale());
      assertTrue(columnInfo0.isSigned());
      assertEquals(11, columnInfo0.getColumnDisplaySize());
      assertEquals(41, columnInfo0.getPrecision());
      assertFalse(columnInfo0.isCurrency());
      assertEquals(0, columnInfo0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "1v]|T", "1v]|T", "1v]|T", "1v]|T", "1v]|T");
      columnInfo0.getColumnLabel();
      assertTrue(columnInfo0.isCurrency());
      assertTrue(columnInfo0.isSigned());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getScale());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlTest xmlTest0 = new XmlTest();
      List<Integer> list0 = xmlTest0.getInvocationNumbers("time");
      JsonType jsonType0 = JsonType.JSON;
      ImmutableList<Type> immutableList0 = ImmutableList.of((Type) jsonType0, (Type) jsonType0, (Type) jsonType0, (Type) jsonType0, (Type) jsonType0);
      BigintType bigintType0 = BigintType.BIGINT;
      FunctionType functionType0 = new FunctionType(immutableList0, bigintType0);
      TypeSignature typeSignature0 = functionType0.getTypeSignature();
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.UNKNOWN;
      ColumnInfo columnInfo0 = new ColumnInfo((-4822), list0, typeSignature0, columnInfo_Nullable0, true, true, Integer.MAX_VALUE, (-782), Integer.MAX_VALUE, "time", "key ", "", "f\"*X,lw!W", "f\"*X,lw!W");
      int int0 = columnInfo0.getColumnDisplaySize();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("f\"*X,lw!W", columnInfo0.getSchemaName());
      assertTrue(columnInfo0.isSigned());
      assertEquals("f\"*X,lw!W", columnInfo0.getCatalogName());
      assertEquals(Integer.MAX_VALUE, columnInfo0.getPrecision());
      assertEquals("", columnInfo0.getTableName());
      assertEquals((-782), columnInfo0.getScale());
      assertTrue(columnInfo0.isCurrency());
      assertEquals("key ", columnInfo0.getColumnName());
      assertEquals((-4822), columnInfo0.getColumnType());
      assertEquals("time", columnInfo0.getColumnLabel());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "1v]|T", "1v]|T", "1v]|T", "1v]|T", "1v]|T");
      columnInfo0.getCatalogName();
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertTrue(columnInfo0.isSigned());
      assertEquals((-2084), columnInfo0.getScale());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      // Undeclared exception!
      try { 
        ColumnInfo.setTypeInfo(columnInfo_Builder0, (TypeSignature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.ColumnInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NO_NULLS;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ColumnInfo columnInfo0 = null;
      try {
        columnInfo0 = new ColumnInfo(0, linkedList0, (TypeSignature) null, columnInfo_Nullable0, false, false, 991, (-2890), 3560141, (String) null, "", "com.fasterxml.jackson.core.JsonParser", "!ge.&F8yoQM1k", "com.fasterxml.jackson.core.JsonParser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnTypeName is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      arrayList0.add((Integer) null);
      ColumnInfo columnInfo0 = null;
      try {
        columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      LinkedListMultimap<ColumnInfo.Nullable, Integer> linkedListMultimap0 = LinkedListMultimap.create();
      List<Integer> list0 = linkedListMultimap0.values();
      ImmutableList<Integer> immutableList0 = ImmutableList.copyOf((Iterable<? extends Integer>) list0);
      columnInfo_Builder0.setColumnParameterTypes(immutableList0);
      assertEquals(0, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setColumnType((-2084));
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setColumnDisplaySize((-2084));
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      ArrayType arrayType0 = new ArrayType(booleanType0);
      TypeSignature typeSignature0 = arrayType0.getTypeSignature();
      ColumnInfo.setTypeInfo(columnInfo_Builder0, typeSignature0);
      assertFalse(typeSignature0.isBigintEnum());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      TypeSignature typeSignature0 = VarcharType.getParametrizedVarcharSignature("columnName is null");
      // Undeclared exception!
      try { 
        ColumnInfo.setTypeInfo(columnInfo_Builder0, typeSignature0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ParameterKind is [VARIABLE] but expected [LONG]
         //
         verifyException("com.facebook.presto.common.type.TypeSignatureParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("varbinary", set0);
      ColumnInfo.setTypeInfo(columnInfo_Builder0, typeSignature0);
      assertFalse(typeSignature0.isCalculated());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      TypeSignatureParameter[] typeSignatureParameterArray0 = new TypeSignatureParameter[1];
      TypeSignatureParameter typeSignatureParameter0 = TypeSignatureParameter.of("time");
      typeSignatureParameterArray0[0] = typeSignatureParameter0;
      TypeSignature typeSignature0 = new TypeSignature("time", typeSignatureParameterArray0);
      ColumnInfo.setTypeInfo(columnInfo_Builder0, typeSignature0);
      assertFalse(typeSignature0.isBigintEnum());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, false, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      String string0 = columnInfo0.getTableName();
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertFalse(columnInfo0.isSigned());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("o", string0);
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertTrue(columnInfo0.isCurrency());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, false, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      columnInfo0.getNullable();
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals("", columnInfo0.getCatalogName());
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertFalse(columnInfo0.isSigned());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals((-2084), columnInfo0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, (-2084), (-2084), (-2084), "", "o", "o", "", "");
      int int0 = columnInfo0.getPrecision();
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals((-2084), int0);
      assertEquals((-2084), columnInfo0.getColumnType());
      assertTrue(columnInfo0.isSigned());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals("", columnInfo0.getCatalogName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, (-2084), (-2084), (-2084), "", "o", "o", "", "");
      int int0 = columnInfo0.getScale();
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("o", columnInfo0.getTableName());
      assertTrue(columnInfo0.isSigned());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals((-2084), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      String string0 = columnInfo0.getColumnName();
      assertTrue(columnInfo0.isSigned());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("o", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, false, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      int int0 = columnInfo0.getColumnDisplaySize();
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals((-2084), int0);
      assertTrue(columnInfo0.isCurrency());
      assertFalse(columnInfo0.isSigned());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("o", columnInfo0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      columnInfo0.getColumnTypeSignature();
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals("o", columnInfo0.getColumnName());
      assertTrue(columnInfo0.isSigned());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("o", columnInfo0.getTableName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      columnInfo0.getColumnParameterTypes();
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertTrue(columnInfo0.isCurrency());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("o", columnInfo0.getTableName());
      assertTrue(columnInfo0.isSigned());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      int int0 = columnInfo0.getColumnType();
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertTrue(columnInfo0.isCurrency());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals((-2084), int0);
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("", columnInfo0.getSchemaName());
      assertTrue(columnInfo0.isSigned());
      assertEquals("o", columnInfo0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      columnInfo0.getColumnTypeName();
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertTrue(columnInfo0.isSigned());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertTrue(columnInfo0.isCurrency());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals("o", columnInfo0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      boolean boolean0 = columnInfo0.isSigned();
      assertTrue(columnInfo0.isCurrency());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("", columnInfo0.getSchemaName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, false, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      String string0 = columnInfo0.getCatalogName();
      assertTrue(columnInfo0.isCurrency());
      assertFalse(columnInfo0.isSigned());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", string0);
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("o", columnInfo0.getTableName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      boolean boolean0 = columnInfo0.isCurrency();
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals("o", columnInfo0.getTableName());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("", columnInfo0.getColumnLabel());
      assertTrue(columnInfo0.isSigned());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertTrue(boolean0);
      assertEquals("", columnInfo0.getSchemaName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      String string0 = columnInfo0.getSchemaName();
      assertEquals("o", columnInfo0.getTableName());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getCatalogName());
      assertTrue(columnInfo0.isSigned());
      assertEquals("", string0);
      assertTrue(columnInfo0.isCurrency());
      assertEquals("", columnInfo0.getColumnLabel());
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo columnInfo0 = new ColumnInfo((-2084), arrayList0, typeSignature0, columnInfo_Nullable0, true, true, 1958052158, (-2084), (-2084), "", "o", "o", "", "");
      String string0 = columnInfo0.getColumnLabel();
      assertEquals((-2084), columnInfo0.getScale());
      assertEquals("o", columnInfo0.getTableName());
      assertTrue(columnInfo0.isSigned());
      assertEquals(1958052158, columnInfo0.getPrecision());
      assertEquals((-2084), columnInfo0.getColumnType());
      assertEquals("", columnInfo0.getSchemaName());
      assertEquals("o", columnInfo0.getColumnName());
      assertEquals("", columnInfo0.getCatalogName());
      assertEquals("", string0);
      assertEquals((-2084), columnInfo0.getColumnDisplaySize());
      assertTrue(columnInfo0.isCurrency());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setCatalogName("com.google.common.collect.ForwardingMap");
      assertSame(columnInfo_Builder0, columnInfo_Builder1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setColumnLabel("!ge.&F8yoQM1k");
      assertSame(columnInfo_Builder0, columnInfo_Builder1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setPrecision((-2084));
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("interval year to month");
      ColumnInfo.setTypeInfo(columnInfo_Builder0, typeSignature0);
      assertFalse(typeSignature0.isBigintEnum());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColumnInfo.Nullable columnInfo_Nullable0 = ColumnInfo.Nullable.NULLABLE;
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setNullable(columnInfo_Nullable0);
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TypeSignature typeSignature0 = TypeSignature.parseTypeSignature("1v]|T");
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setColumnTypeSignature(typeSignature0);
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setCurrency(true);
      assertSame(columnInfo_Builder0, columnInfo_Builder1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setColumnName("");
      assertSame(columnInfo_Builder0, columnInfo_Builder1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setScale(2222);
      assertSame(columnInfo_Builder0, columnInfo_Builder1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setSigned(true);
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setSchemaName("1v]|T");
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      ColumnInfo.Builder columnInfo_Builder1 = columnInfo_Builder0.setTableName((String) null);
      assertSame(columnInfo_Builder1, columnInfo_Builder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ColumnInfo.Builder columnInfo_Builder0 = new ColumnInfo.Builder();
      // Undeclared exception!
      try { 
        columnInfo_Builder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnParameterTypes is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
