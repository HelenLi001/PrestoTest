/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:47:06 GMT 2021
 */

package com.facebook.presto.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.client.FailureInfo;
import com.facebook.presto.client.QueryError;
import com.facebook.presto.client.QueryStatusInfo;
import com.facebook.presto.client.StatementClient;
import com.facebook.presto.common.type.TimeZoneKey;
import com.facebook.presto.jdbc.PrestoResultSet;
import com.facebook.presto.jdbc.QueryStats;
import com.facebook.presto.jdbc.WarningsManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrestoResultSet_ESTest extends PrestoResultSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailureInfo failureInfo0 = mock(FailureInfo.class, new ViolatedAssumptionAnswer());
      QueryError queryError0 = mock(QueryError.class, new ViolatedAssumptionAnswer());
      doReturn(failureInfo0, (FailureInfo) null).when(queryError0).getFailureInfo();
      doReturn("progressCallback is null").when(queryError0).getMessage();
      QueryStatusInfo queryStatusInfo0 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn(queryError0).when(queryStatusInfo0).getError();
      doReturn("N").when(queryStatusInfo0).getId();
      // Undeclared exception!
      try { 
        PrestoResultSet.resultsException(queryStatusInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      TimeZoneKey timeZoneKey0 = mock(TimeZoneKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeZoneKey0).getId();
      QueryStatusInfo queryStatusInfo0 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(queryStatusInfo0).getId();
      StatementClient statementClient0 = mock(StatementClient.class, new ViolatedAssumptionAnswer());
      doReturn(queryStatusInfo0).when(statementClient0).currentStatusInfo();
      doReturn(timeZoneKey0).when(statementClient0).getTimeZone();
      doReturn(false).when(statementClient0).isFinished();
      doReturn(false).when(statementClient0).isRunning();
      WarningsManager warningsManager0 = mock(WarningsManager.class, new ViolatedAssumptionAnswer());
      Consumer<QueryStats> consumer0 = (Consumer<QueryStats>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      PrestoResultSet prestoResultSet0 = null;
      try {
        prestoResultSet0 = new PrestoResultSet(statement0, statementClient0, 2131L, consumer0, warningsManager0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Verify", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      TimeZoneKey timeZoneKey0 = mock(TimeZoneKey.class, new ViolatedAssumptionAnswer());
      doReturn("No valid ISO8601 format for fields: ").when(timeZoneKey0).getId();
      StatementClient statementClient0 = mock(StatementClient.class, new ViolatedAssumptionAnswer());
      doReturn(timeZoneKey0).when(statementClient0).getTimeZone();
      Consumer<QueryStats> consumer0 = (Consumer<QueryStats>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      WarningsManager warningsManager0 = mock(WarningsManager.class, new ViolatedAssumptionAnswer());
      PrestoResultSet prestoResultSet0 = null;
      try {
        prestoResultSet0 = new PrestoResultSet(statement0, statementClient0, 3815L, consumer0, warningsManager0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'No valid ISO8601 format for fields: ' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QueryError queryError0 = mock(QueryError.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(queryError0).getErrorCode();
      doReturn((FailureInfo) null).when(queryError0).getFailureInfo();
      doReturn((String) null).when(queryError0).getMessage();
      doReturn((String) null).when(queryError0).getSqlState();
      QueryStatusInfo queryStatusInfo0 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn(queryError0).when(queryStatusInfo0).getError();
      doReturn((String) null).when(queryStatusInfo0).getId();
      SQLException sQLException0 = PrestoResultSet.resultsException(queryStatusInfo0);
      assertEquals("java.sql.SQLException: Query failed (#null): null", sQLException0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FailureInfo failureInfo0 = mock(FailureInfo.class, new ViolatedAssumptionAnswer());
      QueryError queryError0 = mock(QueryError.class, new ViolatedAssumptionAnswer());
      doReturn(failureInfo0, (FailureInfo) null).when(queryError0).getFailureInfo();
      doReturn("").when(queryError0).getMessage();
      QueryStatusInfo queryStatusInfo0 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn(queryError0).when(queryStatusInfo0).getError();
      doReturn((String) null).when(queryStatusInfo0).getId();
      // Undeclared exception!
      try { 
        PrestoResultSet.resultsException(queryStatusInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = mock(TimeZoneKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeZoneKey0).getId();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      QueryStatusInfo queryStatusInfo0 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(queryStatusInfo0).getId();
      QueryError queryError0 = mock(QueryError.class, new ViolatedAssumptionAnswer());
      QueryStatusInfo queryStatusInfo1 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn(queryError0, (QueryError) null).when(queryStatusInfo1).getError();
      StatementClient statementClient0 = mock(StatementClient.class, new ViolatedAssumptionAnswer());
      doReturn(queryStatusInfo0).when(statementClient0).currentStatusInfo();
      doReturn(queryStatusInfo1).when(statementClient0).finalStatusInfo();
      doReturn(timeZoneKey0).when(statementClient0).getTimeZone();
      doReturn(true).when(statementClient0).isFinished();
      doReturn(false).when(statementClient0).isRunning();
      Consumer<QueryStats> consumer0 = (Consumer<QueryStats>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      WarningsManager warningsManager0 = mock(WarningsManager.class, new ViolatedAssumptionAnswer());
      PrestoResultSet prestoResultSet0 = null;
      try {
        prestoResultSet0 = new PrestoResultSet(statement0, statementClient0, 2139L, consumer0, warningsManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = mock(TimeZoneKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeZoneKey0).getId();
      WarningsManager warningsManager0 = mock(WarningsManager.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      QueryStatusInfo queryStatusInfo0 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn("^s]F-qLftAyyvuy").when(queryStatusInfo0).getId();
      StatementClient statementClient0 = mock(StatementClient.class, new ViolatedAssumptionAnswer());
      doReturn(queryStatusInfo0, (QueryStatusInfo) null).when(statementClient0).currentStatusInfo();
      doReturn(timeZoneKey0).when(statementClient0).getTimeZone();
      doReturn(true).when(statementClient0).isRunning();
      Consumer<QueryStats> consumer0 = (Consumer<QueryStats>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      PrestoResultSet prestoResultSet0 = null;
      try {
        prestoResultSet0 = new PrestoResultSet(statement0, statementClient0, 4294967295L, consumer0, warningsManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoResultSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeZoneKey timeZoneKey0 = mock(TimeZoneKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeZoneKey0).getId();
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      QueryStatusInfo queryStatusInfo0 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(queryStatusInfo0).getId();
      QueryStatusInfo queryStatusInfo1 = mock(QueryStatusInfo.class, new ViolatedAssumptionAnswer());
      doReturn((QueryError) null).when(queryStatusInfo1).getError();
      doReturn((String) null).when(queryStatusInfo1).getId();
      StatementClient statementClient0 = mock(StatementClient.class, new ViolatedAssumptionAnswer());
      doReturn(queryStatusInfo0).when(statementClient0).currentStatusInfo();
      doReturn(queryStatusInfo1).when(statementClient0).finalStatusInfo();
      doReturn(timeZoneKey0).when(statementClient0).getTimeZone();
      doReturn(true).when(statementClient0).isFinished();
      doReturn(false).when(statementClient0).isRunning();
      Consumer<QueryStats> consumer0 = (Consumer<QueryStats>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      WarningsManager warningsManager0 = mock(WarningsManager.class, new ViolatedAssumptionAnswer());
      PrestoResultSet prestoResultSet0 = null;
      try {
        prestoResultSet0 = new PrestoResultSet(statement0, statementClient0, 0L, consumer0, warningsManager0);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // Query has no columns (#null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoResultSet", e);
      }
  }
}
