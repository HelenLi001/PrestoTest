/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 18:48:07 GMT 2021
 */

package com.facebook.presto.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.jdbc.PrestoConnection;
import com.facebook.presto.jdbc.PrestoStatement;
import com.facebook.presto.jdbc.QueryStats;
import com.facebook.presto.spi.security.SelectedRole;
import com.mysql.jdbc.UpdatableResultSet;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrestoStatement_ESTest extends PrestoStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setFetchDirection(1008);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid fetch direction
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getMoreResults(4216);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid argument: 4216
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setFetchSize(0);
      assertEquals(2, prestoStatement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setQueryTimeout(0);
      assertFalse(prestoStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setMaxFieldSize(2266);
      assertEquals(2, prestoStatement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      PrestoConnection prestoConnection1 = prestoStatement0.connection();
      assertSame(prestoConnection1, prestoConnection0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.checkOpen();
      assertEquals(2, prestoStatement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      Class<Object> class0 = Object.class;
      boolean boolean0 = prestoStatement0.isWrapperFor(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(prestoConnection0).isClosed();
      doReturn((String) null, (String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.closeOnCompletion();
      boolean boolean0 = prestoStatement0.isCloseOnCompletion();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(prestoConnection0).isClosed();
      doReturn("", "TIMESTAMP '").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setQueryTimeout(1825);
      int int0 = prestoStatement0.getQueryTimeout();
      assertEquals(1825, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(prestoConnection0).isClosed();
      doReturn((String) null, (String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setMaxRows(1000);
      int int0 = prestoStatement0.getMaxRows();
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(prestoConnection0).isClosed();
      doReturn((String) null, (String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setMaxRows(60000);
      long long0 = prestoStatement0.getLargeMaxRows();
      assertEquals(60000L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(prestoConnection0).isClosed();
      doReturn((String) null, (String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setFetchSize(1487);
      int int0 = prestoStatement0.getFetchSize();
      assertEquals(1487, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.unwrap((Class<SelectedRole>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.setProgressMonitor((Consumer<QueryStats>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // progressMonitor is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setPoolable(false);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setMaxRows((-1));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Max rows must be positive
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.close();
      try { 
        prestoStatement0.setEscapeProcessing(false);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Statement is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setCursorName("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(prestoConnection0).isClosed();
      doReturn("", "", (String) null, "").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.closeOnCompletion();
      prestoStatement0.getWarnings();
      prestoStatement0.getFetchDirection();
      prestoStatement0.setPoolable(true);
      try { 
        prestoStatement0.partialCancel();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.isPoolable();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.isCloseOnCompletion();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getUpdateType();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.close();
      try { 
        prestoStatement0.getUpdateCount();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Statement is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getResultSetType();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getResultSetConcurrency();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getResultSet();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getQueryTimeout();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getMoreResults();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.close();
      try { 
        prestoStatement0.getMaxRows();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Statement is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.close();
      try { 
        prestoStatement0.getMaxFieldSize();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Statement is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(prestoConnection0).isClosed();
      doReturn("jYq'3:", "-^bLquccwF/").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.getQueryTimeout();
      prestoStatement0.partialCancel();
      try { 
        prestoStatement0.getLargeUpdateCount();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getLargeMaxRows();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getFetchSize();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getFetchDirection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(prestoConnection0).isClosed();
      doReturn("1g").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setMaxRows(1000);
      try { 
        prestoStatement0.getConnection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      String[] stringArray0 = new String[0];
      try { 
        prestoStatement0.executeUpdate("", stringArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.executeUpdate((String) null, 119);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(prestoConnection0).isClosed();
      doReturn("mWN;@(fT+=b@{$Q)i", "", "").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.isCloseOnCompletion();
      prestoStatement0.getResultSetType();
      prestoStatement0.setQueryTimeout(223);
      try { 
        prestoStatement0.executeUpdate("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.executeQuery("uEq()Qw");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.executeQuery("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      String[] stringArray0 = new String[3];
      try { 
        prestoStatement0.executeLargeUpdate("nWze)%.@n!D,v=.)", stringArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int[] intArray0 = new int[9];
      try { 
        prestoStatement0.executeLargeUpdate("xY4qI$tK[ZRA", intArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.executeLargeUpdate((String) null, 0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.executeLargeUpdate("connection is null");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.executeLargeUpdate("1e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.close();
      try { 
        prestoStatement0.executeBatch();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Statement is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(prestoConnection0).isClosed();
      doReturn("").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setPoolable(false);
      try { 
        prestoStatement0.execute("Literal must not be null", (String[]) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int[] intArray0 = new int[0];
      try { 
        prestoStatement0.execute("Batches not supported", intArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(prestoConnection0).isClosed();
      doReturn("Fetch size must be positive", "Fetch size must be positive").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.getMaxRows();
      prestoStatement0.getMaxRows();
      try { 
        prestoStatement0.execute("", (-1578));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(prestoConnection0).isClosed();
      doReturn("Max rows exceeds limit of 2147483647").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.getMoreResults();
      try { 
        prestoStatement0.execute("5");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.execute("getGeneratedKeys");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.connection();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.closeOnCompletion();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(prestoConnection0).isClosed();
      doReturn("7i", "Connection is closed").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.isCloseOnCompletion();
      prestoStatement0.getMaxFieldSize();
      try { 
        prestoStatement0.clearWarnings();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.clearBatch();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.checkOpen();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.cancel();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(prestoConnection0).isClosed();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.addBatch("}ky_)6O0XFy{r,WX");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PrestoStatement prestoStatement0 = null;
      try {
        prestoStatement0 = new PrestoStatement((PrestoConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connection is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("$wVl").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      boolean boolean0 = prestoStatement0.getMoreResults(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("s^u\",pA").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setLargeMaxRows(0);
      assertFalse(prestoStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      Class<UpdatableResultSet> class0 = UpdatableResultSet.class;
      boolean boolean0 = prestoStatement0.isWrapperFor(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.executeUpdate("ggDJJ:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      long long0 = prestoStatement0.getLargeMaxRows();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      long long0 = prestoStatement0.getLargeUpdateCount();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(prestoConnection0).isClosed();
      doReturn("okhttp3.Response$Builder", "okhttp3.Response$Builder").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int[] intArray0 = new int[8];
      prestoStatement0.setMaxRows(123);
      prestoStatement0.setQueryTimeout(1003);
      try { 
        prestoStatement0.executeUpdate((String) null, intArray0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Connection is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      Class<Object> class0 = Object.class;
      Object object0 = prestoStatement0.unwrap(class0);
      assertSame(prestoStatement0, object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      boolean boolean0 = prestoStatement0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getMoreResults(3);
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // Multiple open results not supported
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getMoreResults(0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid argument: 0
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("Max rows must be positive").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setFetchSize((-116));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Fetch size must be positive
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setFetchDirection(0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid fetch direction
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setFetchDirection(1000);
      assertFalse(prestoStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(prestoConnection0).isClosed();
      doReturn((String) null, (String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.internalExecute("presto-jdbc");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Error executing query
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.cancel();
      assertFalse(prestoStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setQueryTimeout((-2995));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Query timeout seconds must be positive
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("s^u\",pA").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setLargeMaxRows((-1456L));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Max rows must be positive
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.setMaxFieldSize((-1657));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Max field size must be positive
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setMaxFieldSize(0);
      assertEquals(2, prestoStatement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.executeLargeUpdate((String) null, 2147447857);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.clearProgressMonitor();
      assertFalse(prestoStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.execute("N!L.{Dak", 992);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("ISO8859_1").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      boolean boolean0 = prestoStatement0.isPoolable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      Class<SelectedRole> class0 = SelectedRole.class;
      try { 
        prestoStatement0.unwrap(class0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No wrapper for class com.facebook.presto.spi.security.SelectedRole
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("ISO8859_1").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int int0 = prestoStatement0.getUpdateCount();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        prestoStatement0.execute("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        prestoStatement0.executeUpdate("0l7_m$2", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.clearBatch();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // Batches not supported
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        prestoStatement0.executeLargeUpdate("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setCursorName(">r0LiDB");
      assertFalse(prestoStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      Consumer<QueryStats> consumer0 = (Consumer<QueryStats>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      prestoStatement0.setProgressMonitor(consumer0);
      assertFalse(prestoStatement0.isClosed());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.addBatch("!hqdQ fpbv@&aMG2JY1");
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // Batches not supported
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      ResultSet resultSet0 = prestoStatement0.getResultSet();
      assertNull(resultSet0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("", "com.facebook.presto.jdbc.PrestoDriverUri").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      Connection connection0 = prestoStatement0.getConnection();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int int0 = prestoStatement0.getResultSetHoldability();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.getGeneratedKeys();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // getGeneratedKeys
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      // Undeclared exception!
      try { 
        prestoStatement0.executeUpdate("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int int0 = prestoStatement0.getResultSetConcurrency();
      assertEquals(1007, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      String string0 = prestoStatement0.getUpdateType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        prestoStatement0.executeUpdate(">r0LiDB", intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn("ISO8859_1").when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int int0 = prestoStatement0.getFetchSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.setEscapeProcessing(false);
      assertEquals(2, prestoStatement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.clearWarnings();
      assertEquals(2, prestoStatement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        prestoStatement0.executeLargeUpdate("xY4qI$tK[ZRA", intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      try { 
        prestoStatement0.executeBatch();
        fail("Expecting exception: SQLFeatureNotSupportedException");
      
      } catch(SQLFeatureNotSupportedException e) {
         //
         // Batches not supported
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      prestoStatement0.close();
      try { 
        prestoStatement0.getWarnings();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Statement is closed
         //
         verifyException("com.facebook.presto.jdbc.PrestoStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PrestoConnection prestoConnection0 = mock(PrestoConnection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(prestoConnection0).isClosed();
      doReturn((String) null).when(prestoConnection0).toString();
      PrestoStatement prestoStatement0 = new PrestoStatement(prestoConnection0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        prestoStatement0.execute("", intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.jdbc.PrestoConnection", e);
      }
  }
}
