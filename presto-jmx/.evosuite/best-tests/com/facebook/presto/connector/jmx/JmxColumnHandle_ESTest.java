/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 23:57:15 GMT 2021
 */

package com.facebook.presto.connector.jmx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.connector.jmx.JmxColumnHandle;
import com.facebook.presto.spi.ColumnMetadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JmxColumnHandle_ESTest extends JmxColumnHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("", type0);
      String string0 = jmxColumnHandle0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("", type0);
      // Undeclared exception!
      try { 
        jmxColumnHandle0.getColumnMetadata();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JmxColumnHandle jmxColumnHandle0 = null;
      try {
        jmxColumnHandle0 = new JmxColumnHandle("", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("~#z2%[)u@LV", type0);
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle1 = new JmxColumnHandle("~#z2%[)u@LV", type1);
      boolean boolean0 = jmxColumnHandle0.equals(jmxColumnHandle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("cdw-[yBn5*1B80MmP").when(type0).toString();
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      Type type1 = jmxColumnHandle0.getColumnType();
      JmxColumnHandle jmxColumnHandle1 = new JmxColumnHandle("JmxColumnHandle{columnName=cdw-[yBn5*1B80MmP, columnType=cdw-[yBn5*1B80MmP}", type1);
      boolean boolean0 = jmxColumnHandle0.equals(jmxColumnHandle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-yn5*CB80!mP", type0);
      boolean boolean0 = jmxColumnHandle0.equals("cdw-yn5*CB80!mP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      boolean boolean0 = jmxColumnHandle0.equals(jmxColumnHandle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      boolean boolean0 = jmxColumnHandle0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("cdw-[yBn5*1B80MmP").when(type0).toString();
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      String string0 = jmxColumnHandle0.toString();
      assertEquals("JmxColumnHandle{columnName=cdw-[yBn5*1B80MmP, columnType=cdw-[yBn5*1B80MmP}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      jmxColumnHandle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("cdw-[yBn5*1B80MmP").when(type0).toString();
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      ColumnMetadata columnMetadata0 = jmxColumnHandle0.getColumnMetadata();
      assertTrue(columnMetadata0.isNullable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      String string0 = jmxColumnHandle0.getColumnName();
      assertEquals("cdw-[yBn5*1B80MmP", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("cdw-[yBn5*1B80MmP").when(type0).toString();
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type0);
      Type type1 = jmxColumnHandle0.getColumnType();
      JmxColumnHandle jmxColumnHandle1 = new JmxColumnHandle("cdw-[yBn5*1B80MmP", type1);
      boolean boolean0 = jmxColumnHandle0.equals(jmxColumnHandle1);
      assertTrue(boolean0);
  }
}
