/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 23:58:27 GMT 2021
 */

package com.facebook.presto.connector.jmx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.connector.jmx.JmxConnectorConfig;
import com.facebook.presto.connector.jmx.JmxHistoricalData;
import com.facebook.presto.connector.jmx.JmxMetadata;
import com.facebook.presto.connector.jmx.JmxPeriodicSampler;
import com.facebook.presto.connector.jmx.JmxRecordSetProvider;
import io.airlift.units.Duration;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JmxPeriodicSampler_ESTest extends JmxPeriodicSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JmxHistoricalData jmxHistoricalData0 = mock(JmxHistoricalData.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(jmxHistoricalData0).getTables();
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).toMillis();
      JmxConnectorConfig jmxConnectorConfig0 = mock(JmxConnectorConfig.class, new ViolatedAssumptionAnswer());
      doReturn(duration0).when(jmxConnectorConfig0).getDumpPeriod();
      JmxMetadata jmxMetadata0 = mock(JmxMetadata.class, new ViolatedAssumptionAnswer());
      JmxRecordSetProvider jmxRecordSetProvider0 = mock(JmxRecordSetProvider.class, new ViolatedAssumptionAnswer());
      JmxPeriodicSampler jmxPeriodicSampler0 = null;
      try {
        jmxPeriodicSampler0 = new JmxPeriodicSampler(jmxHistoricalData0, jmxMetadata0, jmxRecordSetProvider0, jmxConnectorConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.connector.jmx.JmxPeriodicSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JmxHistoricalData jmxHistoricalData0 = mock(JmxHistoricalData.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(jmxHistoricalData0).getTables();
      JmxMetadata jmxMetadata0 = mock(JmxMetadata.class, new ViolatedAssumptionAnswer());
      JmxRecordSetProvider jmxRecordSetProvider0 = mock(JmxRecordSetProvider.class, new ViolatedAssumptionAnswer());
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).toMillis();
      JmxConnectorConfig jmxConnectorConfig0 = mock(JmxConnectorConfig.class, new ViolatedAssumptionAnswer());
      doReturn(duration0).when(jmxConnectorConfig0).getDumpPeriod();
      JmxPeriodicSampler jmxPeriodicSampler0 = null;
      try {
        jmxPeriodicSampler0 = new JmxPeriodicSampler(jmxHistoricalData0, jmxMetadata0, jmxRecordSetProvider0, jmxConnectorConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.connector.jmx.JmxPeriodicSampler", e);
      }
  }
}
