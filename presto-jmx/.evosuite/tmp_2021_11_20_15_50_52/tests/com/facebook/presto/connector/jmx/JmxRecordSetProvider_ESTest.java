/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 23:54:16 GMT 2021
 */

package com.facebook.presto.connector.jmx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.client.NodeVersion;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.connector.ConnectorAwareNodeManager;
import com.facebook.presto.connector.jmx.JmxColumnHandle;
import com.facebook.presto.connector.jmx.JmxConnectorConfig;
import com.facebook.presto.connector.jmx.JmxHistoricalData;
import com.facebook.presto.connector.jmx.JmxRecordSetProvider;
import com.facebook.presto.execution.TestSqlTaskExecution;
import com.facebook.presto.metadata.InMemoryNodeManager;
import com.facebook.presto.metadata.InternalNode;
import com.facebook.presto.metadata.RemoteTransactionHandle;
import com.facebook.presto.spi.ColumnHandle;
import com.facebook.presto.spi.ConnectorId;
import com.facebook.presto.spi.ConnectorSession;
import com.facebook.presto.spi.ConnectorSplit;
import com.facebook.presto.spi.Node;
import com.facebook.presto.spi.NodeManager;
import com.facebook.presto.testing.TestingMetadata;
import com.facebook.presto.testing.TestingNodeManager;
import com.facebook.presto.tpch.TpchColumnHandle;
import com.google.common.collect.ImmutableList;
import java.net.URI;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import javax.management.InstanceNotFoundException;
import javax.management.MalformedObjectNameException;
import org.eclipse.jetty.util.RegexSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.joda.time.DateTimeZone;
import org.junit.runner.RunWith;
import org.testng.internal.TestResult;
import org.weakref.jmx.testing.TestingMBeanServer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JmxRecordSetProvider_ESTest extends JmxRecordSetProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestingMBeanServer testingMBeanServer0 = new TestingMBeanServer();
      TestingNodeManager testingNodeManager0 = new TestingNodeManager();
      JmxConnectorConfig jmxConnectorConfig0 = new JmxConnectorConfig();
      JmxHistoricalData jmxHistoricalData0 = new JmxHistoricalData(jmxConnectorConfig0);
      JmxRecordSetProvider jmxRecordSetProvider0 = new JmxRecordSetProvider(testingMBeanServer0, testingNodeManager0, jmxHistoricalData0);
      Vector<TestingMetadata.TestingColumnHandle> vector0 = new Vector<TestingMetadata.TestingColumnHandle>();
      RemoteTransactionHandle remoteTransactionHandle0 = new RemoteTransactionHandle();
      // Undeclared exception!
      try { 
        jmxRecordSetProvider0.getRecordSet(remoteTransactionHandle0, (ConnectorSession) null, (ConnectorSplit) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.connector.jmx.JmxRecordSetProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TestingMBeanServer testingMBeanServer0 = new TestingMBeanServer();
      TestingNodeManager testingNodeManager0 = new TestingNodeManager();
      JmxConnectorConfig jmxConnectorConfig0 = new JmxConnectorConfig();
      JmxHistoricalData jmxHistoricalData0 = new JmxHistoricalData(jmxConnectorConfig0);
      JmxRecordSetProvider jmxRecordSetProvider0 = new JmxRecordSetProvider(testingMBeanServer0, testingNodeManager0, jmxHistoricalData0);
      Vector<TestingMetadata.TestingColumnHandle> vector0 = new Vector<TestingMetadata.TestingColumnHandle>();
      RemoteTransactionHandle remoteTransactionHandle0 = new RemoteTransactionHandle();
      TestSqlTaskExecution.TestingSplit testSqlTaskExecution_TestingSplit0 = new TestSqlTaskExecution.TestingSplit(54, (-2156));
      // Undeclared exception!
      try { 
        jmxRecordSetProvider0.getRecordSet(remoteTransactionHandle0, (ConnectorSession) null, testSqlTaskExecution_TestingSplit0, vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.execution.TestSqlTaskExecution$TestingSplit cannot be cast to com.facebook.presto.connector.jmx.JmxSplit
         //
         verifyException("com.facebook.presto.connector.jmx.JmxRecordSetProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TestingMBeanServer testingMBeanServer0 = new TestingMBeanServer();
      TestingNodeManager testingNodeManager0 = new TestingNodeManager("org.joda.time.Period");
      JmxConnectorConfig jmxConnectorConfig0 = new JmxConnectorConfig();
      JmxHistoricalData jmxHistoricalData0 = new JmxHistoricalData(jmxConnectorConfig0);
      JmxRecordSetProvider jmxRecordSetProvider0 = new JmxRecordSetProvider(testingMBeanServer0, testingNodeManager0, jmxHistoricalData0);
      VarcharType varcharType0 = VarcharType.createVarcharType(0);
      JmxColumnHandle jmxColumnHandle0 = new JmxColumnHandle("1If~K'nlz;", varcharType0);
      ImmutableList<JmxColumnHandle> immutableList0 = ImmutableList.of(jmxColumnHandle0, jmxColumnHandle0, jmxColumnHandle0, jmxColumnHandle0);
      try { 
        jmxRecordSetProvider0.getLiveRow("B?O_L:q=,F", immutableList0, 2147483646);
        fail("Expecting exception: MalformedObjectNameException");
      
      } catch(MalformedObjectNameException e) {
         //
         // Unterminated key property part
         //
         verifyException("javax.management.ObjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TestingMBeanServer testingMBeanServer0 = new TestingMBeanServer();
      URI uRI0 = MockURI.aFileURI;
      NodeVersion nodeVersion0 = NodeVersion.UNKNOWN;
      InternalNode internalNode0 = new InternalNode("'e8jC>G.3]N{`Ir", uRI0, nodeVersion0, true, true);
      ImmutableList<Node> immutableList0 = ImmutableList.of((Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0);
      TestingNodeManager testingNodeManager0 = new TestingNodeManager("T<O", internalNode0, immutableList0);
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      JmxHistoricalData jmxHistoricalData0 = new JmxHistoricalData(0, set0);
      JmxRecordSetProvider jmxRecordSetProvider0 = new JmxRecordSetProvider(testingMBeanServer0, testingNodeManager0, jmxHistoricalData0);
      // Undeclared exception!
      try { 
        jmxRecordSetProvider0.getLiveRow("T<O", (List<? extends ColumnHandle>) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.connector.jmx.JmxRecordSetProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TestingMBeanServer testingMBeanServer0 = new TestingMBeanServer();
      URI uRI0 = MockURI.aHttpURI;
      NodeVersion nodeVersion0 = new NodeVersion("p@+V");
      InternalNode internalNode0 = new InternalNode("columns is null", uRI0, nodeVersion0, false);
      ImmutableList<Node> immutableList0 = ImmutableList.of((Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0, (Node) internalNode0);
      TestingNodeManager testingNodeManager0 = new TestingNodeManager(immutableList0);
      TestResult testResult0 = new TestResult();
      Set<String> set0 = testResult0.getAttributeNames();
      JmxHistoricalData jmxHistoricalData0 = new JmxHistoricalData((-905), set0);
      JmxRecordSetProvider jmxRecordSetProvider0 = new JmxRecordSetProvider(testingMBeanServer0, testingNodeManager0, jmxHistoricalData0);
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      TpchColumnHandle tpchColumnHandle0 = new TpchColumnHandle("A S1=1U'->trb:", kdbTreeType0);
      ImmutableList<TpchColumnHandle> immutableList1 = ImmutableList.of(tpchColumnHandle0, tpchColumnHandle0, tpchColumnHandle0, tpchColumnHandle0, tpchColumnHandle0);
      // Undeclared exception!
      try { 
        jmxRecordSetProvider0.getLiveRow("*w*#I(z7efC", immutableList1, 0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.tpch.TpchColumnHandle cannot be cast to com.facebook.presto.connector.jmx.JmxColumnHandle
         //
         verifyException("com.facebook.presto.connector.jmx.JmxRecordSetProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TestingMBeanServer testingMBeanServer0 = new TestingMBeanServer();
      JmxConnectorConfig jmxConnectorConfig0 = new JmxConnectorConfig();
      JmxHistoricalData jmxHistoricalData0 = new JmxHistoricalData(jmxConnectorConfig0);
      JmxRecordSetProvider jmxRecordSetProvider0 = null;
      try {
        jmxRecordSetProvider0 = new JmxRecordSetProvider(testingMBeanServer0, (NodeManager) null, jmxHistoricalData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeManager is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TestingMBeanServer testingMBeanServer0 = new TestingMBeanServer();
      InMemoryNodeManager inMemoryNodeManager0 = new InMemoryNodeManager();
      ConnectorId connectorId0 = new ConnectorId("jmxHistoryHolder is null");
      ConnectorAwareNodeManager connectorAwareNodeManager0 = new ConnectorAwareNodeManager(inMemoryNodeManager0, "", connectorId0);
      RegexSet regexSet0 = new RegexSet();
      JmxHistoricalData jmxHistoricalData0 = new JmxHistoricalData(0, regexSet0);
      JmxRecordSetProvider jmxRecordSetProvider0 = new JmxRecordSetProvider(testingMBeanServer0, connectorAwareNodeManager0, jmxHistoricalData0);
      ImmutableList<JmxColumnHandle> immutableList0 = ImmutableList.of();
      try { 
        jmxRecordSetProvider0.getLiveRow("", immutableList0, 0);
        fail("Expecting exception: InstanceNotFoundException");
      
      } catch(InstanceNotFoundException e) {
         //
         // MBean not found: *:*
         //
         verifyException("org.weakref.jmx.testing.TestingMBeanServer", e);
      }
  }
}
