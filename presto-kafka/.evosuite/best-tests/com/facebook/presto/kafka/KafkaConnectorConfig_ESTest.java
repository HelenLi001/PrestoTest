/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 00:28:38 GMT 2021
 */

package com.facebook.presto.kafka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.kafka.KafkaConnectorConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaConnectorConfig_ESTest extends KafkaConnectorConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
      
      kafkaConnectorConfig0.setTableDescriptionSupplier("Q>%v=d>ZPc0r!h");
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords(0);
      kafkaConnectorConfig1.setTableDescriptionSupplier((String) null);
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords((-1365));
      kafkaConnectorConfig1.setTableDescriptionSupplier("Q>%v=d>ZPc0r!h");
      assertEquals((-1365), kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      kafkaConnectorConfig1.setTableDescriptionSupplier((String) null);
      assertEquals(0, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes((-813));
      kafkaConnectorConfig0.setTableDescriptionSupplier("Q>%v=d>ZPc0r!h");
      assertEquals((-813), kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      
      kafkaConnectorConfig0.setMaxPollRecords(0);
      assertFalse(kafkaConnectorConfig0.isHideInternalColumns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      
      kafkaConnectorConfig0.setMaxPollRecords(0);
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPartitionFetchBytes((-813));
      kafkaConnectorConfig1.setMaxPollRecords((-1365));
      assertEquals((-813), kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals(1048576, kafkaConnectorConfig1.getMaxPartitionFetchBytes());
      
      kafkaConnectorConfig1.setMaxPartitionFetchBytes(0);
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPollRecords(0);
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      
      kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords((-1365));
      kafkaConnectorConfig1.setMaxPartitionFetchBytes((-813));
      assertEquals((-813), kafkaConnectorConfig1.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      
      kafkaConnectorConfig0.setHideInternalColumns(false);
      kafkaConnectorConfig0.setKafkaConnectTimeout("10s");
      assertFalse(kafkaConnectorConfig0.isHideInternalColumns());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords(0);
      kafkaConnectorConfig1.setKafkaConnectTimeout("10s");
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPollRecords((-1365));
      kafkaConnectorConfig0.setKafkaConnectTimeout("10s");
      assertEquals((-1365), kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      
      kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      kafkaConnectorConfig0.setKafkaConnectTimeout("10s");
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes((-813));
      kafkaConnectorConfig0.setKafkaConnectTimeout("10s");
      assertEquals((-813), kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      
      kafkaConnectorConfig0.setMaxPollRecords(0);
      kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPollRecords((-130));
      kafkaConnectorConfig0.setHideInternalColumns(true);
      assertEquals((-130), kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      
      kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes((-1971));
      kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals((-1971), kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      
      kafkaConnectorConfig0.setDefaultSchema("./Y?p");
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords(0);
      assertEquals("default", kafkaConnectorConfig1.getDefaultSchema());
      
      kafkaConnectorConfig1.setDefaultSchema("");
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPollRecords((-130));
      kafkaConnectorConfig0.setDefaultSchema("H[]");
      assertEquals((-130), kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      
      kafkaConnectorConfig0.setDefaultSchema("");
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes((-1971));
      kafkaConnectorConfig0.setDefaultSchema("./Y?p");
      assertEquals((-1971), kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setHideInternalColumns(false);
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      
      kafkaConnectorConfig0.setClusterMetadataSupplier("default");
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords(0);
      assertEquals("file", kafkaConnectorConfig1.getClusterMetadataSupplier());
      
      kafkaConnectorConfig1.setClusterMetadataSupplier("");
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPollRecords((-130));
      kafkaConnectorConfig0.setClusterMetadataSupplier("I%<v=wsj");
      assertEquals((-130), kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      
      kafkaConnectorConfig0.setClusterMetadataSupplier("");
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes((-1310));
      kafkaConnectorConfig0.setClusterMetadataSupplier("LWoa6(jqZ*e$.Eg");
      assertEquals((-1310), kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
      
      kafkaConnectorConfig0.setTableDescriptionSupplier((String) null);
      kafkaConnectorConfig0.getTableDescriptionSupplier();
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
      
      kafkaConnectorConfig0.setTableDescriptionSupplier("");
      kafkaConnectorConfig0.getTableDescriptionSupplier();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      
      kafkaConnectorConfig0.setMaxPollRecords(0);
      int int0 = kafkaConnectorConfig0.getMaxPollRecords();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords((-1365));
      int int0 = kafkaConnectorConfig1.getMaxPollRecords();
      assertEquals((-1365), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPartitionFetchBytes(0);
      int int0 = kafkaConnectorConfig1.getMaxPartitionFetchBytes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setMaxPartitionFetchBytes((-813));
      int int0 = kafkaConnectorConfig0.getMaxPartitionFetchBytes();
      assertEquals((-813), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.setKafkaConnectTimeout("00s");
      kafkaConnectorConfig0.getKafkaConnectTimeout();
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setDefaultSchema((String) null);
      kafkaConnectorConfig1.getDefaultSchema();
      assertEquals("file", kafkaConnectorConfig1.getClusterMetadataSupplier());
      assertTrue(kafkaConnectorConfig1.isHideInternalColumns());
      assertEquals(500, kafkaConnectorConfig1.getMaxPollRecords());
      assertEquals(1048576, kafkaConnectorConfig1.getMaxPartitionFetchBytes());
      assertEquals("file", kafkaConnectorConfig1.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setDefaultSchema("");
      kafkaConnectorConfig1.getDefaultSchema();
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      
      kafkaConnectorConfig0.setClusterMetadataSupplier((String) null);
      kafkaConnectorConfig0.getClusterMetadataSupplier();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setClusterMetadataSupplier("");
      kafkaConnectorConfig1.getClusterMetadataSupplier();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      // Undeclared exception!
      try { 
        kafkaConnectorConfig0.setKafkaConnectTimeout((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // duration is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      // Undeclared exception!
      try { 
        kafkaConnectorConfig0.setKafkaConnectTimeout("./Y?p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration is not a valid data duration string: ./Y?p
         //
         verifyException("io.airlift.units.Duration", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      kafkaConnectorConfig0.getKafkaConnectTimeout();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      String string0 = kafkaConnectorConfig0.getClusterMetadataSupplier();
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals("file", string0);
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      
      kafkaConnectorConfig0.setHideInternalColumns(false);
      boolean boolean0 = kafkaConnectorConfig0.isHideInternalColumns();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPartitionFetchBytes(1048576);
      assertEquals("file", kafkaConnectorConfig1.getClusterMetadataSupplier());
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertEquals(500, kafkaConnectorConfig1.getMaxPollRecords());
      assertTrue(kafkaConnectorConfig1.isHideInternalColumns());
      assertEquals("default", kafkaConnectorConfig1.getDefaultSchema());
      assertEquals("file", kafkaConnectorConfig1.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      String string0 = kafkaConnectorConfig0.getTableDescriptionSupplier();
      assertEquals("file", string0);
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      KafkaConnectorConfig kafkaConnectorConfig1 = kafkaConnectorConfig0.setMaxPollRecords(500);
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals("file", kafkaConnectorConfig1.getClusterMetadataSupplier());
      assertEquals(1048576, kafkaConnectorConfig1.getMaxPartitionFetchBytes());
      assertEquals("file", kafkaConnectorConfig1.getTableDescriptionSupplier());
      assertEquals("default", kafkaConnectorConfig1.getDefaultSchema());
      assertTrue(kafkaConnectorConfig1.isHideInternalColumns());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      boolean boolean0 = kafkaConnectorConfig0.isHideInternalColumns();
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertTrue(boolean0);
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      String string0 = kafkaConnectorConfig0.getDefaultSchema();
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      assertEquals("default", string0);
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      int int0 = kafkaConnectorConfig0.getMaxPollRecords();
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      assertEquals(500, int0);
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals(1048576, kafkaConnectorConfig0.getMaxPartitionFetchBytes());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      int int0 = kafkaConnectorConfig0.getMaxPartitionFetchBytes();
      assertEquals("default", kafkaConnectorConfig0.getDefaultSchema());
      assertEquals(1048576, int0);
      assertEquals("file", kafkaConnectorConfig0.getClusterMetadataSupplier());
      assertEquals(500, kafkaConnectorConfig0.getMaxPollRecords());
      assertTrue(kafkaConnectorConfig0.isHideInternalColumns());
      assertEquals("file", kafkaConnectorConfig0.getTableDescriptionSupplier());
  }
}
