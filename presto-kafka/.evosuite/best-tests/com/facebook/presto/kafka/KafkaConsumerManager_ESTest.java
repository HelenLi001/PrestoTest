/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 00:23:44 GMT 2021
 */

package com.facebook.presto.kafka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.kafka.KafkaConnectorConfig;
import com.facebook.presto.kafka.KafkaConsumerManager;
import com.facebook.presto.spi.HostAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaConsumerManager_ESTest extends KafkaConsumerManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = mock(KafkaConnectorConfig.class, new ViolatedAssumptionAnswer());
      doReturn(4509).when(kafkaConnectorConfig0).getMaxPartitionFetchBytes();
      doReturn(4509).when(kafkaConnectorConfig0).getMaxPollRecords();
      KafkaConsumerManager kafkaConsumerManager0 = new KafkaConsumerManager(kafkaConnectorConfig0);
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      doReturn("Og9.", "BtAq(y^EIvn", "{#}w[1B%8.(~").when(hostAddress0).toString();
      // Undeclared exception!
      try { 
        kafkaConsumerManager0.createConsumer("\"&vi4}cN rSfwX", hostAddress0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to construct kafka consumer
         //
         verifyException("org.apache.kafka.clients.consumer.KafkaConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KafkaConsumerManager kafkaConsumerManager0 = null;
      try {
        kafkaConsumerManager0 = new KafkaConsumerManager((KafkaConnectorConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // kafkaConfig is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", "", (String) null).when(hostAddress0).toString();
      KafkaConnectorConfig kafkaConnectorConfig0 = mock(KafkaConnectorConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kafkaConnectorConfig0).getMaxPartitionFetchBytes();
      doReturn(0).when(kafkaConnectorConfig0).getMaxPollRecords();
      KafkaConsumerManager kafkaConsumerManager0 = new KafkaConsumerManager(kafkaConnectorConfig0);
      // Undeclared exception!
      try { 
        kafkaConsumerManager0.createConsumer("", hostAddress0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value 0 for configuration max.poll.records: Value must be at least 1
         //
         verifyException("org.apache.kafka.common.config.ConfigDef$Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = mock(KafkaConnectorConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kafkaConnectorConfig0).getMaxPartitionFetchBytes();
      doReturn(0).when(kafkaConnectorConfig0).getMaxPollRecords();
      KafkaConsumerManager kafkaConsumerManager0 = new KafkaConsumerManager(kafkaConnectorConfig0);
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hostAddress0).toString();
      // Undeclared exception!
      try { 
        kafkaConsumerManager0.createConsumer("G9dya<^NJPZ#tu", hostAddress0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }
}
