/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Nov 21 00:23:44 GMT 2021
 */

package com.facebook.presto.kafka;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class KafkaConsumerManager_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.facebook.presto.kafka.KafkaConsumerManager"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/mnt/c/Users/Helen/Documents/DataScience18668/GroupProject/project/presto/presto-kafka"); 
    java.lang.System.setProperty("user.home", "/home/helen"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "helen"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
    java.lang.System.setProperty("sun.management.compiler", "HotSpot 64-Bit Tiered Compilers"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(KafkaConsumerManager_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.kafka.common.network.Selectable",
      "org.apache.kafka.clients.MetadataCache",
      "org.apache.kafka.common.requests.IsolationLevel",
      "org.apache.kafka.common.ClusterResourceListener",
      "org.apache.kafka.common.KafkaException",
      "org.apache.kafka.common.utils.AppInfoParser",
      "org.apache.kafka.clients.consumer.OffsetResetStrategy",
      "org.apache.kafka.common.metrics.Sensor$RecordingLevel",
      "org.apache.kafka.common.utils.LogContext$AbstractKafkaLogger",
      "org.apache.kafka.clients.ClientUtils",
      "org.apache.kafka.common.utils.Sanitizer",
      "org.apache.kafka.common.Cluster",
      "org.apache.kafka.common.utils.LogContext",
      "org.apache.kafka.common.config.ConfigDef",
      "org.apache.kafka.clients.CommonClientConfigs",
      "com.facebook.presto.spi.HostAddress",
      "org.apache.kafka.common.errors.InvalidTopicException",
      "org.apache.kafka.clients.consumer.ConsumerConfig",
      "org.apache.kafka.clients.consumer.NoOffsetForPartitionException",
      "org.apache.kafka.common.metrics.Measurable",
      "org.apache.kafka.common.config.ConfigDef$Width",
      "com.facebook.presto.spi.Plugin",
      "org.apache.kafka.common.security.auth.PrincipalBuilder",
      "com.facebook.drift.annotations.ThriftIdlAnnotation",
      "org.apache.kafka.common.config.ConfigDef$Recommender",
      "org.apache.kafka.common.metrics.JmxReporter$KafkaMbean",
      "io.airlift.units.MinDurationValidator",
      "com.facebook.drift.annotations.ThriftField$Requiredness",
      "org.apache.kafka.common.metrics.Metrics",
      "org.apache.kafka.common.config.ConfigDef$Type",
      "org.apache.kafka.common.metrics.MetricsReporter",
      "org.apache.kafka.common.config.ConfigDef$Validator",
      "com.facebook.drift.annotations.ThriftField",
      "org.apache.kafka.clients.consumer.KafkaConsumer",
      "com.facebook.airlift.configuration.Config",
      "org.apache.kafka.common.errors.InvalidGroupIdException",
      "org.apache.kafka.common.ClusterResource",
      "org.apache.kafka.common.security.auth.DefaultPrincipalBuilder",
      "org.apache.kafka.clients.ClientDnsLookup",
      "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger",
      "org.apache.kafka.common.errors.RetriableException",
      "org.apache.kafka.clients.consumer.internals.PartitionAssignor",
      "org.apache.kafka.clients.consumer.internals.ConsumerMetadata",
      "org.apache.kafka.common.errors.InterruptException",
      "org.apache.kafka.common.config.ConfigDef$ValidString",
      "com.facebook.presto.spi.classloader.ThreadContextClassLoader",
      "org.apache.kafka.common.serialization.Deserializer",
      "org.apache.kafka.common.config.SslConfigs",
      "org.apache.kafka.common.utils.SystemTime",
      "org.apache.kafka.common.config.AbstractConfig",
      "org.apache.kafka.common.config.ConfigDef$Range",
      "org.apache.kafka.common.security.auth.SecurityProtocol",
      "io.airlift.units.Duration",
      "com.google.inject.BindingAnnotation",
      "com.fasterxml.jackson.annotation.JacksonAnnotation",
      "com.facebook.presto.kafka.KafkaConnectorConfig",
      "org.apache.kafka.clients.consumer.internals.SubscriptionState",
      "com.fasterxml.jackson.annotation.JsonValue",
      "org.apache.kafka.clients.KafkaClient",
      "org.apache.kafka.common.MetricName",
      "org.apache.kafka.common.Metric",
      "org.apache.kafka.clients.consumer.Consumer",
      "com.facebook.presto.kafka.KafkaConsumerManager",
      "org.apache.kafka.common.Configurable",
      "org.apache.kafka.common.utils.Time",
      "org.apache.kafka.common.config.internals.BrokerSecurityConfigs",
      "org.apache.kafka.common.metrics.MetricConfig",
      "org.apache.kafka.common.internals.ClusterResourceListeners",
      "org.apache.kafka.clients.consumer.internals.SubscriptionState$SubscriptionType",
      "org.apache.kafka.clients.consumer.ConsumerRebalanceListener",
      "org.apache.kafka.common.config.AbstractConfig$ResolvingMap",
      "org.apache.kafka.common.metrics.KafkaMetric",
      "org.apache.kafka.common.metrics.MetricValueProvider",
      "org.apache.kafka.clients.consumer.ConsumerInterceptor",
      "org.apache.kafka.common.config.ConfigDef$3",
      "com.facebook.airlift.log.Logger",
      "org.apache.kafka.clients.Metadata",
      "io.airlift.units.MinDuration",
      "org.apache.kafka.common.config.ConfigDef$Importance",
      "org.apache.kafka.clients.consumer.RangeAssignor",
      "org.apache.kafka.common.config.ConfigDef$ConfigKey",
      "com.facebook.presto.kafka.KafkaPlugin",
      "org.apache.kafka.common.config.SaslConfigs",
      "org.apache.kafka.common.metrics.JmxReporter",
      "org.apache.kafka.common.utils.Utils",
      "org.apache.kafka.common.errors.TimeoutException",
      "org.apache.kafka.common.errors.InvalidConfigurationException",
      "org.apache.kafka.common.metrics.Metrics$2",
      "org.apache.kafka.common.internals.PartitionStates",
      "org.apache.kafka.clients.consumer.internals.ConsumerInterceptors",
      "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignor",
      "org.apache.kafka.common.errors.AuthorizationException",
      "org.apache.kafka.common.serialization.ByteBufferDeserializer",
      "org.apache.kafka.common.config.ConfigException",
      "com.facebook.drift.annotations.ThriftStruct",
      "org.apache.kafka.common.config.ConfigDef$NonNullValidator",
      "com.facebook.drift.annotations.ThriftConstructor",
      "com.facebook.drift.annotations.ThriftField$Recursiveness",
      "org.apache.kafka.common.errors.TopicAuthorizationException",
      "org.apache.kafka.clients.consumer.InvalidOffsetException",
      "org.apache.kafka.common.config.AbstractConfig$RecordingMap",
      "org.apache.kafka.common.errors.ApiException"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.facebook.presto.kafka.KafkaConnectorConfig", false, KafkaConsumerManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.spi.HostAddress", false, KafkaConsumerManager_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(KafkaConsumerManager_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.facebook.airlift.log.Logger",
      "com.facebook.presto.kafka.KafkaConsumerManager",
      "com.facebook.presto.kafka.KafkaConnectorConfig",
      "com.facebook.drift.annotations.ThriftField$Recursiveness",
      "com.facebook.drift.annotations.ThriftField$Requiredness",
      "com.facebook.presto.spi.HostAddress",
      "com.facebook.presto.spi.classloader.ThreadContextClassLoader",
      "org.apache.kafka.clients.consumer.KafkaConsumer",
      "org.apache.kafka.common.serialization.ByteBufferDeserializer",
      "org.apache.kafka.common.config.AbstractConfig",
      "org.apache.kafka.common.requests.IsolationLevel",
      "org.apache.kafka.common.config.ConfigDef",
      "org.apache.kafka.common.config.ConfigDef$Type",
      "org.apache.kafka.common.config.ConfigDef$NonNullValidator",
      "org.apache.kafka.common.config.ConfigDef$Importance",
      "org.apache.kafka.common.config.ConfigDef$Width",
      "org.apache.kafka.common.config.ConfigDef$ConfigKey",
      "org.apache.kafka.common.config.ConfigDef$3",
      "org.apache.kafka.clients.ClientDnsLookup",
      "org.apache.kafka.common.config.ConfigDef$ValidString",
      "org.apache.kafka.common.config.ConfigDef$Range",
      "org.apache.kafka.common.metrics.Sensor$RecordingLevel",
      "org.apache.kafka.common.security.auth.SecurityProtocol",
      "org.apache.kafka.common.utils.Utils",
      "org.apache.kafka.clients.CommonClientConfigs",
      "org.apache.kafka.common.config.SslConfigs",
      "org.apache.kafka.common.config.internals.BrokerSecurityConfigs",
      "org.apache.kafka.common.config.SaslConfigs",
      "org.apache.kafka.clients.consumer.ConsumerConfig",
      "org.apache.kafka.common.config.AbstractConfig$ResolvingMap",
      "org.apache.kafka.common.KafkaException",
      "org.apache.kafka.common.config.ConfigException",
      "org.apache.kafka.common.config.AbstractConfig$RecordingMap",
      "org.apache.kafka.common.utils.LogContext",
      "org.apache.kafka.common.utils.LogContext$AbstractKafkaLogger",
      "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger",
      "org.apache.kafka.common.utils.SystemTime",
      "org.apache.kafka.common.utils.Time",
      "org.apache.kafka.common.metrics.MetricConfig",
      "org.apache.kafka.common.metrics.JmxReporter",
      "org.apache.kafka.common.metrics.Metrics",
      "org.apache.kafka.common.MetricName",
      "org.apache.kafka.common.metrics.Metrics$2",
      "org.apache.kafka.common.metrics.KafkaMetric",
      "org.apache.kafka.common.utils.Sanitizer",
      "org.apache.kafka.common.metrics.JmxReporter$KafkaMbean",
      "org.apache.kafka.clients.consumer.internals.ConsumerInterceptors",
      "org.apache.kafka.clients.consumer.OffsetResetStrategy",
      "org.apache.kafka.clients.consumer.internals.SubscriptionState",
      "org.apache.kafka.common.internals.PartitionStates",
      "org.apache.kafka.clients.consumer.internals.SubscriptionState$SubscriptionType",
      "org.apache.kafka.common.internals.ClusterResourceListeners",
      "org.apache.kafka.clients.Metadata",
      "org.apache.kafka.clients.consumer.internals.ConsumerMetadata",
      "org.apache.kafka.clients.MetadataCache",
      "org.apache.kafka.common.Cluster",
      "org.apache.kafka.common.ClusterResource",
      "org.apache.kafka.clients.ClientUtils",
      "org.apache.kafka.common.utils.AppInfoParser"
    );
  }
}
