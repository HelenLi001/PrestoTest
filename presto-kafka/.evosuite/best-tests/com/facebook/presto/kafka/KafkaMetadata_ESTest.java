/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 00:14:30 GMT 2021
 */

package com.facebook.presto.kafka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.predicate.Domain;
import com.facebook.presto.common.predicate.TupleDomain;
import com.facebook.presto.common.type.TinyintType;
import com.facebook.presto.kafka.KafkaColumnHandle;
import com.facebook.presto.kafka.KafkaConnectorConfig;
import com.facebook.presto.kafka.KafkaConnectorId;
import com.facebook.presto.kafka.KafkaMetadata;
import com.facebook.presto.kafka.KafkaTableHandle;
import com.facebook.presto.kafka.KafkaTopicDescription;
import com.facebook.presto.kafka.KafkaTopicFieldDescription;
import com.facebook.presto.kafka.schema.MapBasedTableDescriptionSupplier;
import com.facebook.presto.spi.ColumnHandle;
import com.facebook.presto.spi.ColumnMetadata;
import com.facebook.presto.spi.ConnectorSession;
import com.facebook.presto.spi.ConnectorTableHandle;
import com.facebook.presto.spi.ConnectorTableLayout;
import com.facebook.presto.spi.ConnectorTableLayoutHandle;
import com.facebook.presto.spi.Constraint;
import com.facebook.presto.spi.SchemaTableName;
import com.facebook.presto.spi.SchemaTablePrefix;
import com.facebook.presto.testing.TestingHandle;
import com.facebook.presto.testing.TestingMetadata;
import com.facebook.presto.tpch.TpchTableHandle;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaMetadata_ESTest extends KafkaMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("BCBpSEWjx?F\"oaL");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      TestingHandle testingHandle0 = TestingHandle.INSTANCE;
      ConnectorTableLayout connectorTableLayout0 = kafkaMetadata0.getTableLayout((ConnectorSession) null, testingHandle0);
      assertNotNull(connectorTableLayout0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      Hashtable<SchemaTableName, KafkaTopicDescription> hashtable0 = new Hashtable<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(hashtable0);
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("1-V~_Y47sIT?+}pV");
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      TpchTableHandle tpchTableHandle0 = new TpchTableHandle("", 764.7880688);
      // Undeclared exception!
      try { 
        kafkaMetadata0.getTableMetadata((ConnectorSession) null, tpchTableHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tableHandle is not an instance of KafkaTableHandle
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("Nt1*_d?0R4H");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      IdentityHashMap<SchemaTableName, KafkaTopicDescription> identityHashMap0 = new IdentityHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(identityHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      SchemaTableName schemaTableName0 = new SchemaTableName("{VED!,^k", "47M|\"hc(@");
      TestingMetadata.TestingTableHandle testingMetadata_TestingTableHandle0 = new TestingMetadata.TestingTableHandle(schemaTableName0);
      LinkedHashMap<ColumnHandle, Domain> linkedHashMap0 = new LinkedHashMap<ColumnHandle, Domain>();
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.withColumnDomains((Map<ColumnHandle, Domain>) linkedHashMap0);
      Constraint<ColumnHandle> constraint0 = new Constraint<ColumnHandle>(tupleDomain0);
      TreeSet<ColumnHandle> treeSet0 = new TreeSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.ofNullable((Set<ColumnHandle>) treeSet0);
      // Undeclared exception!
      try { 
        kafkaMetadata0.getTableLayouts((ConnectorSession) null, testingMetadata_TestingTableHandle0, constraint0, optional0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tableHandle is not an instance of KafkaTableHandle
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("7");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>(1, 1);
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      SchemaTableName schemaTableName0 = new SchemaTableName("0I", "7");
      TestingMetadata.TestingTableHandle testingMetadata_TestingTableHandle0 = new TestingMetadata.TestingTableHandle(schemaTableName0);
      // Undeclared exception!
      try { 
        kafkaMetadata0.getColumnHandles((ConnectorSession) null, testingMetadata_TestingTableHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tableHandle is not an instance of KafkaTableHandle
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("query_max_output_size");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      // Undeclared exception!
      try { 
        kafkaMetadata0.beginInsert((ConnectorSession) null, (ConnectorTableHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kafka.KafkaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IdentityHashMap<SchemaTableName, KafkaTopicDescription> identityHashMap0 = new IdentityHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(identityHashMap0);
      KafkaMetadata kafkaMetadata0 = null;
      try {
        kafkaMetadata0 = new KafkaMetadata((KafkaConnectorId) null, (KafkaConnectorConfig) null, mapBasedTableDescriptionSupplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectorId is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("initialCapacity: ");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      Hashtable<SchemaTableName, KafkaTopicDescription> hashtable0 = new Hashtable<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(hashtable0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      SchemaTablePrefix schemaTablePrefix0 = new SchemaTablePrefix("8K7]2O>");
      Map<SchemaTableName, List<ColumnMetadata>> map0 = kafkaMetadata0.listTableColumns((ConnectorSession) null, schemaTablePrefix0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("initialCapacity: ");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      Hashtable<SchemaTableName, KafkaTopicDescription> hashtable0 = new Hashtable<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(hashtable0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      // Undeclared exception!
      try { 
        kafkaMetadata0.getTableLayout((ConnectorSession) null, (ConnectorTableLayoutHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // handle is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("+");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      TestingMetadata.TestingTableHandle testingMetadata_TestingTableHandle0 = new TestingMetadata.TestingTableHandle();
      // Undeclared exception!
      try { 
        kafkaMetadata0.beginInsert((ConnectorSession) null, testingMetadata_TestingTableHandle0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.testing.TestingMetadata$TestingTableHandle cannot be cast to com.facebook.presto.kafka.KafkaTableHandle
         //
         verifyException("com.facebook.presto.kafka.KafkaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("query_max_output_size");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      // Undeclared exception!
      try { 
        kafkaMetadata0.getTableMetadata((ConnectorSession) null, (ConnectorTableHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // tableHandle is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("kafkaConfig is null");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      IdentityHashMap<SchemaTableName, KafkaTopicDescription> identityHashMap0 = new IdentityHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(identityHashMap0);
      TestingMetadata.TestingTableHandle testingMetadata_TestingTableHandle0 = new TestingMetadata.TestingTableHandle();
      TinyintType tinyintType0 = TinyintType.TINYINT;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("w;b <Odu*%ekD$", tinyintType0, "prefix is null", "kafkaConfig is null", "prefix is null", (String) null, true);
      KafkaColumnHandle kafkaColumnHandle0 = kafkaTopicFieldDescription0.getColumnHandle("", true, (-999));
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      // Undeclared exception!
      try { 
        kafkaMetadata0.getColumnMetadata((ConnectorSession) null, testingMetadata_TestingTableHandle0, kafkaColumnHandle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tableHandle is not an instance of KafkaTableHandle
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("H(b\"J'K]kx=|+v");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      // Undeclared exception!
      try { 
        kafkaMetadata0.getColumnHandles((ConnectorSession) null, (ConnectorTableHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // tableHandle is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("initialCapacity: ");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      Hashtable<SchemaTableName, KafkaTopicDescription> hashtable0 = new Hashtable<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(hashtable0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      SchemaTablePrefix schemaTablePrefix0 = new SchemaTablePrefix("8K7]2O>", "8K7]2O>");
      // Undeclared exception!
      try { 
        kafkaMetadata0.listTableColumns((ConnectorSession) null, schemaTablePrefix0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Table 8k7]2o>.8k7]2o> cannot be gone because tables are statically defined
         //
         verifyException("com.facebook.presto.kafka.KafkaMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("kafkaConfig is null");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      IdentityHashMap<SchemaTableName, KafkaTopicDescription> identityHashMap0 = new IdentityHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(identityHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      List<SchemaTableName> list0 = kafkaMetadata0.listTables((ConnectorSession) null, (Optional<String>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("+");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      List<String> list0 = kafkaMetadata0.listSchemaNames((ConnectorSession) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KafkaConnectorId kafkaConnectorId0 = new KafkaConnectorId("H(b\"J'K]kx=|+v");
      KafkaConnectorConfig kafkaConnectorConfig0 = new KafkaConnectorConfig();
      LinkedHashMap<SchemaTableName, KafkaTopicDescription> linkedHashMap0 = new LinkedHashMap<SchemaTableName, KafkaTopicDescription>();
      MapBasedTableDescriptionSupplier mapBasedTableDescriptionSupplier0 = new MapBasedTableDescriptionSupplier(linkedHashMap0);
      KafkaMetadata kafkaMetadata0 = new KafkaMetadata(kafkaConnectorId0, kafkaConnectorConfig0, mapBasedTableDescriptionSupplier0);
      TestingMetadata.TestingTableHandle testingMetadata_TestingTableHandle0 = new TestingMetadata.TestingTableHandle();
      SchemaTableName schemaTableName0 = testingMetadata_TestingTableHandle0.getTableName();
      KafkaTableHandle kafkaTableHandle0 = kafkaMetadata0.getTableHandle((ConnectorSession) null, schemaTableName0);
      assertNull(kafkaTableHandle0);
  }
}
