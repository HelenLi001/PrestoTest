/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 00:17:30 GMT 2021
 */

package com.facebook.presto.kafka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.BooleanType;
import com.facebook.presto.common.type.DateType;
import com.facebook.presto.common.type.HyperLogLogType;
import com.facebook.presto.common.type.P4HyperLogLogType;
import com.facebook.presto.common.type.SmallintType;
import com.facebook.presto.common.type.TimestampWithTimeZoneType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.VarbinaryType;
import com.facebook.presto.common.type.VarcharEnumType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.kafka.KafkaColumnHandle;
import com.facebook.presto.kafka.KafkaTopicFieldDescription;
import com.facebook.presto.spi.ColumnMetadata;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaTopicFieldDescription_ESTest extends KafkaTopicFieldDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("qW", smallintType0, (String) null, (String) null, "", (String) null, false);
      boolean boolean0 = kafkaTopicFieldDescription0.isHidden();
      assertEquals("", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("qW", kafkaTopicFieldDescription0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("+", varcharType0, (String) null, "", "-l06K`i+WBWm<:#}", "", true);
      String string0 = kafkaTopicFieldDescription0.getMapping();
      assertNull(string0);
      assertEquals("", kafkaTopicFieldDescription0.getComment());
      assertEquals("+", kafkaTopicFieldDescription0.getName());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
      assertEquals("-l06K`i+WBWm<:#}", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("", kafkaTopicFieldDescription0.getFormatHint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimestampWithTimeZoneType timestampWithTimeZoneType0 = TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("nl;gF4)e83>u!", timestampWithTimeZoneType0, "", (String) null, "com.fasterxml.jackson.databind.BeanProperty$Bogus", "<R2m_MK", true);
      String string0 = kafkaTopicFieldDescription0.getMapping();
      assertEquals("", string0);
      assertEquals("com.fasterxml.jackson.databind.BeanProperty$Bogus", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("nl;gF4)e83>u!", kafkaTopicFieldDescription0.getName());
      assertEquals("<R2m_MK", kafkaTopicFieldDescription0.getFormatHint());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("qW", smallintType0, (String) null, (String) null, "", (String) null, false);
      String string0 = kafkaTopicFieldDescription0.getFormatHint();
      assertEquals("", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("qW", kafkaTopicFieldDescription0.getName());
      assertNull(string0);
      assertFalse(kafkaTopicFieldDescription0.isHidden());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      VarcharEnumType.VarcharEnumMap varcharEnumType_VarcharEnumMap0 = new VarcharEnumType.VarcharEnumMap("t0ziGxQ|i]#&M-;gm", hashMap0);
      VarcharEnumType varcharEnumType0 = new VarcharEnumType(varcharEnumType_VarcharEnumMap0);
      Type type0 = varcharEnumType0.getValueType();
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("t0ziGxQ|i]#&M-;gm", type0, "t0ziGxQ|i]#&M-;gm", "t0ziGxQ|i]#&M-;gm", "t0ziGxQ|i]#&M-;gm", "", true);
      String string0 = kafkaTopicFieldDescription0.getFormatHint();
      assertEquals("t0ziGxQ|i]#&M-;gm", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("t0ziGxQ|i]#&M-;gm", kafkaTopicFieldDescription0.getComment());
      assertEquals("t0ziGxQ|i]#&M-;gm", kafkaTopicFieldDescription0.getName());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
      assertEquals("", string0);
      assertEquals("t0ziGxQ|i]#&M-;gm", kafkaTopicFieldDescription0.getMapping());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("D[", varcharType0, "in|S[6!", (String) null, (String) null, "name", true);
      String string0 = kafkaTopicFieldDescription0.getDataFormat();
      assertEquals("in|S[6!", kafkaTopicFieldDescription0.getMapping());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
      assertNull(string0);
      assertEquals("name", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("D[", kafkaTopicFieldDescription0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("qW", smallintType0, (String) null, (String) null, "", (String) null, false);
      String string0 = kafkaTopicFieldDescription0.getDataFormat();
      assertEquals("", string0);
      assertFalse(kafkaTopicFieldDescription0.isHidden());
      assertNotNull(string0);
      assertEquals("qW", kafkaTopicFieldDescription0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("qW", smallintType0, (String) null, (String) null, "", (String) null, false);
      String string0 = kafkaTopicFieldDescription0.getComment();
      assertEquals("", kafkaTopicFieldDescription0.getDataFormat());
      assertNull(string0);
      assertFalse(kafkaTopicFieldDescription0.isHidden());
      assertEquals("qW", kafkaTopicFieldDescription0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription(")L0X{]mg", varcharType0, ")L0X{]mg", "(]iJZ'm|\"Uf", "org.joda.time.chrono.LimitChronology$LimitDateTimeField", "", true);
      String string0 = kafkaTopicFieldDescription0.getComment();
      assertEquals(")L0X{]mg", kafkaTopicFieldDescription0.getMapping());
      assertEquals(")L0X{]mg", kafkaTopicFieldDescription0.getName());
      assertEquals("(]iJZ'm|\"Uf", string0);
      assertEquals("org.joda.time.chrono.LimitChronology$LimitDateTimeField", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("", kafkaTopicFieldDescription0.getFormatHint());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "!!U:dL", "!!U:dL", "!!U:dL", "38^*O3$", true);
      ColumnMetadata columnMetadata0 = kafkaTopicFieldDescription0.getColumnMetadata();
      assertEquals("38^*O3$", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("!!U:dL", kafkaTopicFieldDescription0.getMapping());
      assertEquals("%}4z3u`x}ou4|2se", columnMetadata0.getName());
      assertEquals("!!U:dL", columnMetadata0.getComment());
      assertTrue(columnMetadata0.isHidden());
      assertEquals("!!U:dL", kafkaTopicFieldDescription0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("Clone error", varbinaryType0, "", "Clone error", "8=rcN')MIc~%", "", false);
      KafkaColumnHandle kafkaColumnHandle0 = kafkaTopicFieldDescription0.getColumnHandle("Clone error", false, 0);
      assertEquals("8=rcN')MIc~%", kafkaColumnHandle0.getDataFormat());
      assertEquals("Clone error", kafkaColumnHandle0.getName());
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertEquals("Clone error", kafkaTopicFieldDescription0.getComment());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertEquals(0, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertFalse(kafkaColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("name", p4HyperLogLogType0, "!tVj", "uFM4~S s+O", "", "uFM4~S s+O", true);
      KafkaColumnHandle kafkaColumnHandle0 = kafkaTopicFieldDescription0.getColumnHandle("", true, (-2633));
      assertEquals("", kafkaColumnHandle0.getDataFormat());
      assertEquals("!tVj", kafkaColumnHandle0.getMapping());
      assertEquals("name", kafkaColumnHandle0.getName());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertEquals("uFM4~S s+O", kafkaTopicFieldDescription0.getComment());
      assertEquals((-2633), kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertEquals("uFM4~S s+O", kafkaColumnHandle0.getFormatHint());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateType dateType0 = DateType.DATE;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("org.glassfish.jersey.server.ResourceConfig$State", dateType0, "com.facebook.presto.kafka.KafkaTopicFieldDescription", "|KV=-C&-}M7nPzoL#", "|KV=-C&-}M7nPzoL#", "|KV=-C&-}M7nPzoL#", false);
      // Undeclared exception!
      try { 
        kafkaTopicFieldDescription0.getColumnHandle((String) null, true, 969);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectorId is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = null;
      try {
        kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription(",#[b)`(", (Type) null, ",#[b)`(", "Gv})*lr:K", "Qh", ",#[b)`(", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      VarcharEnumType.VarcharEnumMap varcharEnumType_VarcharEnumMap0 = new VarcharEnumType.VarcharEnumMap("t0ziGxQ|i]#&M-;gm", hashMap0);
      VarcharEnumType varcharEnumType0 = new VarcharEnumType(varcharEnumType_VarcharEnumMap0);
      Type type0 = varcharEnumType0.getValueType();
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("t0ziGxQ|i]#&M-;gm", type0, "t0ziGxQ|i]#&M-;gm", "t0ziGxQ|i]#&M-;gm", "t0ziGxQ|i]#&M-;gm", "", true);
      String string0 = kafkaTopicFieldDescription0.getDataFormat();
      assertEquals("t0ziGxQ|i]#&M-;gm", kafkaTopicFieldDescription0.getComment());
      assertEquals("", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("t0ziGxQ|i]#&M-;gm", kafkaTopicFieldDescription0.getName());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
      assertEquals("t0ziGxQ|i]#&M-;gm", string0);
      assertEquals("t0ziGxQ|i]#&M-;gm", kafkaTopicFieldDescription0.getMapping());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateType dateType0 = DateType.DATE;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("org.glassfish.jersey.server.ResourceConfig$State", dateType0, "com.facebook.presto.kafka.KafkaTopicFieldDescription", "|KV=-C&-}M7nPzoL#", "|KV=-C&-}M7nPzoL#", "|KV=-C&-}M7nPzoL#", false);
      String string0 = kafkaTopicFieldDescription0.getMapping();
      assertEquals("|KV=-C&-}M7nPzoL#", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("|KV=-C&-}M7nPzoL#", kafkaTopicFieldDescription0.getComment());
      assertFalse(kafkaTopicFieldDescription0.isHidden());
      assertEquals("|KV=-C&-}M7nPzoL#", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("org.glassfish.jersey.server.ResourceConfig$State", kafkaTopicFieldDescription0.getName());
      assertEquals("com.facebook.presto.kafka.KafkaTopicFieldDescription", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("7WUa>?2n:nU/@qV>l", varcharType0, "7WUa>?2n:nU/@qV>l", "7WUa>?2n:nU/@qV>l", "2BLN1C!ahh\"6qyp", "2BLN1C!ahh\"6qyp", true);
      String string0 = kafkaTopicFieldDescription0.getFormatHint();
      assertEquals("7WUa>?2n:nU/@qV>l", kafkaTopicFieldDescription0.getComment());
      assertEquals("2BLN1C!ahh\"6qyp", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("2BLN1C!ahh\"6qyp", string0);
      assertEquals("7WUa>?2n:nU/@qV>l", kafkaTopicFieldDescription0.getName());
      assertEquals("7WUa>?2n:nU/@qV>l", kafkaTopicFieldDescription0.getMapping());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("7WUa>?2n:nU/@qV>l", varcharType0, "7WUa>?2n:nU/@qV>l", "7WUa>?2n:nU/@qV>l", "2BLN1C!ahh\"6qyp", "2BLN1C!ahh\"6qyp", true);
      String string0 = kafkaTopicFieldDescription0.getName();
      assertEquals("7WUa>?2n:nU/@qV>l", kafkaTopicFieldDescription0.getMapping());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
      assertEquals("7WUa>?2n:nU/@qV>l", string0);
      assertEquals("2BLN1C!ahh\"6qyp", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("7WUa>?2n:nU/@qV>l", kafkaTopicFieldDescription0.getComment());
      assertEquals("2BLN1C!ahh\"6qyp", kafkaTopicFieldDescription0.getFormatHint());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("qW", smallintType0, (String) null, (String) null, "", (String) null, false);
      kafkaTopicFieldDescription0.getType();
      assertFalse(kafkaTopicFieldDescription0.isHidden());
      assertEquals("qW", kafkaTopicFieldDescription0.getName());
      assertEquals("", kafkaTopicFieldDescription0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("A]v}ykM0", varcharType0, "A]v}ykM0", "", "eSKL.?6JWjM", "^Cg8VBCQyC:e^H", true);
      boolean boolean0 = kafkaTopicFieldDescription0.isHidden();
      assertEquals("A]v}ykM0", kafkaTopicFieldDescription0.getName());
      assertEquals("A]v}ykM0", kafkaTopicFieldDescription0.getMapping());
      assertEquals("^Cg8VBCQyC:e^H", kafkaTopicFieldDescription0.getFormatHint());
      assertTrue(boolean0);
      assertEquals("", kafkaTopicFieldDescription0.getComment());
      assertEquals("eSKL.?6JWjM", kafkaTopicFieldDescription0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "38^*O3$", false);
      KafkaTopicFieldDescription kafkaTopicFieldDescription1 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "38^*O3$", false);
      boolean boolean0 = kafkaTopicFieldDescription0.equals(kafkaTopicFieldDescription1);
      assertEquals("38^*O3$", kafkaTopicFieldDescription1.getFormatHint());
      assertFalse(kafkaTopicFieldDescription1.isHidden());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getName());
      assertTrue(boolean0);
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getComment());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getDataFormat());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getMapping());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", true);
      KafkaTopicFieldDescription kafkaTopicFieldDescription1 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "Cannot select from view %s%s", true);
      boolean boolean0 = kafkaTopicFieldDescription0.equals(kafkaTopicFieldDescription1);
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getName());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getDataFormat());
      assertTrue(kafkaTopicFieldDescription1.isHidden());
      assertFalse(boolean0);
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getComment());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getMapping());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("KHd%4,l]", booleanType0, "!!U:dL", "KHd%4,l]", "KHd%4,l]", "KHd%4,l]", false);
      KafkaTopicFieldDescription kafkaTopicFieldDescription1 = new KafkaTopicFieldDescription("KHd%4,l]", booleanType0, "!!U:dL", "!!U:dL", "!!U:dL", "KHd%4,l]", false);
      boolean boolean0 = kafkaTopicFieldDescription0.equals(kafkaTopicFieldDescription1);
      assertEquals("KHd%4,l]", kafkaTopicFieldDescription0.getComment());
      assertEquals("!!U:dL", kafkaTopicFieldDescription1.getComment());
      assertEquals("KHd%4,l]", kafkaTopicFieldDescription1.getName());
      assertFalse(kafkaTopicFieldDescription1.isHidden());
      assertFalse(boolean0);
      assertEquals("KHd%4,l]", kafkaTopicFieldDescription1.getFormatHint());
      assertEquals("!!U:dL", kafkaTopicFieldDescription0.getMapping());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "= 3uuOcmwAG %Y9!1", "= 3uuOcmwAG %Y9!1", "38^*3$", true);
      KafkaTopicFieldDescription kafkaTopicFieldDescription1 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "38^*3$", "= 3uuOcmwAG %Y9!1", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", true);
      boolean boolean0 = kafkaTopicFieldDescription0.equals(kafkaTopicFieldDescription1);
      assertEquals("38^*3$", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("= 3uuOcmwAG %Y9!1", kafkaTopicFieldDescription1.getComment());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getDataFormat());
      assertTrue(kafkaTopicFieldDescription1.isHidden());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription0.getName());
      assertEquals("38^*3$", kafkaTopicFieldDescription1.getMapping());
      assertEquals("= 3uuOcmwAG %Y9!1", kafkaTopicFieldDescription0.getDataFormat());
      assertFalse(boolean0);
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", false);
      KafkaTopicFieldDescription kafkaTopicFieldDescription1 = new KafkaTopicFieldDescription("KafkaTopicFieldDescription{name=%}4Z3U`X}ou4|2SE, type=boolean, mapping=%}4Z3U`X}ou4|2SE, dataFormat=%}4Z3U`X}ou4|2SE, formatHint=%}4Z3U`X}ou4|2SE, hidden=false}", booleanType0, (String) null, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", (String) null, true);
      boolean boolean0 = kafkaTopicFieldDescription0.equals(kafkaTopicFieldDescription1);
      assertEquals("KafkaTopicFieldDescription{name=%}4Z3U`X}ou4|2SE, type=boolean, mapping=%}4Z3U`X}ou4|2SE, dataFormat=%}4Z3U`X}ou4|2SE, formatHint=%}4Z3U`X}ou4|2SE, hidden=false}", kafkaTopicFieldDescription1.getName());
      assertFalse(boolean0);
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getDataFormat());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getComment());
      assertTrue(kafkaTopicFieldDescription1.isHidden());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("A]v}ykM0", varcharType0, "A]v}ykM0", "", "eSKL.?6JWjM", "^Cg8VBCQyC:e^H", true);
      boolean boolean0 = kafkaTopicFieldDescription0.equals("^Cg8VBCQyC:e^H");
      assertFalse(boolean0);
      assertEquals("eSKL.?6JWjM", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("", kafkaTopicFieldDescription0.getComment());
      assertEquals("A]v}ykM0", kafkaTopicFieldDescription0.getMapping());
      assertEquals("^Cg8VBCQyC:e^H", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("A]v}ykM0", kafkaTopicFieldDescription0.getName());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", false);
      boolean boolean0 = kafkaTopicFieldDescription0.equals((Object) null);
      assertFalse(kafkaTopicFieldDescription0.isHidden());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "38^*O3$", false);
      boolean boolean0 = kafkaTopicFieldDescription0.equals(kafkaTopicFieldDescription0);
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription0.getDataFormat());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription0.getName());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription0.getMapping());
      assertEquals("38^*O3$", kafkaTopicFieldDescription0.getFormatHint());
      assertTrue(boolean0);
      assertFalse(kafkaTopicFieldDescription0.isHidden());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription0.getComment());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "38^*O3$", false);
      KafkaTopicFieldDescription kafkaTopicFieldDescription1 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "38^*O3$", true);
      boolean boolean0 = kafkaTopicFieldDescription0.equals(kafkaTopicFieldDescription1);
      assertFalse(boolean0);
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getDataFormat());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getName());
      assertEquals("38^*O3$", kafkaTopicFieldDescription1.getFormatHint());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getMapping());
      assertTrue(kafkaTopicFieldDescription1.isHidden());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription1.getComment());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = HyperLogLogType.HYPER_LOG_LOG;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = null;
      try {
        kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription((String) null, hyperLogLogType0, ".+#q#}.e#!L3 Q`?f8T", "", "BNM{/{$AVVT'EckU+", "'EXTRACT'", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is null or is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("%}4Z3U`X}ou4|2SE", booleanType0, "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "%}4Z3U`X}ou4|2SE", "38^*O3$", false);
      ColumnMetadata columnMetadata0 = kafkaTopicFieldDescription0.getColumnMetadata();
      assertEquals("38^*O3$", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription0.getMapping());
      assertEquals("%}4Z3U`X}ou4|2SE", columnMetadata0.getComment());
      assertEquals("%}4Z3U`X}ou4|2SE", kafkaTopicFieldDescription0.getDataFormat());
      assertFalse(columnMetadata0.isHidden());
      assertEquals("%}4z3u`x}ou4|2se", columnMetadata0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", varcharType0, "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", true);
      String string0 = kafkaTopicFieldDescription0.toString();
      assertEquals("KafkaTopicFieldDescription{name=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, type=varchar, mapping=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, dataFormat=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, formatHint=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, hidden=true}", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", varcharType0, "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", true);
      kafkaTopicFieldDescription0.hashCode();
      assertTrue(kafkaTopicFieldDescription0.isHidden());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("A]v}ykM0", varcharType0, "A]v}ykM0", "", "eSKL.?6JWjM", "^Cg8VBCQyC:e^H", true);
      String string0 = kafkaTopicFieldDescription0.getComment();
      assertEquals("^Cg8VBCQyC:e^H", kafkaTopicFieldDescription0.getFormatHint());
      assertEquals("A]v}ykM0", kafkaTopicFieldDescription0.getMapping());
      assertEquals("A]v}ykM0", kafkaTopicFieldDescription0.getName());
      assertTrue(kafkaTopicFieldDescription0.isHidden());
      assertEquals("", string0);
      assertEquals("eSKL.?6JWjM", kafkaTopicFieldDescription0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      KafkaTopicFieldDescription kafkaTopicFieldDescription0 = new KafkaTopicFieldDescription("org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", varcharType0, "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", "org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener", true);
      KafkaColumnHandle kafkaColumnHandle0 = kafkaTopicFieldDescription0.getColumnHandle("KafkaTopicFieldDescription{name=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, type=varchar, mapping=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, dataFormat=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, formatHint=org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener, hidden=true}", true, 2147483646);
      assertEquals(2147483646, kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
  }
}
