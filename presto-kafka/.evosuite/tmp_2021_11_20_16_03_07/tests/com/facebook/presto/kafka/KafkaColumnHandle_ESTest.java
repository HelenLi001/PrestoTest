/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 00:11:38 GMT 2021
 */

package com.facebook.presto.kafka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.BooleanType;
import com.facebook.presto.common.type.CharType;
import com.facebook.presto.common.type.DateType;
import com.facebook.presto.common.type.DecimalType;
import com.facebook.presto.common.type.DoubleType;
import com.facebook.presto.common.type.FunctionType;
import com.facebook.presto.common.type.IntegerType;
import com.facebook.presto.common.type.JsonType;
import com.facebook.presto.common.type.P4HyperLogLogType;
import com.facebook.presto.common.type.RowType;
import com.facebook.presto.common.type.TimestampType;
import com.facebook.presto.common.type.TimestampWithTimeZoneType;
import com.facebook.presto.common.type.TinyintType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeSignature;
import com.facebook.presto.common.type.UnknownType;
import com.facebook.presto.common.type.VarbinaryType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.kafka.KafkaColumnHandle;
import com.facebook.presto.spi.ColumnMetadata;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaColumnHandle_ESTest extends KafkaColumnHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("KEY", 1365, "", varcharType0, (String) null, "", (String) null, false, false, false);
      boolean boolean0 = kafkaColumnHandle0.isKeyCodec();
      assertEquals(1365, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("KEY", kafkaColumnHandle0.getConnectorId());
      assertEquals("", kafkaColumnHandle0.getDataFormat());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(boolean0);
      assertFalse(kafkaColumnHandle0.isHidden());
      assertEquals("", kafkaColumnHandle0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      BooleanType booleanType0 = BooleanType.BOOLEAN;
      FunctionType functionType0 = new FunctionType(linkedList0, booleanType0);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 0, "", functionType0, "", "", "", true, true, true);
      boolean boolean0 = kafkaColumnHandle0.isInternal();
      assertTrue(kafkaColumnHandle0.isHidden());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertTrue(boolean0);
      assertEquals(0, kafkaColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", true, true, true);
      boolean boolean0 = kafkaColumnHandle0.isHidden();
      assertTrue(kafkaColumnHandle0.isInternal());
      assertTrue(boolean0);
      assertEquals(186, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("~#G2PGYfm(<m'e`", 0, "~#G2PGYfm(<m'e`", p4HyperLogLogType0, "~#G2PGYfm(<m'e`", "", "GRAPHVIZ", true, true, true);
      int int0 = kafkaColumnHandle0.getOrdinalPosition();
      assertEquals(0, int0);
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals("", kafkaColumnHandle0.getDataFormat());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertEquals("~#G2PGYfm(<m'e`", kafkaColumnHandle0.getMapping());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertEquals("GRAPHVIZ", kafkaColumnHandle0.getFormatHint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonType jsonType0 = JsonType.JSON;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("t32TTJHsKIBVG!@", (-93), "t32TTJHsKIBVG!@", jsonType0, (String) null, "@H2:Y%'|d", "t32TTJHsKIBVG!@", false, false, false);
      int int0 = kafkaColumnHandle0.getOrdinalPosition();
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertEquals("t32TTJHsKIBVG!@", kafkaColumnHandle0.getFormatHint());
      assertEquals((-93), int0);
      assertEquals("@H2:Y%'|d", kafkaColumnHandle0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharType charType0 = CharType.createCharType(852);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("_heb,", 852, "_heb,", charType0, "_heb,", "", "", false, false, true);
      kafkaColumnHandle0.getName();
      assertEquals(852, kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertEquals("_heb,", kafkaColumnHandle0.getMapping());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertEquals("", kafkaColumnHandle0.getDataFormat());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertTrue(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonType jsonType0 = JsonType.JSON;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("t32TTJHsKIBVG!@", (-93), "t32TTJHsKIBVG!@", jsonType0, (String) null, "@H2:Y%'|d", "t32TTJHsKIBVG!@", false, false, false);
      String string0 = kafkaColumnHandle0.getMapping();
      assertEquals("@H2:Y%'|d", kafkaColumnHandle0.getDataFormat());
      assertNull(string0);
      assertEquals((-93), kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("t32TTJHsKIBVG!@", kafkaColumnHandle0.getFormatHint());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("unknown", 427, "\"h@uw~f+k0%lM\"(wp", unknownType0, "", "Xxm(c\"&$(U\".\u0005,", "", false, true, false);
      String string0 = kafkaColumnHandle0.getMapping();
      assertEquals(427, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("", string0);
      assertEquals("Xxm(c\"&$(U\".\u0005,", kafkaColumnHandle0.getDataFormat());
      assertEquals("unknown", kafkaColumnHandle0.getConnectorId());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals("\"h@uw~f+k0%lM\"(wp", kafkaColumnHandle0.getName());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateType dateType0 = DateType.DATE;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 1496, "", dateType0, (String) null, "", (String) null, false, false, false);
      String string0 = kafkaColumnHandle0.getFormatHint();
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertNull(string0);
      assertFalse(kafkaColumnHandle0.isHidden());
      assertEquals(1496, kafkaColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      kafkaColumnHandle0.getFormatHint();
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertEquals(186, kafkaColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleType doubleType0 = DoubleType.DOUBLE;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("hidden", 516, "", doubleType0, "ordinalPosition", (String) null, "", false, false, true);
      String string0 = kafkaColumnHandle0.getDataFormat();
      assertEquals("", kafkaColumnHandle0.getName());
      assertEquals("hidden", kafkaColumnHandle0.getConnectorId());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals("ordinalPosition", kafkaColumnHandle0.getMapping());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertNull(string0);
      assertEquals(516, kafkaColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharType charType0 = CharType.createCharType(852);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("_heb,", 852, "_heb,", charType0, "_heb,", "", "", false, false, true);
      String string0 = kafkaColumnHandle0.getDataFormat();
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertEquals("", string0);
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertEquals(852, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("_heb,", kafkaColumnHandle0.getMapping());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 120, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", true, true, true);
      kafkaColumnHandle0.getConnectorId();
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals(120, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertTrue(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecimalType decimalType0 = DecimalType.createDecimalType(3);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("e", 3, "e", decimalType0, "umge{iL-mEk#%", "umge{iL-mEk#%", "name", true, true, true);
      ColumnMetadata columnMetadata0 = kafkaColumnHandle0.getColumnMetadata();
      assertEquals("umge{iL-mEk#%", kafkaColumnHandle0.getMapping());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertTrue(columnMetadata0.isHidden());
      assertEquals("name", kafkaColumnHandle0.getFormatHint());
      assertEquals(3, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertEquals("umge{iL-mEk#%", kafkaColumnHandle0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DecimalType decimalType0 = DecimalType.createDecimalType(3);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("e", 3, "e", decimalType0, "umge{iL-mEk#%", "umge{iL-mEk#%", "name", true, true, true);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("umge{iL-mEk#%", 0, "Invalid address: %s", decimalType0, "", "Invalid address: %s", (String) null, true, true, false);
      int int0 = kafkaColumnHandle0.compareTo(kafkaColumnHandle1);
      assertTrue(kafkaColumnHandle1.isKeyCodec());
      assertEquals("umge{iL-mEk#%", kafkaColumnHandle1.getConnectorId());
      assertEquals("umge{iL-mEk#%", kafkaColumnHandle0.getDataFormat());
      assertEquals("Invalid address: %s", kafkaColumnHandle1.getDataFormat());
      assertEquals(3, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle1.isHidden());
      assertEquals(1, int0);
      assertFalse(kafkaColumnHandle1.isInternal());
      assertEquals("name", kafkaColumnHandle0.getFormatHint());
      assertEquals("", kafkaColumnHandle1.getMapping());
      assertEquals("Invalid address: %s", kafkaColumnHandle1.getName());
      assertEquals("umge{iL-mEk#%", kafkaColumnHandle0.getMapping());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharType charType0 = CharType.createCharType(852);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("_heb,", 852, "_heb,", charType0, "_heb,", "", "", false, false, true);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle(",;=|5gRW(3b'.YNtN", 65536, "", charType0, "wp$6", "wp$6", "", false, true, true);
      int int0 = kafkaColumnHandle0.compareTo(kafkaColumnHandle1);
      assertEquals("wp$6", kafkaColumnHandle1.getMapping());
      assertEquals("_heb,", kafkaColumnHandle0.getMapping());
      assertEquals(",;=|5gRW(3b'.YNtN", kafkaColumnHandle1.getConnectorId());
      assertEquals(65536, kafkaColumnHandle1.getOrdinalPosition());
      assertEquals("", kafkaColumnHandle1.getFormatHint());
      assertEquals("", kafkaColumnHandle1.getName());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertTrue(kafkaColumnHandle1.isHidden());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      assertEquals((-1), int0);
      assertEquals("wp$6", kafkaColumnHandle1.getDataFormat());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertEquals("", kafkaColumnHandle0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<RowType.Field> linkedList0 = new LinkedList<RowType.Field>();
      RowType rowType0 = RowType.createWithTypeSignature((TypeSignature) null, linkedList0);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("Q-;kGrK8;z1%&B", 628, "b[fpM;li?2w3u;&$", rowType0, "Q-;kGrK8;z1%&B", "mapping", "b[fpM;li?2w3u;&$", false, true, false);
      // Undeclared exception!
      try { 
        kafkaColumnHandle0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.AbstractType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 0, "", varbinaryType0, "", "=a~3T?'\"", "os*!%oe* ", true, false, false);
      // Undeclared exception!
      try { 
        kafkaColumnHandle0.getColumnMetadata();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("formatHint", 0, "formatHint", p4HyperLogLogType0, "formatHint", "ordinalPosition", "formatHint", false, false, false);
      // Undeclared exception!
      try { 
        kafkaColumnHandle0.compareTo((KafkaColumnHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kafka.KafkaColumnHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KafkaColumnHandle kafkaColumnHandle0 = null;
      try {
        kafkaColumnHandle0 = new KafkaColumnHandle("w", 0, "com.google.common.hash.BloomFilter$SerialForm", (Type) null, "ordinalPosition", (String) null, (String) null, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharType charType0 = CharType.createCharType(852);
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("_heb,", 852, "_heb,", charType0, "_heb,", "", "", false, false, true);
      int int0 = kafkaColumnHandle0.getOrdinalPosition();
      assertEquals(852, int0);
      assertFalse(kafkaColumnHandle0.isHidden());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertEquals("_heb,", kafkaColumnHandle0.getMapping());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals("", kafkaColumnHandle0.getDataFormat());
      assertTrue(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle(")", 186, ")", integerType0, ")", ")", ")", false, false, false);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle(")", 186, ")", integerType0, ")", ")", ")", false, true, false);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertTrue(kafkaColumnHandle1.isHidden());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      assertFalse(boolean0);
      assertFalse(kafkaColumnHandle1.isInternal());
      assertEquals(186, kafkaColumnHandle1.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", true, true, true);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, true, false);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertFalse(boolean0);
      assertFalse(kafkaColumnHandle1.isInternal());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      assertTrue(kafkaColumnHandle1.isHidden());
      assertEquals(186, kafkaColumnHandle1.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", (String) null, false, false, false);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, true, false);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      assertFalse(boolean0);
      assertTrue(kafkaColumnHandle1.isHidden());
      assertEquals(186, kafkaColumnHandle1.getOrdinalPosition());
      assertFalse(kafkaColumnHandle1.isInternal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", (String) null, "com.facebook.presto.common.InvalidFunctionArgumentException", false, true, false);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertTrue(kafkaColumnHandle1.isHidden());
      assertFalse(kafkaColumnHandle1.isInternal());
      assertFalse(boolean0);
      assertEquals(186, kafkaColumnHandle1.getOrdinalPosition());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 176, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "j'BV", true, true, true);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 176, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "j'BV", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", true, true, true);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertEquals("j'BV", kafkaColumnHandle1.getMapping());
      assertEquals("com.facebook.presto.common.InvalidFunctionArgumentException", kafkaColumnHandle1.getDataFormat());
      assertTrue(kafkaColumnHandle1.isKeyCodec());
      assertFalse(boolean0);
      assertTrue(kafkaColumnHandle1.isHidden());
      assertEquals("com.facebook.presto.common.InvalidFunctionArgumentException", kafkaColumnHandle0.getConnectorId());
      assertTrue(kafkaColumnHandle1.isInternal());
      assertEquals("com.facebook.presto.common.InvalidFunctionArgumentException", kafkaColumnHandle0.getDataFormat());
      assertEquals("com.facebook.presto.common.InvalidFunctionArgumentException", kafkaColumnHandle0.getName());
      assertEquals("j'BV", kafkaColumnHandle0.getFormatHint());
      assertEquals(176, kafkaColumnHandle1.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", (-973), "", timestampType0, "", "", "", true, true, true);
      TimestampWithTimeZoneType timestampWithTimeZoneType0 = TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("", (-973), "", timestampWithTimeZoneType0, "", "", "", true, true, true);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertEquals((-973), kafkaColumnHandle1.getOrdinalPosition());
      assertTrue(kafkaColumnHandle1.isHidden());
      assertTrue(kafkaColumnHandle1.isKeyCodec());
      assertTrue(kafkaColumnHandle1.isInternal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertEquals(186, kafkaColumnHandle1.getOrdinalPosition());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      assertTrue(boolean0);
      assertFalse(kafkaColumnHandle1.isInternal());
      assertFalse(kafkaColumnHandle1.isHidden());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", (-95), "", integerType0, (String) null, "com.facebook.presto.common.InvalidFunctionArgumentException", "_8UyG`E[$", false, true, true);
      boolean boolean0 = kafkaColumnHandle0.equals(kafkaColumnHandle1);
      assertEquals("com.facebook.presto.common.InvalidFunctionArgumentException", kafkaColumnHandle1.getDataFormat());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      assertTrue(kafkaColumnHandle1.isHidden());
      assertTrue(kafkaColumnHandle1.isInternal());
      assertFalse(boolean0);
      assertEquals("com.facebook.presto.common.InvalidFunctionArgumentException", kafkaColumnHandle1.getConnectorId());
      assertEquals("_8UyG`E[$", kafkaColumnHandle1.getFormatHint());
      assertEquals((-95), kafkaColumnHandle1.getOrdinalPosition());
      assertEquals("", kafkaColumnHandle1.getName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonType jsonType0 = JsonType.JSON;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("t32TJsKIBV!@", (-63), "t32TJsKIBV!@", jsonType0, "t32TJsKIBV!@", "t32TJsKIBV!@", "t32TJsKIBV!@", false, false, false);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", (-63), "KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", jsonType0, "KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", "KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", "t32TJsKIBV!@", false, false, false);
      boolean boolean0 = kafkaColumnHandle0.equals(kafkaColumnHandle1);
      assertEquals("KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", kafkaColumnHandle1.getConnectorId());
      assertEquals("KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", kafkaColumnHandle1.getName());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      assertEquals((-63), kafkaColumnHandle1.getOrdinalPosition());
      assertFalse(kafkaColumnHandle1.isHidden());
      assertEquals("KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", kafkaColumnHandle1.getMapping());
      assertFalse(boolean0);
      assertEquals("t32TJsKIBV!@", kafkaColumnHandle1.getFormatHint());
      assertFalse(kafkaColumnHandle1.isInternal());
      assertEquals("KafkaColumnHandle{connectorId=t32TJsKIBV!@, ordinalPosition=-63, name=t32TJsKIBV!@, type=json, mapping=t32TJsKIBV!@, dataFormat=t32TJsKIBV!@, formatHint=t32TJsKIBV!@, keyCodec=false, hidden=false, internal=false}", kafkaColumnHandle1.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      boolean boolean0 = kafkaColumnHandle0.equals(integerType0);
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals(186, kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("&Sb#0", 611, "&Sb#0", varcharType0, "&Sb#0", "", "6w;F\"SkUGNE0VTC*Br", false, false, false);
      boolean boolean0 = kafkaColumnHandle0.equals((Object) null);
      assertEquals("&Sb#0", kafkaColumnHandle0.getConnectorId());
      assertFalse(boolean0);
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals("&Sb#0", kafkaColumnHandle0.getMapping());
      assertEquals("&Sb#0", kafkaColumnHandle0.getName());
      assertEquals("", kafkaColumnHandle0.getDataFormat());
      assertEquals("6w;F\"SkUGNE0VTC*Br", kafkaColumnHandle0.getFormatHint());
      assertEquals(611, kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      boolean boolean0 = kafkaColumnHandle0.equals(kafkaColumnHandle0);
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isHidden());
      assertTrue(boolean0);
      assertEquals(186, kafkaColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 4, "", unknownType0, "", "unknown", "", true, true, true);
      KafkaColumnHandle kafkaColumnHandle1 = new KafkaColumnHandle("", 4, "unknown", unknownType0, "unknown", "unknown", "", true, true, false);
      boolean boolean0 = kafkaColumnHandle1.equals(kafkaColumnHandle0);
      assertTrue(kafkaColumnHandle1.isKeyCodec());
      assertEquals("", kafkaColumnHandle1.getConnectorId());
      assertFalse(boolean0);
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertEquals("unknown", kafkaColumnHandle1.getMapping());
      assertFalse(kafkaColumnHandle1.isInternal());
      assertEquals("unknown", kafkaColumnHandle0.getDataFormat());
      assertTrue(kafkaColumnHandle1.isHidden());
      assertEquals("", kafkaColumnHandle0.getName());
      assertEquals("", kafkaColumnHandle1.getFormatHint());
      assertEquals("unknown", kafkaColumnHandle1.getName());
      assertEquals(4, kafkaColumnHandle1.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      ColumnMetadata columnMetadata0 = kafkaColumnHandle0.getColumnMetadata();
      assertFalse(columnMetadata0.isHidden());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertEquals(186, kafkaColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TinyintType tinyintType0 = TinyintType.TINYINT;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("y b/7cl'A uO(j@@", 1641, "y b/7cl'A uO(j@@", tinyintType0, "y b/7cl'A uO(j@@", "y b/7cl'A uO(j@@", "y b/7cl'A uO(j@@", true, true, true);
      kafkaColumnHandle0.getDataFormat();
      assertTrue(kafkaColumnHandle0.isHidden());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertEquals(1641, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 4, "", unknownType0, "", "unknown", "", true, true, true);
      String string0 = kafkaColumnHandle0.getConnectorId();
      assertTrue(kafkaColumnHandle0.isInternal());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertEquals("", kafkaColumnHandle0.getName());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertEquals(4, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals("", string0);
      assertEquals("unknown", kafkaColumnHandle0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 4, "", unknownType0, "", "unknown", "", true, true, true);
      kafkaColumnHandle0.hashCode();
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertEquals(4, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertEquals("", kafkaColumnHandle0.getConnectorId());
      assertEquals("unknown", kafkaColumnHandle0.getDataFormat());
      assertEquals("", kafkaColumnHandle0.getName());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertTrue(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 4, "", unknownType0, "", "unknown", "", true, true, true);
      boolean boolean0 = kafkaColumnHandle0.isKeyCodec();
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals(4, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertEquals("unknown", kafkaColumnHandle0.getDataFormat());
      assertTrue(boolean0);
      assertTrue(kafkaColumnHandle0.isInternal());
      assertEquals("", kafkaColumnHandle0.getName());
      assertEquals("", kafkaColumnHandle0.getConnectorId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      kafkaColumnHandle0.getType();
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals(186, kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 4, "", unknownType0, "", "unknown", "", true, true, true);
      String string0 = kafkaColumnHandle0.getFormatHint();
      assertEquals("", string0);
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals(4, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertEquals("unknown", kafkaColumnHandle0.getDataFormat());
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertEquals("", kafkaColumnHandle0.getName());
      assertEquals("", kafkaColumnHandle0.getConnectorId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("formatHint", 0, "formatHint", p4HyperLogLogType0, "formatHint", "ordinalPosition", "formatHint", false, false, false);
      String string0 = kafkaColumnHandle0.toString();
      assertEquals("KafkaColumnHandle{connectorId=formatHint, ordinalPosition=0, name=formatHint, type=P4HyperLogLog, mapping=formatHint, dataFormat=ordinalPosition, formatHint=formatHint, keyCodec=false, hidden=false, internal=false}", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 4, "", unknownType0, "", "unknown", "", true, true, true);
      kafkaColumnHandle0.compareTo(kafkaColumnHandle0);
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals("unknown", kafkaColumnHandle0.getDataFormat());
      assertEquals("", kafkaColumnHandle0.getConnectorId());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertEquals(4, kafkaColumnHandle0.getOrdinalPosition());
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertEquals("", kafkaColumnHandle0.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("&Sb#0", 611, "&Sb#0", varcharType0, "&Sb#0", "", "6w;F\"SkUGNE0VTC*Br", false, false, false);
      boolean boolean0 = kafkaColumnHandle0.isHidden();
      assertFalse(boolean0);
      assertEquals("6w;F\"SkUGNE0VTC*Br", kafkaColumnHandle0.getFormatHint());
      assertEquals("&Sb#0", kafkaColumnHandle0.getConnectorId());
      assertEquals("&Sb#0", kafkaColumnHandle0.getMapping());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals("", kafkaColumnHandle0.getDataFormat());
      assertEquals("&Sb#0", kafkaColumnHandle0.getName());
      assertEquals(611, kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonType jsonType0 = JsonType.JSON;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("t32TJsKIBV!@", (-63), "t32TJsKIBV!@", jsonType0, "t32TJsKIBV!@", "t32TJsKIBV!@", "t32TJsKIBV!@", false, false, false);
      kafkaColumnHandle0.getMapping();
      assertEquals((-63), kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(kafkaColumnHandle0.isInternal());
      assertFalse(kafkaColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnknownType unknownType0 = UnknownType.UNKNOWN;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("", 4, "", unknownType0, "", "unknown", "", true, true, true);
      String string0 = kafkaColumnHandle0.getName();
      assertEquals(4, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isHidden());
      assertEquals("", kafkaColumnHandle0.getMapping());
      assertEquals("", string0);
      assertEquals("", kafkaColumnHandle0.getFormatHint());
      assertEquals("", kafkaColumnHandle0.getConnectorId());
      assertTrue(kafkaColumnHandle0.isInternal());
      assertTrue(kafkaColumnHandle0.isKeyCodec());
      assertEquals("unknown", kafkaColumnHandle0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      KafkaColumnHandle kafkaColumnHandle0 = new KafkaColumnHandle("com.facebook.presto.common.InvalidFunctionArgumentException", 186, "com.facebook.presto.common.InvalidFunctionArgumentException", integerType0, "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", "com.facebook.presto.common.InvalidFunctionArgumentException", false, false, false);
      boolean boolean0 = kafkaColumnHandle0.isInternal();
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertFalse(boolean0);
      assertEquals(186, kafkaColumnHandle0.getOrdinalPosition());
      assertFalse(kafkaColumnHandle0.isHidden());
  }
}
