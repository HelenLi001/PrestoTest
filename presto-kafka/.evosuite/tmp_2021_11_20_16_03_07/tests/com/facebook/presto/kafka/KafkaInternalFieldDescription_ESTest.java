/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 00:25:08 GMT 2021
 */

package com.facebook.presto.kafka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.kafka.KafkaColumnHandle;
import com.facebook.presto.kafka.KafkaInternalFieldDescription;
import com.facebook.presto.spi.ColumnMetadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaInternalFieldDescription_ESTest extends KafkaInternalFieldDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.PARTITION_OFFSET_FIELD;
      KafkaColumnHandle kafkaColumnHandle0 = kafkaInternalFieldDescription0.getColumnHandle("Cannot get size of unbounded VARCHAR.", (-233), true);
      assertEquals((-233), kafkaColumnHandle0.getOrdinalPosition());
      
      KafkaInternalFieldDescription kafkaInternalFieldDescription1 = KafkaInternalFieldDescription.forColumnName("_partition_offset");
      KafkaColumnHandle kafkaColumnHandle1 = kafkaInternalFieldDescription1.getColumnHandle("_partition_offset", 0, true);
      assertTrue(kafkaColumnHandle1.isInternal());
      assertFalse(kafkaColumnHandle1.isKeyCodec());
      
      ColumnMetadata columnMetadata0 = kafkaInternalFieldDescription1.getColumnMetadata(true);
      assertTrue(columnMetadata0.isHidden());
      
      KafkaInternalFieldDescription kafkaInternalFieldDescription2 = KafkaInternalFieldDescription.forColumnName("_partition_id");
      assertNotSame(kafkaInternalFieldDescription2, kafkaInternalFieldDescription1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KafkaInternalFieldDescription[] kafkaInternalFieldDescriptionArray0 = KafkaInternalFieldDescription.values();
      assertEquals(9, kafkaInternalFieldDescriptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.valueOf("KEY_FIELD");
      assertEquals(KafkaInternalFieldDescription.KEY_FIELD, kafkaInternalFieldDescription0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.PARTITION_OFFSET_FIELD;
      ColumnMetadata columnMetadata0 = kafkaInternalFieldDescription0.getColumnMetadata(false);
      assertFalse(columnMetadata0.isHidden());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.MESSAGE_FIELD;
      KafkaColumnHandle kafkaColumnHandle0 = kafkaInternalFieldDescription0.getColumnHandle("", 0, false);
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals(0, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.PARTITION_ID_FIELD;
      KafkaColumnHandle kafkaColumnHandle0 = kafkaInternalFieldDescription0.getColumnHandle("DI@b7~0~S", 115, true);
      assertFalse(kafkaColumnHandle0.isKeyCodec());
      assertEquals(115, kafkaColumnHandle0.getOrdinalPosition());
      assertTrue(kafkaColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.OFFSET_TIMESTAMP_FIELD;
      // Undeclared exception!
      try { 
        kafkaInternalFieldDescription0.getColumnHandle((String) null, 5, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectorId is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.KEY_CORRUPT_FIELD;
      Type type0 = kafkaInternalFieldDescription0.getType();
      assertTrue(type0.isOrderable());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KafkaInternalFieldDescription kafkaInternalFieldDescription0 = KafkaInternalFieldDescription.PARTITION_OFFSET_FIELD;
      String string0 = kafkaInternalFieldDescription0.getColumnName();
      assertEquals("_partition_offset", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        KafkaInternalFieldDescription.forColumnName(" 8r>IuDP}DFS +~C;95");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown internal column name  8r>IuDP}DFS +~C;95
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
