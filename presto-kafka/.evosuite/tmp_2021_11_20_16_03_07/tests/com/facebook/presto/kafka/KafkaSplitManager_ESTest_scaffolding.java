/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Nov 21 00:17:33 GMT 2021
 */

package com.facebook.presto.kafka;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class KafkaSplitManager_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.facebook.presto.kafka.KafkaSplitManager"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/mnt/c/Users/Helen/Documents/DataScience18668/GroupProject/project/presto/presto-kafka"); 
    java.lang.System.setProperty("user.home", "/home/helen"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "helen"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(KafkaSplitManager_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.kafka.common.network.Selectable",
      "com.facebook.presto.spi.WarningCollector",
      "com.facebook.presto.kafka.KafkaTableHandle",
      "org.apache.kafka.clients.MetadataCache",
      "org.apache.kafka.common.requests.ListGroupsResponse",
      "org.apache.kafka.clients.MetadataCache$PartitionInfoAndEpoch",
      "org.apache.kafka.common.KafkaException",
      "org.apache.kafka.common.network.Authenticator",
      "org.apache.kafka.common.requests.HeartbeatResponse",
      "org.apache.kafka.common.metrics.Sensor$RecordingLevel",
      "org.apache.kafka.common.network.Send",
      "com.facebook.presto.spi.WarningCollector$1",
      "com.facebook.presto.common.QualifiedObjectName",
      "com.facebook.drift.annotations.ThriftEnum",
      "org.apache.kafka.clients.CommonClientConfigs",
      "org.apache.kafka.common.metrics.Sensor",
      "com.facebook.presto.common.type.TimeZoneKey$1",
      "com.facebook.presto.common.block.UncheckedBlock",
      "com.facebook.presto.common.function.SqlFunctionProperties",
      "com.facebook.presto.spi.HostAddress",
      "org.apache.kafka.common.metrics.Measurable",
      "org.apache.kafka.common.config.ConfigDef$Width",
      "org.apache.kafka.common.metrics.Metrics",
      "org.apache.kafka.common.requests.DescribeGroupsResponse",
      "org.apache.kafka.common.protocol.Errors",
      "com.facebook.presto.decoder.DecoderColumnHandle",
      "org.apache.kafka.common.config.ConfigDef$Validator",
      "org.apache.kafka.common.requests.MetadataRequest$Builder",
      "org.apache.kafka.common.Node",
      "com.facebook.presto.spi.function.RoutineCharacteristics$Determinism",
      "org.apache.kafka.common.errors.AuthenticationException",
      "org.apache.kafka.common.requests.AbstractResponse",
      "com.facebook.presto.common.type.TypeSignatureParameter",
      "com.facebook.presto.spi.ErrorCode",
      "org.apache.kafka.clients.ClientDnsLookup",
      "org.apache.kafka.common.requests.DescribeAclsResponse",
      "org.apache.kafka.clients.consumer.internals.ConsumerMetadata",
      "org.apache.kafka.common.requests.AlterReplicaLogDirsResponse",
      "org.apache.kafka.common.protocol.types.Type",
      "com.google.common.collect.UnmodifiableListIterator",
      "org.apache.kafka.common.config.ConfigDef$ValidString",
      "com.facebook.presto.spi.PrestoWarning",
      "com.facebook.presto.spi.function.SqlFunction",
      "org.apache.kafka.common.requests.ProduceResponse",
      "com.facebook.presto.kafka.KafkaConnectorId",
      "com.facebook.presto.spi.function.RoutineCharacteristics",
      "org.apache.kafka.common.message.MetadataRequestData$MetadataRequestTopic",
      "org.apache.kafka.common.requests.OffsetCommitResponse",
      "org.apache.kafka.common.protocol.Message",
      "org.apache.kafka.common.requests.TxnOffsetCommitResponse",
      "org.apache.kafka.common.protocol.types.Struct",
      "org.apache.kafka.common.requests.AddOffsetsToTxnResponse",
      "com.facebook.presto.spi.function.SqlFunctionId",
      "com.facebook.presto.spi.SchemaTablePrefix",
      "org.apache.kafka.clients.RequestCompletionHandler",
      "com.facebook.presto.spi.function.Signature",
      "org.apache.kafka.common.requests.IncrementalAlterConfigsResponse",
      "com.google.common.base.Preconditions",
      "org.apache.kafka.common.config.ConfigDef$Range",
      "org.apache.kafka.common.metrics.Quota",
      "com.google.common.collect.ImmutableCollection",
      "org.apache.kafka.common.requests.AbstractRequest",
      "org.apache.kafka.common.security.auth.SecurityProtocol",
      "org.apache.kafka.common.requests.AddPartitionsToTxnResponse",
      "io.airlift.units.Duration",
      "com.facebook.presto.kafka.KafkaConnectorConfig",
      "org.apache.kafka.common.protocol.types.Type$12",
      "org.apache.kafka.common.protocol.types.Type$11",
      "com.facebook.presto.spi.SchemaTableName",
      "org.apache.kafka.common.protocol.types.Type$13",
      "org.apache.kafka.common.metrics.Stat",
      "org.apache.kafka.common.protocol.types.Type$10",
      "org.apache.kafka.clients.KafkaClient",
      "com.facebook.presto.common.type.TypeSignatureBase",
      "com.facebook.presto.kafka.KafkaSplitManager",
      "com.google.common.collect.ImmutableCollection$Builder",
      "org.apache.kafka.clients.consumer.Consumer",
      "org.apache.kafka.common.TopicPartition",
      "com.facebook.presto.kafka.KafkaConsumerManager",
      "org.apache.kafka.common.utils.Time",
      "org.apache.kafka.common.Configurable",
      "com.facebook.presto.spi.function.FunctionVersion",
      "org.apache.kafka.common.config.internals.BrokerSecurityConfigs",
      "org.apache.kafka.common.requests.CreateAclsResponse",
      "org.apache.kafka.common.internals.ClusterResourceListeners",
      "org.apache.kafka.common.requests.InitProducerIdResponse",
      "org.apache.kafka.common.requests.ElectPreferredLeadersResponse",
      "com.facebook.presto.common.function.SqlFunctionProperties$Builder",
      "org.apache.kafka.common.requests.AbstractRequest$Builder",
      "org.apache.kafka.common.header.Header",
      "org.apache.kafka.common.requests.CreatePartitionsResponse",
      "org.apache.kafka.clients.consumer.OffsetAndMetadata",
      "com.facebook.presto.spi.ErrorCodeSupplier",
      "org.apache.kafka.common.metrics.KafkaMetric",
      "org.apache.kafka.common.protocol.ApiMessage",
      "org.apache.kafka.common.protocol.types.Field",
      "org.apache.kafka.common.requests.OffsetsForLeaderEpochResponse",
      "org.apache.kafka.common.metrics.MetricValueProvider",
      "org.apache.kafka.common.metrics.CompoundStat",
      "org.apache.kafka.common.config.ConfigDef$3",
      "com.facebook.presto.spi.function.FunctionKind",
      "com.facebook.presto.spi.function.LongVariableConstraint",
      "org.apache.kafka.common.requests.DeleteAclsResponse",
      "com.facebook.presto.spi.ConnectorTableLayoutHandle",
      "org.apache.kafka.clients.Metadata",
      "com.facebook.presto.spi.ConnectorTableHandle",
      "com.facebook.presto.spi.function.RoutineCharacteristics$Builder",
      "org.apache.kafka.common.protocol.types.SchemaException",
      "org.apache.kafka.common.requests.DescribeConfigsResponse",
      "org.apache.kafka.common.requests.LeaveGroupResponse",
      "com.facebook.presto.common.type.TimeZoneNotSupportedException",
      "com.google.common.collect.ImmutableList",
      "org.apache.kafka.common.config.ConfigDef$ConfigKey",
      "org.apache.kafka.common.requests.SyncGroupResponse",
      "com.facebook.presto.spi.ColumnMetadata$Builder",
      "org.apache.kafka.common.config.SaslConfigs",
      "com.facebook.presto.common.type.Type",
      "com.facebook.presto.spi.ConnectorInsertTableHandle",
      "org.apache.kafka.common.protocol.types.Type$4",
      "org.apache.kafka.common.protocol.types.Type$5",
      "org.apache.kafka.common.errors.TimeoutException",
      "com.facebook.presto.spi.security.SelectedRole",
      "org.apache.kafka.common.protocol.types.Type$6",
      "com.facebook.presto.kafka.KafkaErrorCode",
      "org.apache.kafka.common.protocol.types.Type$7",
      "org.apache.kafka.clients.Metadata$LeaderAndEpoch",
      "org.apache.kafka.common.protocol.types.Type$8",
      "org.apache.kafka.common.requests.SaslAuthenticateResponse",
      "com.facebook.presto.spi.function.RoutineCharacteristics$NullCallClause",
      "org.apache.kafka.common.protocol.types.Type$9",
      "org.apache.kafka.common.requests.CreateTopicsResponse",
      "org.apache.kafka.common.requests.AlterConfigsResponse",
      "org.apache.kafka.common.requests.ResponseHeader",
      "org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignor",
      "org.apache.kafka.common.errors.AuthorizationException",
      "com.facebook.presto.kafka.KafkaSplit",
      "org.apache.kafka.common.config.ConfigException",
      "com.facebook.drift.annotations.ThriftStruct",
      "org.apache.kafka.common.config.ConfigDef$NonNullValidator",
      "com.facebook.presto.spi.function.FunctionHandle",
      "org.apache.kafka.common.errors.TopicAuthorizationException",
      "com.facebook.presto.common.CatalogSchemaName",
      "org.apache.kafka.common.protocol.types.Type$1",
      "org.apache.kafka.common.protocol.types.Type$2",
      "org.apache.kafka.common.requests.ExpireDelegationTokenResponse",
      "org.apache.kafka.common.utils.ImplicitLinkedHashCollection$Element",
      "org.apache.kafka.common.protocol.types.Type$3",
      "com.facebook.presto.spi.ConnectorSplitSource",
      "com.google.common.collect.ImmutableList$SubList",
      "com.facebook.presto.spi.ConnectorHandleResolver",
      "org.apache.kafka.common.requests.IsolationLevel",
      "com.facebook.presto.spi.function.SqlInvokedFunction",
      "org.apache.kafka.clients.consumer.ConsumerRecords",
      "com.facebook.presto.kafka.KafkaColumnHandle",
      "com.facebook.presto.spi.ErrorType",
      "com.facebook.presto.spi.connector.ConnectorTransactionHandle",
      "com.facebook.presto.common.type.TypeSignature",
      "com.google.common.collect.RegularImmutableList",
      "org.apache.kafka.common.Cluster",
      "org.apache.kafka.common.requests.ApiVersionsResponse",
      "org.apache.kafka.clients.consumer.OffsetCommitCallback",
      "org.apache.kafka.common.requests.FetchResponse",
      "org.apache.kafka.common.config.ConfigDef",
      "com.facebook.presto.common.block.BlockBuilder",
      "org.apache.kafka.common.errors.InvalidTopicException",
      "org.apache.kafka.clients.consumer.ConsumerConfig",
      "org.apache.kafka.common.PartitionInfo",
      "org.apache.kafka.common.requests.ListOffsetResponse",
      "org.apache.kafka.common.security.auth.PrincipalBuilder",
      "org.apache.kafka.common.requests.DeleteGroupsResponse",
      "com.facebook.presto.spi.ConnectorSession",
      "com.facebook.drift.annotations.ThriftIdlAnnotation",
      "org.apache.kafka.common.metrics.MeasurableStat",
      "org.apache.kafka.common.config.ConfigDef$Recommender",
      "io.airlift.units.MinDurationValidator",
      "com.facebook.presto.kafka.encoder.EncoderColumnHandle",
      "org.apache.kafka.clients.consumer.internals.PartitionAssignor$Assignment",
      "org.apache.kafka.common.config.ConfigDef$Type",
      "org.apache.kafka.common.metrics.MetricsReporter",
      "com.facebook.presto.spi.connector.ConnectorSplitManager$SplitSchedulingStrategy",
      "org.apache.kafka.common.requests.MetadataResponse",
      "org.apache.kafka.common.requests.AbstractRequestResponse",
      "org.apache.kafka.clients.consumer.KafkaConsumer",
      "com.facebook.presto.spi.function.RoutineCharacteristics$Language",
      "com.facebook.airlift.configuration.Config",
      "org.apache.kafka.common.config.types.Password",
      "org.apache.kafka.clients.Metadata$MetadataRequestAndVersion",
      "org.apache.kafka.common.errors.InvalidGroupIdException",
      "com.facebook.presto.spi.connector.ConnectorPartitionHandle",
      "org.apache.kafka.common.ClusterResource",
      "io.airlift.slice.Slice",
      "com.google.common.collect.ImmutableAsList",
      "org.apache.kafka.common.security.auth.DefaultPrincipalBuilder",
      "org.apache.kafka.common.annotation.InterfaceStability$Unstable",
      "com.google.common.collect.RegularImmutableAsList",
      "org.apache.kafka.common.requests.RenewDelegationTokenResponse",
      "org.apache.kafka.common.errors.RetriableException",
      "org.apache.kafka.clients.consumer.internals.PartitionAssignor",
      "org.apache.kafka.common.errors.InterruptException",
      "org.apache.kafka.common.protocol.types.Type$DocumentedType",
      "org.apache.kafka.common.requests.MetadataResponse$Holder",
      "org.apache.kafka.common.requests.OffsetFetchResponse",
      "org.apache.kafka.common.serialization.Deserializer",
      "org.apache.kafka.common.config.SslConfigs",
      "com.facebook.presto.common.InvalidFunctionArgumentException",
      "org.apache.kafka.common.utils.SystemTime",
      "org.apache.kafka.common.requests.MetadataResponse$TopicMetadata",
      "org.apache.kafka.common.requests.UpdateMetadataResponse",
      "org.apache.kafka.common.protocol.types.Schema",
      "org.apache.kafka.common.requests.DeleteRecordsResponse",
      "com.facebook.presto.spi.schedule.NodeSelectionStrategy",
      "com.google.common.collect.ImmutableList$1",
      "org.apache.kafka.common.MetricNameTemplate",
      "com.facebook.presto.spi.ConnectorSplit",
      "com.facebook.presto.common.type.TimeZoneKey",
      "com.facebook.presto.spi.ColumnHandle",
      "org.apache.kafka.clients.consumer.internals.PartitionAssignor$Subscription",
      "org.apache.kafka.common.config.AbstractConfig",
      "com.facebook.presto.kafka.KafkaHandleResolver",
      "org.apache.kafka.common.errors.UnsupportedVersionException",
      "org.apache.kafka.common.message.MetadataRequestData",
      "org.apache.kafka.common.requests.WriteTxnMarkersResponse",
      "com.google.common.collect.UnmodifiableIterator",
      "org.apache.kafka.common.utils.Timer",
      "org.apache.kafka.common.requests.FindCoordinatorResponse",
      "org.apache.kafka.common.requests.DescribeDelegationTokenResponse",
      "com.facebook.presto.kafka.KafkaTableLayoutHandle",
      "org.apache.kafka.common.protocol.types.BoundField",
      "com.facebook.presto.spi.security.SelectedRole$Type",
      "com.google.inject.BindingAnnotation",
      "org.apache.kafka.clients.ClientRequest",
      "com.facebook.presto.kafka.server.KafkaClusterMetadataSupplier",
      "org.apache.kafka.common.requests.RequestHeader",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "org.apache.kafka.common.MetricName",
      "org.apache.kafka.common.Metric",
      "com.facebook.presto.spi.function.SqlFunctionHandle",
      "com.google.common.collect.SingletonImmutableList",
      "org.apache.kafka.common.protocol.types.ArrayOf",
      "com.facebook.presto.spi.connector.ConnectorSplitManager",
      "com.google.common.collect.AbstractIndexedListIterator",
      "org.apache.kafka.common.requests.EndTxnResponse",
      "org.apache.kafka.common.metrics.MetricConfig",
      "org.apache.kafka.common.network.TransportLayer",
      "org.apache.kafka.common.metrics.QuotaViolationException",
      "com.facebook.presto.common.type.TypeSignature$EnumMapParsingData",
      "com.facebook.presto.spi.function.SqlFunctionVisibility",
      "org.apache.kafka.clients.consumer.ConsumerRebalanceListener",
      "com.facebook.presto.spi.ColumnMetadata",
      "com.facebook.presto.spi.StandardErrorCode",
      "org.apache.kafka.common.requests.JoinGroupResponse",
      "org.apache.kafka.clients.ClientResponse",
      "com.google.common.collect.ImmutableList$Builder",
      "com.facebook.airlift.log.Logger",
      "org.apache.kafka.common.header.Headers",
      "org.apache.kafka.common.requests.LeaderAndIsrResponse",
      "com.facebook.presto.spi.PrestoException",
      "io.airlift.units.MinDuration",
      "org.apache.kafka.common.config.ConfigDef$Importance",
      "org.apache.kafka.clients.consumer.RangeAssignor",
      "org.apache.kafka.common.requests.StopReplicaResponse",
      "org.apache.kafka.common.requests.CreateDelegationTokenResponse",
      "org.apache.kafka.common.requests.MetadataResponse$PartitionMetadata",
      "org.apache.kafka.common.requests.MetadataRequest",
      "org.apache.kafka.common.requests.SaslHandshakeResponse",
      "com.facebook.presto.common.block.BlockBuilderStatus",
      "com.facebook.presto.spi.WarningCode",
      "com.facebook.presto.spi.connector.ConnectorSplitManager$SplitSchedulingContext",
      "org.apache.kafka.common.utils.Utils",
      "org.apache.kafka.common.errors.InvalidConfigurationException",
      "com.facebook.presto.spi.function.TypeVariableConstraint",
      "org.apache.kafka.common.protocol.ApiKeys",
      "com.facebook.presto.spi.security.ConnectorIdentity",
      "org.apache.kafka.common.requests.DeleteTopicsResponse",
      "org.apache.kafka.common.message.MetadataResponseData",
      "org.apache.kafka.common.requests.DescribeLogDirsResponse",
      "com.facebook.presto.common.block.Block",
      "org.apache.kafka.common.errors.ApiException",
      "org.apache.kafka.common.requests.ControlledShutdownResponse"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.facebook.presto.kafka.KafkaConnectorConfig", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.kafka.KafkaConnectorId", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.kafka.KafkaConsumerManager", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.kafka.server.KafkaClusterMetadataSupplier", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.spi.ConnectorSession", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.spi.ConnectorTableLayoutHandle", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.spi.connector.ConnectorSplitManager$SplitSchedulingContext", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.facebook.presto.spi.connector.ConnectorTransactionHandle", false, KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(KafkaSplitManager_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.facebook.presto.kafka.KafkaSplitManager",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.RegularImmutableList",
      "com.facebook.presto.spi.ErrorType",
      "com.facebook.presto.spi.ErrorCode",
      "com.facebook.presto.spi.StandardErrorCode",
      "com.facebook.presto.spi.HostAddress",
      "com.facebook.presto.kafka.KafkaErrorCode",
      "com.facebook.presto.kafka.KafkaConnectorId",
      "com.facebook.presto.kafka.KafkaConnectorConfig",
      "com.facebook.airlift.log.Logger",
      "com.facebook.presto.kafka.KafkaConsumerManager",
      "com.facebook.presto.spi.connector.ConnectorSplitManager$SplitSchedulingContext",
      "com.facebook.presto.kafka.KafkaHandleResolver",
      "com.google.common.base.Preconditions"
    );
  }
}
