/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 00:37:04 GMT 2021
 */

package com.facebook.presto.kafka;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.kafka.KafkaSplit;
import com.facebook.presto.spi.HostAddress;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KafkaSplit_ESTest extends KafkaSplit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", ",#LP=", "", (Optional<String>) null, (Optional<String>) null, 1, (-1L), 1, hostAddress0);
      String string0 = kafkaSplit0.getTopicName();
      assertEquals(",#LP=", kafkaSplit0.getKeyDataFormat());
      assertEquals("", kafkaSplit0.getConnectorId());
      assertEquals((-1L), kafkaSplit0.getStart());
      assertEquals("", kafkaSplit0.getMessageDataFormat());
      assertEquals(1, kafkaSplit0.getPartitionId());
      assertEquals(1L, kafkaSplit0.getEnd());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "", (Optional<String>) null, (Optional<String>) null, 2794, 2794, 2794, hostAddress0);
      long long0 = kafkaSplit0.getStart();
      assertEquals(2794L, kafkaSplit0.getEnd());
      assertEquals(2794L, long0);
      assertEquals(2794, kafkaSplit0.getPartitionId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "", (Optional<String>) null, (Optional<String>) null, (-2397), (-2397), 0L, hostAddress0);
      long long0 = kafkaSplit0.getStart();
      assertEquals((-2397), kafkaSplit0.getPartitionId());
      assertEquals((-2397L), long0);
      assertEquals(0L, kafkaSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("`pcl4", "`pcl4", "`pcl4", "`pcl4", (Optional<String>) null, (Optional<String>) null, 0, 0L, 0L, hostAddress0);
      int int0 = kafkaSplit0.getPartitionId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("connector id is null", "connector id is null", "+/xp.Si%!V", "connector id is null", (Optional<String>) null, (Optional<String>) null, (-2274), (-2274), (-2274), hostAddress0);
      int int0 = kafkaSplit0.getPartitionId();
      assertEquals("+/xp.Si%!V", kafkaSplit0.getKeyDataFormat());
      assertEquals("connector id is null", kafkaSplit0.getTopicName());
      assertEquals((-2274L), kafkaSplit0.getStart());
      assertEquals("connector id is null", kafkaSplit0.getMessageDataFormat());
      assertEquals("connector id is null", kafkaSplit0.getConnectorId());
      assertEquals((-2274), int0);
      assertEquals((-2274L), kafkaSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("partitionId", "partitionId", "", "", (Optional<String>) null, (Optional<String>) null, (-1419), (-111L), (-111L), hostAddress0);
      String string0 = kafkaSplit0.getMessageDataFormat();
      assertEquals((-1419), kafkaSplit0.getPartitionId());
      assertEquals((-111L), kafkaSplit0.getStart());
      assertEquals("partitionId", kafkaSplit0.getConnectorId());
      assertEquals("", string0);
      assertEquals("partitionId", kafkaSplit0.getTopicName());
      assertEquals((-111L), kafkaSplit0.getEnd());
      assertEquals("", kafkaSplit0.getKeyDataFormat());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "", (Optional<String>) null, (Optional<String>) null, 2794, 2794, 2794, hostAddress0);
      kafkaSplit0.getKeyDataFormat();
      assertEquals(2794L, kafkaSplit0.getStart());
      assertEquals(2794, kafkaSplit0.getPartitionId());
      assertEquals(2794L, kafkaSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("l=", "l=", "l=", "l=", (Optional<String>) null, (Optional<String>) null, 0, 0, 0L, hostAddress0);
      kafkaSplit0.getEnd();
      assertEquals(0, kafkaSplit0.getPartitionId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "rD<2<O<", (Optional<String>) null, (Optional<String>) null, 1, 1, (-1L), hostAddress0);
      long long0 = kafkaSplit0.getEnd();
      assertEquals("", kafkaSplit0.getConnectorId());
      assertEquals("", kafkaSplit0.getTopicName());
      assertEquals(1L, kafkaSplit0.getStart());
      assertEquals(1, kafkaSplit0.getPartitionId());
      assertEquals("rD<2<O<", kafkaSplit0.getMessageDataFormat());
      assertEquals("", kafkaSplit0.getKeyDataFormat());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "", (Optional<String>) null, (Optional<String>) null, 456, 456, 456, hostAddress0);
      kafkaSplit0.getConnectorId();
      assertEquals(456L, kafkaSplit0.getStart());
      assertEquals(456, kafkaSplit0.getPartitionId());
      assertEquals(456L, kafkaSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KafkaSplit kafkaSplit0 = null;
      try {
        kafkaSplit0 = new KafkaSplit("Port number out of range: ", "Port number out of range: ", "Port number out of range: ", "", (Optional<String>) null, (Optional<String>) null, (-1), (-1), (-1), (HostAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // leader address is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("zt", "zt", "zt", "zt", (Optional<String>) null, (Optional<String>) null, 6, 6, 6, hostAddress0);
      int int0 = kafkaSplit0.getPartitionId();
      assertEquals(6, int0);
      assertEquals(6L, kafkaSplit0.getStart());
      assertEquals(6L, kafkaSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", (Optional<String>) null, (Optional<String>) null, 826, 826, 826, hostAddress0);
      kafkaSplit0.getNodeSelectionStrategy();
      assertEquals(826L, kafkaSplit0.getEnd());
      assertEquals(826, kafkaSplit0.getPartitionId());
      assertEquals(826L, kafkaSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("zt", "zt", "zt", "zt", (Optional<String>) null, (Optional<String>) null, 6, 6, 6, hostAddress0);
      kafkaSplit0.getKeyDataFormat();
      assertEquals(6L, kafkaSplit0.getStart());
      assertEquals(6L, kafkaSplit0.getEnd());
      assertEquals(6, kafkaSplit0.getPartitionId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("zt", "zt", "zt", "zt", (Optional<String>) null, (Optional<String>) null, 6, 6, 6, hostAddress0);
      kafkaSplit0.getMessageDataFormat();
      assertEquals(6L, kafkaSplit0.getEnd());
      assertEquals(6L, kafkaSplit0.getStart());
      assertEquals(6, kafkaSplit0.getPartitionId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", (Optional<String>) null, (Optional<String>) null, 826, 826, 826, hostAddress0);
      long long0 = kafkaSplit0.getEnd();
      assertEquals(826L, kafkaSplit0.getStart());
      assertEquals(826, kafkaSplit0.getPartitionId());
      assertEquals(826L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", (Optional<String>) null, (Optional<String>) null, 826, 826, 826, hostAddress0);
      kafkaSplit0.getPreferredNodes((List<HostAddress>) null);
      assertEquals(826, kafkaSplit0.getPartitionId());
      assertEquals(826L, kafkaSplit0.getStart());
      assertEquals(826L, kafkaSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "", (Optional<String>) null, (Optional<String>) null, 0, 0, 0, hostAddress0);
      kafkaSplit0.getStart();
      assertEquals(0, kafkaSplit0.getPartitionId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("zt", "zt", "zt", "zt", (Optional<String>) null, (Optional<String>) null, 6, 6, 6, hostAddress0);
      kafkaSplit0.getConnectorId();
      assertEquals(6L, kafkaSplit0.getEnd());
      assertEquals(6, kafkaSplit0.getPartitionId());
      assertEquals(6L, kafkaSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      doReturn("").when(hostAddress0).toString();
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "", (Optional<String>) null, (Optional<String>) null, 0, 0, 0, hostAddress0);
      KafkaSplit kafkaSplit1 = (KafkaSplit)kafkaSplit0.getInfo();
      assertEquals(0, kafkaSplit1.getPartitionId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      doReturn("H6cm$S5@c").when(hostAddress0).toString();
      KafkaSplit kafkaSplit0 = new KafkaSplit("H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", (Optional<String>) null, (Optional<String>) null, 826, 826, 826, hostAddress0);
      kafkaSplit0.toString();
      assertEquals(826, kafkaSplit0.getPartitionId());
      assertEquals(826L, kafkaSplit0.getEnd());
      assertEquals(826L, kafkaSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      doReturn("zt").when(hostAddress0).toString();
      KafkaSplit kafkaSplit0 = new KafkaSplit("zt", "zt", "zt", "zt", (Optional<String>) null, (Optional<String>) null, 6, 6, 6, hostAddress0);
      kafkaSplit0.getLeader();
      assertEquals(6L, kafkaSplit0.getEnd());
      assertEquals(6, kafkaSplit0.getPartitionId());
      assertEquals(6L, kafkaSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", "H6cm$S5@c", (Optional<String>) null, (Optional<String>) null, 826, 826, 826, hostAddress0);
      kafkaSplit0.getTopicName();
      assertEquals(826L, kafkaSplit0.getEnd());
      assertEquals(826L, kafkaSplit0.getStart());
      assertEquals(826, kafkaSplit0.getPartitionId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("zt", "zt", "zt", "zt", (Optional<String>) null, (Optional<String>) null, 6, 6, 6, hostAddress0);
      kafkaSplit0.getKeyDataSchemaContents();
      assertEquals(6L, kafkaSplit0.getStart());
      assertEquals(6, kafkaSplit0.getPartitionId());
      assertEquals(6L, kafkaSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      KafkaSplit kafkaSplit0 = new KafkaSplit("", "", "", "", (Optional<String>) null, (Optional<String>) null, 0, 0, 0, hostAddress0);
      kafkaSplit0.getMessageDataSchemaContents();
      assertEquals(0, kafkaSplit0.getPartitionId());
  }
}
