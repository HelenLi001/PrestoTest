/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 06:46:42 GMT 2021
 */

package com.facebook.presto.kudu;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.DoubleType;
import com.facebook.presto.kudu.TypeHelper;
import java.nio.ByteBuffer;
import org.apache.kudu.ColumnSchema;
import org.apache.kudu.ColumnTypeAttributes;
import org.apache.kudu.Type;
import org.apache.kudu.client.RowResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeHelper_ESTest extends TypeHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = Type.UNIXTIME_MICROS;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(3629L).when(rowResult0).getLong(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, 1048576);
      assertEquals(3L, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Object object0 = TypeHelper.getJavaValue(type1, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rowResult0).getDouble(anyInt());
      double double0 = TypeHelper.getDouble(type1, rowResult0, (-704));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((double)1053).when(rowResult0).getDouble(anyInt());
      double double0 = TypeHelper.getDouble(type1, rowResult0, (-704));
      assertEquals(1053.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(rowResult0).getBoolean(anyInt());
      boolean boolean0 = TypeHelper.getBoolean(type1, rowResult0, 255);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = Type.BINARY;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getSlice(type1, (RowResult) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = Type.INT16;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getObject(type1, (RowResult) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.INT32;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getLong(type1, (RowResult) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getDouble(type1, (RowResult) null, (-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getBoolean(type1, (RowResult) null, (-1914));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = Type.INT8;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      TypeHelper.fromKuduColumn(columnSchema0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.BINARY;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(rowResult0).getBinary(anyInt());
      // Undeclared exception!
      try { 
        TypeHelper.getSlice(type1, rowResult0, 93);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.airlift.slice.Slices
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rowResult0).getString(anyInt());
      Type type0 = Type.STRING;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getSlice(type1, rowResult0, 2147483635);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.airlift.slice.Slices
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeHelper.getSlice(type1, rowResult0, 8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getSlice not implemented for boolean
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((-763.934)).when(rowResult0).getDouble(anyInt());
      double double0 = TypeHelper.getDouble(type1, rowResult0, 1053);
      assertEquals((-763.934), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = Type.FLOAT;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeHelper.getDouble(type1, rowResult0, 1823);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getDouble not implemented for real
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(rowResult0).getBoolean(anyInt());
      boolean boolean0 = TypeHelper.getBoolean(type1, rowResult0, 255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeHelper.getBoolean((com.facebook.presto.common.type.Type) null, rowResult0, (-3253));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getBoolean not implemented for null
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Type type0 = Type.FLOAT;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(746.0F).when(rowResult0).getFloat(anyInt());
      long long0 = TypeHelper.getLong(type1, rowResult0, 71);
      assertEquals(1144684544L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type type0 = Type.INT16;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((short)7).when(rowResult0).getShort(anyInt());
      long long0 = TypeHelper.getLong(type1, rowResult0, (-2089));
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Type type0 = Type.INT32;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rowResult0).getInt(anyInt());
      long long0 = TypeHelper.getLong(type1, rowResult0, (-31));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Type type0 = Type.INT64;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-2717)).when(rowResult0).getLong(anyInt());
      long long0 = TypeHelper.getLong(type1, rowResult0, (-553));
      assertEquals((-2717L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type type0 = Type.UNIXTIME_MICROS;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(1776L).when(rowResult0).getLong(anyInt());
      long long0 = TypeHelper.getLong(type1, rowResult0, (-31));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeHelper.getLong(type1, rowResult0, (-1615));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getLong not implemented for boolean
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BINARY;
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(rowResult0).getBinary(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      // Undeclared exception!
      try { 
        TypeHelper.getObject(type1, rowResult0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.airlift.slice.Slices
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(rowResult0).isNull(anyInt());
      // Undeclared exception!
      try { 
        TypeHelper.getObject((com.facebook.presto.common.type.Type) null, rowResult0, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getObject not implemented for null
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(rowResult0).getDouble(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, 2);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Type type0 = Type.INT64;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rowResult0).getLong(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, (-2717));
      assertEquals((-553L), object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Type type0 = Type.STRING;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rowResult0).getString(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, 10);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Type type0 = Type.BINARY;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, (-3207));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeHelper.getJavaValue((com.facebook.presto.common.type.Type) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Back conversion not implemented for null
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(rowResult0).getBoolean(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, (-3207));
      Object object1 = TypeHelper.getJavaValue(type1, object0);
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Type type0 = Type.FLOAT;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(rowResult0).getFloat(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, 71);
      // Undeclared exception!
      try { 
        TypeHelper.getJavaValue(type1, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      DoubleType doubleType0 = (DoubleType)TypeHelper.getJavaValue(type1, type1);
      assertTrue(doubleType0.isComparable());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Type type0 = Type.INT8;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getJavaValue(type1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Type type0 = Type.INT16;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn((short)464).when(rowResult0).getShort(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, (-3207));
      // Undeclared exception!
      try { 
        TypeHelper.getJavaValue(type1, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Type type0 = Type.INT32;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rowResult0).getInt(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, (-3207));
      // Undeclared exception!
      try { 
        TypeHelper.getJavaValue(type1, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Type type0 = Type.INT64;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Object object0 = TypeHelper.getJavaValue(type1, "com.facebook.presto.comon.type.TypeSignature");
      assertEquals("com.facebook.presto.comon.type.TypeSignature", object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Type type0 = Type.UNIXTIME_MICROS;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      RowResult rowResult0 = mock(RowResult.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(rowResult0).getLong(anyInt());
      doReturn(false).when(rowResult0).isNull(anyInt());
      Object object0 = TypeHelper.getObject(type1, rowResult0, (-4234));
      assertNotNull(object0);
      
      Object object1 = TypeHelper.getJavaValue(type1, object0);
      assertEquals(0L, object1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Type type0 = Type.STRING;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getJavaValue(type1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Type type0 = Type.BINARY;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      // Undeclared exception!
      try { 
        TypeHelper.getJavaValue(type1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Type type0 = Type.DATE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      // Undeclared exception!
      try { 
        TypeHelper.fromKuduColumn(columnSchema0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Kudu type not implemented for Type: date
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Type type0 = Type.DECIMAL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(columnTypeAttributes0).getPrecision();
      doReturn(0).when(columnTypeAttributes0).getScale();
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      // Undeclared exception!
      try { 
        TypeHelper.fromKuduColumn(columnSchema0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DECIMAL precision must be in range [1, 38]
         //
         verifyException("com.facebook.presto.common.type.DecimalType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeHelper.toKuduClientType((com.facebook.presto.common.type.Type) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Type mapping implemented for Presto type: null
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Type type0 = Type.BOOL;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals(Type.BOOL, type2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Type type0 = Type.DOUBLE;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals(Type.DOUBLE, type2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Type type0 = Type.FLOAT;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals(Type.FLOAT, type2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Type type0 = Type.INT8;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      TypeHelper.toKuduClientType(type1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Type type0 = Type.INT16;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals("int16", type2.getName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Type type0 = Type.INT32;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals(Type.INT32, type2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Type type0 = Type.INT64;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertSame(type2, type0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Type type0 = Type.UNIXTIME_MICROS;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals("unixtime_micros", type2.getName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Type type0 = Type.STRING;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals("string", type2.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Type type0 = Type.BINARY;
      ColumnTypeAttributes columnTypeAttributes0 = mock(ColumnTypeAttributes.class, new ViolatedAssumptionAnswer());
      ColumnSchema columnSchema0 = mock(ColumnSchema.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(columnSchema0).getType();
      doReturn(columnTypeAttributes0).when(columnSchema0).getTypeAttributes();
      com.facebook.presto.common.type.Type type1 = TypeHelper.fromKuduColumn(columnSchema0);
      Type type2 = TypeHelper.toKuduClientType(type1);
      assertEquals(Type.BINARY, type2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeHelper.fromKuduColumn((ColumnSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.TypeHelper", e);
      }
  }
}
