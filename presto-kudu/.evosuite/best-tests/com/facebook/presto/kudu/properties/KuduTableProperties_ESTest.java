/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 06:53:59 GMT 2021
 */

package com.facebook.presto.kudu.properties;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeManager;
import com.facebook.presto.kudu.properties.KuduTableProperties;
import com.facebook.presto.kudu.properties.RangeBoundValue;
import com.facebook.presto.kudu.properties.RangePartition;
import com.facebook.presto.kudu.properties.RangePartitionDefinition;
import com.facebook.presto.spi.session.PropertyMetadata;
import java.util.List;
import java.util.Map;
import org.apache.kudu.ColumnSchema;
import org.apache.kudu.Common;
import org.apache.kudu.Schema;
import org.apache.kudu.client.KuduTable;
import org.apache.kudu.client.PartialRow;
import org.apache.kudu.client.PartitionSchema;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KuduTableProperties_ESTest extends KuduTableProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PartitionSchema partitionSchema0 = mock(PartitionSchema.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(partitionSchema0).getHashBucketSchemas();
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      KuduTable kuduTable0 = mock(KuduTable.class, new ViolatedAssumptionAnswer());
      doReturn(partitionSchema0).when(kuduTable0).getPartitionSchema();
      doReturn(schema0).when(kuduTable0).getSchema();
      // Undeclared exception!
      try { 
        KuduTableProperties.getPartitionDesign(kuduTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(168, 476727772).when(schema0).getColumnCount();
      doReturn(168).when(schema0).getRowSize();
      doReturn(false).when(schema0).hasNullableColumns();
      RangePartitionDefinition rangePartitionDefinition0 = mock(RangePartitionDefinition.class, new ViolatedAssumptionAnswer());
      RangeBoundValue rangeBoundValue0 = mock(RangeBoundValue.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      KuduTableProperties.toRangeBoundToPartialRow(schema0, rangePartitionDefinition0, rangeBoundValue0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(schema0).getColumnCount();
      doReturn(0).when(schema0).getRowSize();
      doReturn(false).when(schema0).hasNullableColumns();
      RangePartitionDefinition rangePartitionDefinition0 = mock(RangePartitionDefinition.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rangePartitionDefinition0).getColumns();
      RangeBoundValue rangeBoundValue0 = mock(RangeBoundValue.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        KuduTableProperties.toRangeBoundToPartialRow(schema0, rangePartitionDefinition0, rangeBoundValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((-898026669)).when(schema0).getColumnCount();
      RangePartitionDefinition rangePartitionDefinition0 = mock(RangePartitionDefinition.class, new ViolatedAssumptionAnswer());
      RangeBoundValue rangeBoundValue0 = mock(RangeBoundValue.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        KuduTableProperties.toRangeBoundToPartialRow(schema0, rangePartitionDefinition0, rangeBoundValue0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -898026669
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.lookupEncodingString((ColumnSchema.Encoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.lookupEncoding((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.lookupCompressionString((ColumnSchema.CompressionAlgorithm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.lookupCompression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.getRangePartitions((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.getPartitionDesign((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.getColumnDesign((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeManager0).getType(any(com.facebook.presto.common.type.TypeSignature.class));
      KuduTableProperties kuduTableProperties0 = null;
      try {
        kuduTableProperties0 = new KuduTableProperties(typeManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.UNKNOWN;
      String string0 = KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.GROUP_VARINT;
      String string0 = KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      assertEquals("group_varint", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.RLE;
      KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(schema0).getColumns();
      KuduTable kuduTable0 = mock(KuduTable.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(kuduTable0).getSchema();
      // Undeclared exception!
      try { 
        KuduTableProperties.toMap(kuduTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.PREFIX_ENCODING;
      String string0 = KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      assertEquals("prefix", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.DICT_ENCODING;
      String string0 = KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      assertEquals("dictionary", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.BIT_SHUFFLE;
      String string0 = KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      assertEquals("bitshuffle", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.PLAIN_ENCODING;
      String string0 = KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      assertEquals("plain", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = ColumnSchema.Encoding.AUTO_ENCODING;
      String string0 = KuduTableProperties.lookupEncodingString(columnSchema_Encoding0);
      assertEquals("auto", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.lookupEncoding("no");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("dictionary");
      assertEquals(ColumnSchema.Encoding.DICT_ENCODING, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("dict_encoding");
      assertEquals(ColumnSchema.Encoding.DICT_ENCODING, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("auto");
      assertEquals(Common.EncodingType.AUTO_ENCODING, columnSchema_Encoding0.getInternalPbType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("runlength");
      assertEquals(ColumnSchema.Encoding.RLE, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("group_varint");
      assertEquals(ColumnSchema.Encoding.GROUP_VARINT, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("bitshuffle");
      assertEquals(ColumnSchema.Encoding.BIT_SHUFFLE, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("plain_encoding");
      assertEquals(ColumnSchema.Encoding.PLAIN_ENCODING, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("prefix");
      assertEquals(ColumnSchema.Encoding.PREFIX_ENCODING, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColumnSchema.Encoding columnSchema_Encoding0 = KuduTableProperties.lookupEncoding("plain");
      assertEquals(ColumnSchema.Encoding.PLAIN_ENCODING, columnSchema_Encoding0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = ColumnSchema.CompressionAlgorithm.ZLIB;
      String string0 = KuduTableProperties.lookupCompressionString(columnSchema_CompressionAlgorithm0);
      assertEquals("zlib", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = ColumnSchema.CompressionAlgorithm.SNAPPY;
      String string0 = KuduTableProperties.lookupCompressionString(columnSchema_CompressionAlgorithm0);
      assertEquals("snappy", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = ColumnSchema.CompressionAlgorithm.LZ4;
      String string0 = KuduTableProperties.lookupCompressionString(columnSchema_CompressionAlgorithm0);
      assertEquals("lz4", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = ColumnSchema.CompressionAlgorithm.NO_COMPRESSION;
      String string0 = KuduTableProperties.lookupCompressionString(columnSchema_CompressionAlgorithm0);
      assertEquals("no", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = ColumnSchema.CompressionAlgorithm.UNKNOWN;
      String string0 = KuduTableProperties.lookupCompressionString(columnSchema_CompressionAlgorithm0);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = ColumnSchema.CompressionAlgorithm.DEFAULT_COMPRESSION;
      String string0 = KuduTableProperties.lookupCompressionString(columnSchema_CompressionAlgorithm0);
      assertEquals("default", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = KuduTableProperties.lookupCompression("zlib");
      assertEquals(ColumnSchema.CompressionAlgorithm.ZLIB, columnSchema_CompressionAlgorithm0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = KuduTableProperties.lookupCompression("lz4");
      assertEquals(ColumnSchema.CompressionAlgorithm.LZ4, columnSchema_CompressionAlgorithm0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = KuduTableProperties.lookupCompression("no");
      assertEquals(ColumnSchema.CompressionAlgorithm.NO_COMPRESSION, columnSchema_CompressionAlgorithm0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColumnSchema.CompressionAlgorithm columnSchema_CompressionAlgorithm0 = KuduTableProperties.lookupCompression("snappy");
      assertEquals(ColumnSchema.CompressionAlgorithm.SNAPPY, columnSchema_CompressionAlgorithm0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.lookupCompression("unknown");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(schema0).getColumnCount();
      doReturn(0).when(schema0).getRowSize();
      doReturn(false).when(schema0).hasNullableColumns();
      PartialRow partialRow0 = KuduTableProperties.toRangeBoundToPartialRow(schema0, (RangePartitionDefinition) null, (RangeBoundValue) null);
      assertNotNull(partialRow0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RangePartition rangePartition0 = KuduTableProperties.parseRangePartition((String) null);
      assertNull(rangePartition0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.parseRangePartition("plain_encoding");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'plain_encoding': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\"plain_encoding\"; line: 1, column: 29]
         //
         verifyException("com.facebook.presto.kudu.properties.KuduTableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      doReturn(type0, type1, type1).when(typeManager0).getType(any(com.facebook.presto.common.type.TypeSignature.class));
      KuduTableProperties kuduTableProperties0 = new KuduTableProperties(typeManager0);
      List<PropertyMetadata<?>> list0 = kuduTableProperties0.getTableProperties();
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      TypeManager typeManager0 = mock(TypeManager.class, new ViolatedAssumptionAnswer());
      doReturn(type0, (Type) null).when(typeManager0).getType(any(com.facebook.presto.common.type.TypeSignature.class));
      KuduTableProperties kuduTableProperties0 = null;
      try {
        kuduTableProperties0 = new KuduTableProperties(typeManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        KuduTableProperties.getNumReplicas((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
