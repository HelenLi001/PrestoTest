/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 04:17:15 GMT 2021
 */

package com.facebook.presto.matching;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.matching.Capture;
import com.facebook.presto.matching.Captures;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Captures_ESTest extends Captures_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture("zg4w+w|QiBn]F2=|M");
      Captures captures0 = Captures.ofNullable(capture0, (Object) capture0);
      Captures captures1 = captures0.addAll(captures0);
      captures1.hashCode();
      assertFalse(captures1.equals((Object)captures0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture();
      Captures captures0 = Captures.ofNullable(capture0, (Object) null);
      captures0.get(capture0);
      assertEquals("@112", capture0.description());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Captures captures0 = Captures.empty();
      Captures captures1 = captures0.addAll((Captures) null);
      assertNull(captures1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture();
      Capture<Integer> capture1 = Capture.newCapture("");
      Object object0 = new Object();
      Captures captures0 = Captures.ofNullable(capture0, object0);
      Captures captures1 = captures0.addAll((Captures) null);
      // Undeclared exception!
      try { 
        captures1.get(capture1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.matching.Captures", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture();
      Captures captures0 = Captures.ofNullable(capture0, (Object) "e|c_c\byK");
      Captures captures1 = captures0.addAll((Captures) null);
      // Undeclared exception!
      try { 
        captures1.addAll((Captures) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.matching.Captures", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Captures captures0 = Captures.empty();
      // Undeclared exception!
      try { 
        captures0.get((Capture<Integer>) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Requested value for unknown Capture. Was it registered in the Pattern?
         //
         verifyException("com.facebook.presto.matching.Captures", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Captures captures0 = Captures.empty();
      captures0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture("(h=7'*hv Z_ne);BL");
      Captures captures0 = Captures.ofNullable(capture0, (Object) "(h=7'*hv Z_ne);BL");
      Captures captures1 = captures0.addAll((Captures) null);
      Captures captures2 = captures0.addAll((Captures) null);
      boolean boolean0 = captures2.equals(captures1);
      assertFalse(captures2.equals((Object)captures0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture();
      Captures captures0 = Captures.ofNullable(capture0, (Object) "5`}83a$v7mxT");
      Capture<Integer> capture1 = Capture.newCapture("5`}83a$v7mxT");
      Captures captures1 = Captures.ofNullable(capture0, (Object) capture1);
      boolean boolean0 = captures0.equals(captures1);
      assertEquals("@77", capture0.description());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture();
      Captures captures0 = Captures.ofNullable(capture0, (Object) null);
      Integer integer0 = new Integer(0);
      Captures captures1 = Captures.ofNullable(capture0, (Object) integer0);
      boolean boolean0 = captures0.equals(captures1);
      assertEquals("@71", capture0.description());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture("(h=7'*hv Z_ne);BL");
      Captures captures0 = Captures.ofNullable(capture0, (Object) "(h=7'*hv Z_ne);BL");
      Captures captures1 = captures0.addAll((Captures) null);
      assertNotNull(captures1);
      
      boolean boolean0 = captures1.equals(captures0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Captures captures0 = Captures.empty();
      Capture<Object> capture0 = Capture.newCapture("mKNg,HI?I;{X/ZB5Lf");
      Captures captures1 = Captures.ofNullable(capture0, (Object) "mKNg,HI?I;{X/ZB5Lf");
      boolean boolean0 = captures0.equals(captures1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture();
      Captures captures0 = Captures.ofNullable(capture0, (Object) "5`}83a$v7mxT");
      Capture<Integer> capture1 = Capture.newCapture("5`}83a$v7mxT");
      boolean boolean0 = captures0.equals(capture1);
      assertEquals("@45", capture0.description());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture();
      Captures captures0 = Captures.ofNullable(capture0, (Object) null);
      boolean boolean0 = captures0.equals((Object) null);
      assertEquals("@41", capture0.description());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Capture<Object> capture0 = Capture.newCapture("(h=7'*hv Z_ne);BL");
      Captures captures0 = Captures.ofNullable(capture0, (Object) "(h=7'*hv Z_ne);BL");
      Object object0 = captures0.get(capture0);
      assertEquals("(h=7'*hv Z_ne);BL", object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Captures captures0 = Captures.ofNullable((Capture<Object>) null, (Object) null);
      assertNotNull(captures0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Capture<String> capture0 = Capture.newCapture("L>W6Nb");
      Captures captures0 = Captures.ofNullable(capture0, "L>W6Nb");
      Captures captures1 = Captures.empty();
      boolean boolean0 = captures0.equals(captures1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Captures captures0 = Captures.empty();
      Capture<Object> capture0 = Capture.newCapture("wc7qSt ");
      Captures captures1 = Captures.ofNullable(capture0, (Object) null);
      Captures captures2 = captures1.addAll(captures0);
      boolean boolean0 = captures1.equals(captures2);
      assertEquals("wc7qSt @1", capture0.description());
      assertTrue(boolean0);
  }
}
