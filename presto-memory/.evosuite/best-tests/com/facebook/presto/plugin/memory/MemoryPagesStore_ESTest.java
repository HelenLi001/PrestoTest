/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 03:11:12 GMT 2021
 */

package com.facebook.presto.plugin.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.Page;
import com.facebook.presto.common.block.Block;
import com.facebook.presto.plugin.memory.MemoryConfig;
import com.facebook.presto.plugin.memory.MemoryPagesStore;
import io.airlift.units.DataSize;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemoryPagesStore_ESTest extends MemoryPagesStore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(2215L);
      HashSet<Long> hashSet0 = new HashSet<Long>();
      Long long0 = new Long((-1473L));
      hashSet0.add(long0);
      memoryPagesStore0.cleanUp(hashSet0);
      assertFalse(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      Long long0 = new Long((-1333L));
      memoryPagesStore0.initialize((-1333L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Page> list0 = memoryPagesStore0.getPages(long0, 580, 580, linkedList0, (-1L));
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(0L);
      Long long0 = new Long(0L);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        memoryPagesStore0.getPages(long0, (-1), (-821), arrayList0, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      // Undeclared exception!
      try { 
        memoryPagesStore0.cleanUp((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(0L);
      Long long0 = Long.valueOf(0L);
      Block[] blockArray0 = new Block[1];
      Page page0 = Page.wrapBlocksWithoutCopy((-1909), blockArray0);
      // Undeclared exception!
      try { 
        memoryPagesStore0.add(long0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryPagesStore memoryPagesStore0 = null;
      try {
        memoryPagesStore0 = new MemoryPagesStore((MemoryConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.plugin.memory.MemoryPagesStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      DataSize.Unit dataSize_Unit0 = DataSize.Unit.PETABYTE;
      DataSize dataSize0 = new DataSize(2.147483648E9, dataSize_Unit0);
      memoryConfig0.setMaxDataPerNode(dataSize0);
      MemoryPagesStore memoryPagesStore0 = null;
      try {
        memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size is too large to be represented in bytes as a long
         //
         verifyException("io.airlift.units.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(1);
      Long long0 = new Long(1);
      boolean boolean0 = memoryPagesStore0.contains(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      Long long0 = new Long(1130);
      boolean boolean0 = memoryPagesStore0.contains(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      memoryPagesStore0.initialize(1);
      Long long0 = new Long(1130);
      linkedHashSet0.add(long0);
      Long long1 = new Long(1);
      linkedHashSet0.add(long1);
      memoryPagesStore0.cleanUp(linkedHashSet0);
      assertEquals(2, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(0L);
      HashSet<Long> hashSet0 = new HashSet<Long>();
      Long long0 = new Long(0L);
      hashSet0.add(long0);
      memoryPagesStore0.cleanUp(hashSet0);
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      TreeSet<Long> treeSet0 = new TreeSet<Long>();
      memoryPagesStore0.cleanUp(treeSet0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      Long long0 = new Long(1130);
      memoryPagesStore0.initialize(1130);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        memoryPagesStore0.getPages(long0, 1130, 1130, linkedList0, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected to find [1] rows on a worker, but found [0].
         //
         verifyException("com.facebook.presto.plugin.memory.MemoryPagesStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      Long long0 = new Long(1130);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        memoryPagesStore0.getPages(long0, 1130, 1, linkedList0, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to find table on a worker.
         //
         verifyException("com.facebook.presto.plugin.memory.MemoryPagesStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      DataSize dataSize0 = DataSize.succinctBytes(34L);
      memoryConfig0.setMaxDataPerNode(dataSize0);
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(388);
      Long long0 = Long.valueOf((long) 388);
      Block[] blockArray0 = new Block[0];
      Page page0 = Page.wrapBlocksWithoutCopy(388, blockArray0);
      // Undeclared exception!
      try { 
        memoryPagesStore0.add(long0, page0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Memory limit [34] for memory connector exceeded
         //
         verifyException("com.facebook.presto.plugin.memory.MemoryPagesStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      Block[] blockArray0 = new Block[0];
      Page page0 = Page.wrapBlocksWithoutCopy((-1909), blockArray0);
      Long long0 = new Long(1123L);
      // Undeclared exception!
      try { 
        memoryPagesStore0.add(long0, page0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to find table on a worker.
         //
         verifyException("com.facebook.presto.plugin.memory.MemoryPagesStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(0L);
      memoryPagesStore0.initialize(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize(0L);
      Long long0 = new Long(0L);
      Stack<Integer> stack0 = new Stack<Integer>();
      List<Page> list0 = memoryPagesStore0.getPages(long0, 0, 0, stack0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize((-20L));
      HashSet<Long> hashSet0 = new HashSet<Long>();
      Long long0 = new Long(1123L);
      hashSet0.add(long0);
      memoryPagesStore0.cleanUp(hashSet0);
      assertTrue(hashSet0.contains(long0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MemoryConfig memoryConfig0 = new MemoryConfig();
      MemoryPagesStore memoryPagesStore0 = new MemoryPagesStore(memoryConfig0);
      memoryPagesStore0.initialize((-20L));
      Long long0 = Long.valueOf((-20L));
      Block[] blockArray0 = new Block[0];
      Page page0 = Page.wrapBlocksWithoutCopy((-1909), blockArray0);
      memoryPagesStore0.add(long0, page0);
      HashSet<Long> hashSet0 = new HashSet<Long>();
      Long long1 = new Long(1123L);
      hashSet0.add(long1);
      memoryPagesStore0.cleanUp(hashSet0);
  }
}
