/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 03:17:58 GMT 2021
 */

package com.facebook.presto.plugin.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.plugin.memory.MemorySplit;
import com.facebook.presto.plugin.memory.MemoryTableHandle;
import com.facebook.presto.spi.HostAddress;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemorySplit_ESTest extends MemorySplit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 2059, 65535, hostAddress0, (-113L));
      int int0 = memorySplit0.getPartNumber();
      assertEquals(2059, int0);
      assertEquals(65535, memorySplit0.getTotalPartsPerWorker());
      assertEquals((-113L), memorySplit0.getExpectedRows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 2, 373, hostAddress0, 373);
      long long0 = memorySplit0.getExpectedRows();
      assertEquals(373, memorySplit0.getTotalPartsPerWorker());
      assertEquals(373L, long0);
      assertEquals(2, memorySplit0.getPartNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 2059, 65535, hostAddress0, (-113L));
      long long0 = memorySplit0.getExpectedRows();
      assertEquals(65535, memorySplit0.getTotalPartsPerWorker());
      assertEquals((-113L), long0);
      assertEquals(2059, memorySplit0.getPartNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = null;
      try {
        memorySplit0 = new MemorySplit(memoryTableHandle0, 1395, 3475, (HostAddress) null, 1395);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // address is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = null;
      try {
        memorySplit0 = new MemorySplit(memoryTableHandle0, 2764, 2764, hostAddress0, 2764);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // totalPartsPerWorker must be > partNumber
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemorySplit memorySplit0 = null;
      try {
        memorySplit0 = new MemorySplit((MemoryTableHandle) null, 0, 0, (HostAddress) null, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // totalPartsPerWorker must be >= 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemorySplit memorySplit0 = null;
      try {
        memorySplit0 = new MemorySplit((MemoryTableHandle) null, (-461), 0, (HostAddress) null, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // partNumber must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      memorySplit0.getPreferredNodes((List<HostAddress>) null);
      assertEquals(1188, memorySplit0.getTotalPartsPerWorker());
      assertEquals(0, memorySplit0.getPartNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      memorySplit0.getNodeSelectionStrategy();
      assertEquals(1188, memorySplit0.getTotalPartsPerWorker());
      assertEquals(0, memorySplit0.getPartNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(memoryTableHandle0).toString();
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      memorySplit0.getTableHandle();
      assertEquals(0, memorySplit0.getPartNumber());
      assertEquals(1188, memorySplit0.getTotalPartsPerWorker());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      memorySplit0.getExpectedRows();
      assertEquals(1188, memorySplit0.getTotalPartsPerWorker());
      assertEquals(0, memorySplit0.getPartNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      int int0 = memorySplit0.getPartNumber();
      assertEquals(1188, memorySplit0.getTotalPartsPerWorker());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(memoryTableHandle0).toString();
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      MemorySplit memorySplit1 = (MemorySplit)memorySplit0.getInfo();
      assertEquals(1188, memorySplit1.getTotalPartsPerWorker());
      assertEquals(0, memorySplit1.getPartNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      int int0 = memorySplit0.getTotalPartsPerWorker();
      assertEquals(1188, int0);
      assertEquals(0, memorySplit0.getPartNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(memoryTableHandle0).toString();
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      String string0 = memorySplit0.toString();
      assertEquals("MemorySplit{tableHandle=null, partNumber=0, totalPartsPerWorker=1188}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryTableHandle memoryTableHandle0 = mock(MemoryTableHandle.class, new ViolatedAssumptionAnswer());
      HostAddress hostAddress0 = mock(HostAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hostAddress0).toString();
      MemorySplit memorySplit0 = new MemorySplit(memoryTableHandle0, 0, 1188, hostAddress0, 0);
      memorySplit0.getAddress();
      assertEquals(1188, memorySplit0.getTotalPartsPerWorker());
      assertEquals(0, memorySplit0.getPartNumber());
  }
}
