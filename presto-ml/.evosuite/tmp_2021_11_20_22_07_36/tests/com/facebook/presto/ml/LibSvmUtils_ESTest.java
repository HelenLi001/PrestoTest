/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 06:17:57 GMT 2021
 */

package com.facebook.presto.ml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.ml.LibSvmUtils;
import libsvm.svm_parameter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LibSvmUtils_ESTest extends LibSvmUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        LibSvmUtils.parseParameters(":a=edyJ=Z)nX=:F(k'%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hyperparameters string for libsvm
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        LibSvmUtils.parseParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        LibSvmUtils.parseParameters("nu=<M*nD/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        LibSvmUtils.parseParameters("kernel");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid hyperparameters string for libsvm
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        LibSvmUtils.parseParameters(",eHTnzdsjDn(\"=.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown parameter eHTnzdsjDn(\"
         //
         verifyException("com.facebook.presto.ml.LibSvmUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      svm_parameter svm_parameter0 = LibSvmUtils.parseParameters("");
      assertEquals(1, svm_parameter0.shrinking);
      assertEquals(100.0, svm_parameter0.cache_size, 0.01);
      assertEquals(0.0, svm_parameter0.gamma, 0.01);
      assertEquals(0.0, svm_parameter0.coef0, 0.01);
      assertEquals(0, svm_parameter0.kernel_type);
      assertEquals(0.1, svm_parameter0.eps, 0.01);
      assertEquals(0, svm_parameter0.probability);
      assertEquals(0.5, svm_parameter0.nu, 0.01);
      assertEquals(0, svm_parameter0.nr_weight);
      assertEquals(0.1, svm_parameter0.p, 0.01);
      assertEquals(3, svm_parameter0.degree);
      assertEquals(1.0, svm_parameter0.C, 0.01);
  }
}
