/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 19:47:34 GMT 2021
 */

package com.facebook.presto.orc;

import org.junit.Test;
import static org.junit.Assert.*;
import com.facebook.presto.orc.TestingPlainKeyEncryptionLibrary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestingPlainKeyEncryptionLibrary_ESTest extends TestingPlainKeyEncryptionLibrary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestingPlainKeyEncryptionLibrary testingPlainKeyEncryptionLibrary0 = new TestingPlainKeyEncryptionLibrary();
      assertNotNull(testingPlainKeyEncryptionLibrary0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = testingPlainKeyEncryptionLibrary0.decryptKey(byteArray0, byteArray1, (byte) (-12), 2557);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TestingPlainKeyEncryptionLibrary testingPlainKeyEncryptionLibrary0 = new TestingPlainKeyEncryptionLibrary();
      assertNotNull(testingPlainKeyEncryptionLibrary0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = testingPlainKeyEncryptionLibrary0.encryptKey(byteArray0, (byte[]) null, (-757), (-757));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TestingPlainKeyEncryptionLibrary testingPlainKeyEncryptionLibrary0 = new TestingPlainKeyEncryptionLibrary();
      assertNotNull(testingPlainKeyEncryptionLibrary0);
      
      byte[] byteArray0 = testingPlainKeyEncryptionLibrary0.encryptKey((byte[]) null, (byte[]) null, (-1), (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TestingPlainKeyEncryptionLibrary testingPlainKeyEncryptionLibrary0 = new TestingPlainKeyEncryptionLibrary();
      assertNotNull(testingPlainKeyEncryptionLibrary0);
      
      byte[] byteArray0 = testingPlainKeyEncryptionLibrary0.decryptKey((byte[]) null, (byte[]) null, (-772), 554);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TestingPlainKeyEncryptionLibrary testingPlainKeyEncryptionLibrary0 = new TestingPlainKeyEncryptionLibrary();
      assertNotNull(testingPlainKeyEncryptionLibrary0);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = testingPlainKeyEncryptionLibrary0.encryptKey(byteArray0, byteArray0, 0, 3163);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TestingPlainKeyEncryptionLibrary testingPlainKeyEncryptionLibrary0 = new TestingPlainKeyEncryptionLibrary();
      assertNotNull(testingPlainKeyEncryptionLibrary0);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = testingPlainKeyEncryptionLibrary0.decryptKey(byteArray0, byteArray0, (byte)0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }
}
