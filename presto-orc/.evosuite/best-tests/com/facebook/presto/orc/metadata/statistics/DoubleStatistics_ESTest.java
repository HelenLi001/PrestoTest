/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 18:58:41 GMT 2021
 */

package com.facebook.presto.orc.metadata.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.orc.metadata.statistics.DoubleStatistics;
import com.facebook.presto.orc.metadata.statistics.StatisticsHasher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleStatistics_ESTest extends DoubleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(2117.16);
      assertNotNull(double0);
      assertEquals(2117.16, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(2117.16, doubleStatistics0.getMax(), 0.01);
      assertEquals(2117.16, doubleStatistics0.getMin(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      StatisticsHasher statisticsHasher0 = mock(StatisticsHasher.class, new ViolatedAssumptionAnswer());
      StatisticsHasher statisticsHasher1 = mock(StatisticsHasher.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsHasher0).when(statisticsHasher1).putOptionalDouble(anyBoolean() , anyDouble());
      StatisticsHasher statisticsHasher2 = mock(StatisticsHasher.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsHasher1).when(statisticsHasher2).putOptionalDouble(anyBoolean() , anyDouble());
      doubleStatistics0.addHash(statisticsHasher2);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(2117.16, doubleStatistics0.getMax(), 0.01);
      assertEquals(2117.16, doubleStatistics0.getMin(), 0.01);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(877.0);
      assertNotNull(double0);
      assertEquals(877.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(877.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(877.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMin();
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(877.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(877.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(double1);
      assertEquals(877.0, (double)double1, 0.01);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals((-1.0), doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals((-1.0), doubleStatistics0.getMax(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMin();
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals((-1.0), doubleStatistics0.getMax(), 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(1282.357992620236);
      assertNotNull(double0);
      assertEquals(1282.357992620236, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(1282.357992620236, doubleStatistics0.getMax(), 0.01);
      assertEquals(1282.357992620236, doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMax();
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1282.357992620236, doubleStatistics0.getMax(), 0.01);
      assertEquals(1282.357992620236, doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(double1);
      assertEquals(1282.357992620236, (double)double1, 0.01);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals((-1.0), doubleStatistics0.getMax(), 0.01);
      assertEquals((-1.0), doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMax();
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), doubleStatistics0.getMax(), 0.01);
      assertEquals((-1.0), doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMax();
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, (Double) null);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNull(doubleStatistics0.getMax());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMax();
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNull(doubleStatistics0.getMax());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertNull(double1);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics((Double) null, double0);
      assertNull(doubleStatistics0.getMin());
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMin();
      assertNull(doubleStatistics0.getMin());
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNull(double1);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = doubleStatistics0.getMin();
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = new Double(3035.733393);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3035.733393, (double)double1, 0.01);
      
      DoubleStatistics doubleStatistics1 = new DoubleStatistics(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleStatistics1.equals((Object)doubleStatistics0));
      assertEquals(3035.733393, doubleStatistics1.getMax(), 0.01);
      assertEquals(32L, doubleStatistics1.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics1.getMin(), 0.01);
      assertNotNull(doubleStatistics1);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(doubleStatistics0.equals((Object)doubleStatistics1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleStatistics1.equals((Object)doubleStatistics0));
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(3035.733393, doubleStatistics1.getMax(), 0.01);
      assertEquals(32L, doubleStatistics1.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics1.getMin(), 0.01);
      assertNotSame(doubleStatistics0, doubleStatistics1);
      assertNotSame(doubleStatistics1, doubleStatistics0);
      assertFalse(boolean0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      DoubleStatistics doubleStatistics1 = new DoubleStatistics(double0, double0);
      assertTrue(doubleStatistics1.equals((Object)doubleStatistics0));
      assertEquals(32L, doubleStatistics1.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics1.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics1.getMax(), 0.01);
      assertNotNull(doubleStatistics1);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics1);
      assertTrue(doubleStatistics0.equals((Object)doubleStatistics1));
      assertTrue(doubleStatistics1.equals((Object)doubleStatistics0));
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics1.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics1.getMin(), 0.01);
      assertEquals(0.0, doubleStatistics1.getMax(), 0.01);
      assertNotSame(doubleStatistics0, doubleStatistics1);
      assertNotSame(doubleStatistics1, doubleStatistics0);
      assertTrue(boolean0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      boolean boolean0 = doubleStatistics0.equals(double0);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(0.0, doubleStatistics0.getMax(), 0.01);
      assertEquals(0.0, doubleStatistics0.getMin(), 0.01);
      assertFalse(boolean0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double(2117.16);
      assertNotNull(double0);
      assertEquals(2117.16, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(2117.16, doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(2117.16, doubleStatistics0.getMax(), 0.01);
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      boolean boolean0 = doubleStatistics0.equals((Object) null);
      assertEquals(2117.16, doubleStatistics0.getMin(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(2117.16, doubleStatistics0.getMax(), 0.01);
      assertFalse(boolean0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleStatistics doubleStatistics0 = new DoubleStatistics((Double) null, (Double) null);
      assertNull(doubleStatistics0.getMin());
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNull(doubleStatistics0.getMax());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics0);
      assertNull(doubleStatistics0.getMin());
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNull(doubleStatistics0.getMax());
      assertTrue(boolean0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(2117.16);
      assertNotNull(double0);
      assertEquals(2117.16, (double)double0, 0.01);
      
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      assertEquals(2117.16, doubleStatistics0.getMin(), 0.01);
      assertEquals(2117.16, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      Double double1 = new Double(9L);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(9.0, (double)double1, 0.01);
      
      DoubleStatistics doubleStatistics1 = new DoubleStatistics(double1, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleStatistics1.equals((Object)doubleStatistics0));
      assertEquals(32L, doubleStatistics1.getRetainedSizeInBytes());
      assertEquals(9.0, doubleStatistics1.getMax(), 0.01);
      assertEquals(9.0, doubleStatistics1.getMin(), 0.01);
      assertNotNull(doubleStatistics1);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      boolean boolean0 = doubleStatistics0.equals(doubleStatistics1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(doubleStatistics0.equals((Object)doubleStatistics1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleStatistics1.equals((Object)doubleStatistics0));
      assertEquals(2117.16, doubleStatistics0.getMin(), 0.01);
      assertEquals(2117.16, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertEquals(32L, doubleStatistics1.getRetainedSizeInBytes());
      assertEquals(9.0, doubleStatistics1.getMax(), 0.01);
      assertEquals(9.0, doubleStatistics1.getMin(), 0.01);
      assertNotSame(doubleStatistics0, doubleStatistics1);
      assertNotSame(doubleStatistics1, doubleStatistics0);
      assertFalse(boolean0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double((-1191.050293925));
      assertNotNull(double0);
      assertEquals((-1191.050293925), (double)double0, 0.01);
      
      Double double1 = new Double((-5257.58866242851));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-5257.58866242851), (double)double1, 0.01);
      
      DoubleStatistics doubleStatistics0 = null;
      try {
        doubleStatistics0 = new DoubleStatistics(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimum is not less than maximum
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleStatistics doubleStatistics0 = new DoubleStatistics((Double) null, (Double) null);
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNull(doubleStatistics0.getMin());
      assertNull(doubleStatistics0.getMax());
      assertNotNull(doubleStatistics0);
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
      
      doubleStatistics0.hashCode();
      assertEquals(32L, doubleStatistics0.getRetainedSizeInBytes());
      assertNull(doubleStatistics0.getMin());
      assertNull(doubleStatistics0.getMax());
      assertEquals(9L, DoubleStatistics.DOUBLE_VALUE_BYTES);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(2117.16);
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      long long0 = doubleStatistics0.getRetainedSizeInBytes();
      assertEquals(2117.16, doubleStatistics0.getMin(), 0.01);
      assertEquals(2117.16, doubleStatistics0.getMax(), 0.01);
      assertEquals(32L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double((-1.0));
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      String string0 = doubleStatistics0.toString();
      assertEquals("DoubleStatistics{min=-1.0, max=-1.0}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double((-1.0));
      DoubleStatistics doubleStatistics0 = new DoubleStatistics(double0, double0);
      StatisticsHasher statisticsHasher0 = mock(StatisticsHasher.class, new ViolatedAssumptionAnswer());
      doReturn((StatisticsHasher) null).when(statisticsHasher0).putOptionalDouble(anyBoolean() , anyDouble());
      // Undeclared exception!
      try { 
        doubleStatistics0.addHash(statisticsHasher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.metadata.statistics.DoubleStatistics", e);
      }
  }
}
