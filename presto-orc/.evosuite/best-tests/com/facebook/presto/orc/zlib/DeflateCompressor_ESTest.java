/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 19:15:52 GMT 2021
 */

package com.facebook.presto.orc.zlib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.Session;
import com.facebook.presto.SystemSessionProperties;
import com.facebook.presto.client.NodeVersion;
import com.facebook.presto.common.block.Int128ArrayBlock;
import com.facebook.presto.metadata.InternalNode;
import com.facebook.presto.orc.zlib.DeflateCompressor;
import com.facebook.presto.testing.TestingMetadata;
import io.airlift.slice.Slice;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.function.IntSupplier;
import org.apache.bval.util.LazyInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeflateCompressor_ESTest extends DeflateCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      OptionalInt optionalInt0 = OptionalInt.of(0);
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      ByteBuffer.allocateDirect(0);
      byte[] byteArray0 = null;
      optionalInt0.equals(deflateCompressor0);
      int int1 = 3508;
      int int2 = 2199;
      // Undeclared exception!
      try { 
        deflateCompressor0.compress((byte[]) null, 2199, (-1218), (byte[]) null, 2199, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.of(37309);
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(37309);
      ByteBuffer byteBuffer1 = byteBuffer0.putInt(1468);
      ByteBuffer byteBuffer2 = byteBuffer1.putChar(0, 'e');
      byteBuffer2.asDoubleBuffer();
      byteBuffer1.slice();
      byteBuffer1.getShort(0);
      IntBuffer intBuffer0 = IntBuffer.allocate(0);
      ByteOrder byteOrder0 = intBuffer0.order();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)0;
      ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer3 = byteBuffer2.order(byteOrder0);
      ByteBuffer byteBuffer4 = byteBuffer3.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteBuffer4, byteBuffer3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-direct byte buffer backed by byte array required
         //
         verifyException("com.facebook.presto.orc.zlib.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.empty();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1253);
      ByteBuffer byteBuffer1 = byteBuffer0.putLong(0, 0L);
      ByteBuffer byteBuffer2 = byteBuffer1.putShort((short) (-893));
      ByteBuffer byteBuffer3 = byteBuffer2.putDouble((-1822.23036614));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      ByteBuffer byteBuffer4 = byteBuffer3.get(byteArray0);
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteBuffer4, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-direct byte buffer backed by byte array required
         //
         verifyException("com.facebook.presto.orc.zlib.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.empty();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      // Undeclared exception!
      try { 
        deflateCompressor0.compress((ByteBuffer) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.zlib.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestingMetadata.TestingColumnHandle testingMetadata_TestingColumnHandle0 = new TestingMetadata.TestingColumnHandle("5/p");
      OptionalInt optionalInt0 = testingMetadata_TestingColumnHandle0.getJsonOrdinalPosition();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      deflateCompressor0.maxCompressedLength((-381));
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.empty();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-31);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-31);
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte) (-31);
      byteArray1[6] = (byte)0;
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteArray0, (-851), (int) (byte) (-1), byteArray1, 2987, (int) (byte)40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.empty();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-31);
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteArray0, 253, (-377), byteArray0, (int) (byte)0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.of(0);
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteArray0, (int) (byte)120, (int) (byte)82, byteArray0, 139, (int) (byte)120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.of(1555);
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      optionalInt0.equals(deflateCompressor0);
      OptionalInt.of(0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      int int0 = (-2735);
      int int1 = 1482;
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteArray0, (int) (byte)0, (-2735), byteArray0, 735, 1482);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeflateCompressor deflateCompressor0 = null;
      try {
        deflateCompressor0 = new DeflateCompressor((OptionalInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // compressionLevel is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.of(0);
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '[';
      charArray0[2] = 'G';
      charArray0[3] = '^';
      charArray0[4] = 'a';
      charArray0[5] = '8';
      charArray0[6] = 'U';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      CharBuffer charBuffer2 = charBuffer1.duplicate();
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer2);
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteBuffer0, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Output buffer must be at least 21 bytes
         //
         verifyException("com.facebook.presto.orc.zlib.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-1071);
      OptionalInt optionalInt0 = OptionalInt.of((-1071));
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteArray0, 219, 5, byteArray0, 0, 1531);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.empty();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)19;
      byte byte0 = (byte)49;
      byteArray0[5] = (byte)49;
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteArray0, (int) (byte)4, (-385), byteArray0, (-385), (-3345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Output buffer must be at least -418 bytes
         //
         verifyException("com.facebook.presto.orc.zlib.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      OptionalInt optionalInt0 = OptionalInt.of(0);
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(2819);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      ByteBuffer byteBuffer1 = byteBuffer0.put((byte)55);
      ByteBuffer byteBuffer2 = byteBuffer1.putLong(3, (long) 2819);
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteBuffer2, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Output buffer must be at least 3237 bytes
         //
         verifyException("com.facebook.presto.orc.zlib.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.empty();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.compact();
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteBuffer1, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Output buffer must be at least 21 bytes
         //
         verifyException("com.facebook.presto.orc.zlib.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.of(4);
      OptionalInt.of(4);
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      deflateCompressor0.maxCompressedLength(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-93);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.compact();
      // Undeclared exception!
      try { 
        byteBuffer1.put(4390, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemSessionProperties.getMaxDriversPerTask((Session) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.SystemSessionProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionalInt optionalInt0 = OptionalInt.empty();
      DeflateCompressor deflateCompressor0 = new DeflateCompressor(optionalInt0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byte byte0 = (byte) (-1);
      int int0 = (-2310);
      // Undeclared exception!
      try { 
        deflateCompressor0.compress(byteArray0, (-2310), (-2310), byteArray0, (int) (byte)59, (-2310));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LazyInt lazyInt0 = null;
      try {
        lazyInt0 = new LazyInt((IntSupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "$\"?gU$ 3g5OM;lO./3";
      // Undeclared exception!
      try { 
        MockURI.create("}|!Z_\"_)Za_^NW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: }|!Z_\"_)Za_^NW
         //
         verifyException("java.net.URI", e);
      }
  }
}
