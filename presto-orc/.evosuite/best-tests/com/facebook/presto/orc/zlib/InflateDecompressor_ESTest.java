/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 19:20:27 GMT 2021
 */

package com.facebook.presto.orc.zlib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.orc.zlib.InflateDecompressor;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InflateDecompressor_ESTest extends InflateDecompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[21];
      // Undeclared exception!
      try { 
        inflateDecompressor0.decompress(byteArray0, (int) (byte)0, (int) (byte)80, byteArray0, (int) (byte)0, (int) (byte)80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-106);
      try { 
        inflateDecompressor0.decompress(byteArray0, 1, 1, byteArray0, 1, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid block type: offset=1
         //
         verifyException("com.facebook.presto.orc.zlib.InflateDecompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[12];
      try { 
        inflateDecompressor0.decompress(byteArray0, (int) (byte)0, (int) (byte)6, byteArray0, (int) (byte)1, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid stored block lengths: offset=0
         //
         verifyException("com.facebook.presto.orc.zlib.InflateDecompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        inflateDecompressor0.decompress((byte[]) null, (-3060), (-3060), byteArray0, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        inflateDecompressor0.decompress(byteArray0, (int) (byte)0, (int) (byte)0, (byte[]) null, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        inflateDecompressor0.decompress(byteArray0, 0, 0, byteArray0, (int) (byte)45, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      // Undeclared exception!
      try { 
        inflateDecompressor0.decompress((ByteBuffer) null, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.zlib.InflateDecompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        inflateDecompressor0.decompress(byteArray0, (int) (byte)3, (int) (byte)3, byteArray0, (int) (byte)3, (int) (byte)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxOutputLength is incorrect, there is more data to be decompressed
         //
         verifyException("com.facebook.presto.orc.zlib.InflateDecompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InflateDecompressor inflateDecompressor0 = new InflateDecompressor();
      assertNotNull(inflateDecompressor0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      int int0 = inflateDecompressor0.decompress(byteArray0, (int) (byte)0, (int) (byte)3, byteArray0, (int) (byte)0, (int) (byte)3);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }
}
