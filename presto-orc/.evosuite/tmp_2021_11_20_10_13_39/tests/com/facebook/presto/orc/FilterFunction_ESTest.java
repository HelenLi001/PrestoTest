/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 19:02:05 GMT 2021
 */

package com.facebook.presto.orc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.Page;
import com.facebook.presto.common.block.Block;
import com.facebook.presto.common.function.SqlFunctionProperties;
import com.facebook.presto.common.relation.Predicate;
import com.facebook.presto.orc.FilterFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilterFunction_ESTest extends FilterFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[13];
      intArray0[1] = 9;
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false, false).when(predicate0).evaluate(any(com.facebook.presto.common.function.SqlFunctionProperties.class) , any(com.facebook.presto.common.Page.class) , anyInt());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      Page page0 = mock(Page.class, new ViolatedAssumptionAnswer());
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[9];
      filterFunction0.filter(page0, intArray0, 9, runtimeExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[13];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false, false).when(predicate0).evaluate(any(com.facebook.presto.common.function.SqlFunctionProperties.class) , any(com.facebook.presto.common.Page.class) , anyInt());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      Page page0 = mock(Page.class, new ViolatedAssumptionAnswer());
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[9];
      filterFunction0.filter(page0, intArray0, 9, runtimeExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      Page page0 = mock(Page.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[3];
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[2];
      filterFunction0.filter(page0, intArray1, (-678), runtimeExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[13];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).evaluate(any(com.facebook.presto.common.function.SqlFunctionProperties.class) , any(com.facebook.presto.common.Page.class) , anyInt());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      Page page0 = mock(Page.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[1];
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[9];
      filterFunction0.filter(page0, intArray1, 1, runtimeExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      filterFunction0.isDeterministic();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, false, predicate0);
      filterFunction0.getInputChannels();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[0];
      // Undeclared exception!
      try { 
        filterFunction0.filter((Page) null, intArray0, 0, runtimeExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.FilterFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[5];
      Page page0 = mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(page0).getBlock(anyInt());
      filterFunction0.filter(page0, intArray0, 0, runtimeExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[13];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[1];
      // Undeclared exception!
      try { 
        filterFunction0.filter((Page) null, intArray0, 9, runtimeExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).evaluate(any(com.facebook.presto.common.function.SqlFunctionProperties.class) , any(com.facebook.presto.common.Page.class) , anyInt());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, false, predicate0);
      assertNotNull(filterFunction0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(filterFunction0.isDeterministic());
      
      Page page0 = mock(Page.class, new ViolatedAssumptionAnswer());
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[6];
      int int0 = filterFunction0.filter(page0, intArray0, 1, runtimeExceptionArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertEquals(6, runtimeExceptionArray0.length);
      assertFalse(filterFunction0.isDeterministic());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, false, predicate0);
      assertNotNull(filterFunction0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(filterFunction0.isDeterministic());
      
      RuntimeException[] runtimeExceptionArray0 = new RuntimeException[6];
      // Undeclared exception!
      try { 
        filterFunction0.filter((Page) null, intArray0, 9, runtimeExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, false, predicate0);
      assertNotNull(filterFunction0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(filterFunction0.isDeterministic());
      
      boolean boolean0 = filterFunction0.isDeterministic();
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertFalse(filterFunction0.isDeterministic());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SqlFunctionProperties sqlFunctionProperties0 = mock(SqlFunctionProperties.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[13];
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(predicate0).getInputChannels();
      FilterFunction filterFunction0 = new FilterFunction(sqlFunctionProperties0, true, predicate0);
      assertNotNull(filterFunction0);
      assertEquals(13, intArray0.length);
      assertTrue(filterFunction0.isDeterministic());
      
      int[] intArray1 = filterFunction0.getInputChannels();
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(13, intArray0.length);
      assertEquals(13, intArray1.length);
      assertTrue(filterFunction0.isDeterministic());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Predicate predicate0 = mock(Predicate.class, new ViolatedAssumptionAnswer());
      FilterFunction filterFunction0 = null;
      try {
        filterFunction0 = new FilterFunction((SqlFunctionProperties) null, false, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // properties is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
