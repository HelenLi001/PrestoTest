/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 19:17:00 GMT 2021
 */

package com.facebook.presto.orc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.orc.StreamId;
import com.facebook.presto.orc.metadata.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StreamId_ESTest extends StreamId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.ROW_INDEX;
      StreamId streamId0 = new StreamId((-2610), 0, stream_StreamKind0);
      assertEquals(Stream.StreamKind.ROW_INDEX, streamId0.getStreamKind());
      assertEquals((-2610), streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertNotNull(streamId0);
      
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn((-2610)).when(stream0).getColumn();
      doReturn((-2610)).when(stream0).getSequence();
      doReturn(stream_StreamKind0).when(stream0).getStreamKind();
      StreamId streamId1 = new StreamId(stream0);
      assertFalse(streamId1.equals((Object)streamId0));
      assertEquals(Stream.StreamKind.ROW_INDEX, streamId1.getStreamKind());
      assertEquals((-2610), streamId1.getSequence());
      assertEquals((-2610), streamId1.getColumn());
      assertNotNull(streamId1);
      
      boolean boolean0 = streamId0.equals(streamId1);
      assertFalse(streamId0.equals((Object)streamId1));
      assertFalse(streamId1.equals((Object)streamId0));
      assertFalse(boolean0);
      assertNotSame(streamId0, streamId1);
      assertNotSame(streamId1, streamId0);
      assertEquals(Stream.StreamKind.ROW_INDEX, streamId0.getStreamKind());
      assertEquals((-2610), streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertEquals(Stream.StreamKind.ROW_INDEX, streamId1.getStreamKind());
      assertEquals((-2610), streamId1.getSequence());
      assertEquals((-2610), streamId1.getColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.BLOOM_FILTER;
      StreamId streamId0 = new StreamId(0, 0, stream_StreamKind0);
      assertEquals(0, streamId0.getSequence());
      assertEquals(Stream.StreamKind.BLOOM_FILTER, streamId0.getStreamKind());
      assertEquals(0, streamId0.getColumn());
      assertNotNull(streamId0);
      
      StreamId streamId1 = new StreamId(10, (-2434), stream_StreamKind0);
      assertFalse(streamId1.equals((Object)streamId0));
      assertEquals((-2434), streamId1.getSequence());
      assertEquals(Stream.StreamKind.BLOOM_FILTER, streamId1.getStreamKind());
      assertEquals(10, streamId1.getColumn());
      assertNotNull(streamId1);
      
      boolean boolean0 = streamId0.equals(streamId1);
      assertFalse(streamId0.equals((Object)streamId1));
      assertFalse(streamId1.equals((Object)streamId0));
      assertFalse(boolean0);
      assertNotSame(streamId0, streamId1);
      assertNotSame(streamId1, streamId0);
      assertEquals(0, streamId0.getSequence());
      assertEquals(Stream.StreamKind.BLOOM_FILTER, streamId0.getStreamKind());
      assertEquals(0, streamId0.getColumn());
      assertEquals((-2434), streamId1.getSequence());
      assertEquals(Stream.StreamKind.BLOOM_FILTER, streamId1.getStreamKind());
      assertEquals(10, streamId1.getColumn());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.BLOOM_FILTER_UTF8;
      StreamId streamId0 = new StreamId(0, 0, stream_StreamKind0);
      assertEquals(Stream.StreamKind.BLOOM_FILTER_UTF8, streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNotNull(streamId0);
      
      Stream.StreamKind stream_StreamKind1 = streamId0.getStreamKind();
      assertEquals(Stream.StreamKind.BLOOM_FILTER_UTF8, stream_StreamKind1);
      assertSame(stream_StreamKind0, stream_StreamKind1);
      assertSame(stream_StreamKind1, stream_StreamKind0);
      assertEquals(Stream.StreamKind.BLOOM_FILTER_UTF8, streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertEquals(Stream.StreamArea.INDEX, stream_StreamKind1.getStreamArea());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.DICTIONARY_DATA;
      StreamId streamId0 = new StreamId((-186), 2, stream_StreamKind0);
      assertEquals(2, streamId0.getSequence());
      assertEquals((-186), streamId0.getColumn());
      assertEquals(Stream.StreamKind.DICTIONARY_DATA, streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      int int0 = streamId0.getSequence();
      assertEquals(2, int0);
      assertEquals(2, streamId0.getSequence());
      assertEquals((-186), streamId0.getColumn());
      assertEquals(Stream.StreamKind.DICTIONARY_DATA, streamId0.getStreamKind());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.IN_DICTIONARY;
      StreamId streamId0 = new StreamId((-553), (-553), stream_StreamKind0);
      assertEquals(Stream.StreamKind.IN_DICTIONARY, streamId0.getStreamKind());
      assertEquals((-553), streamId0.getColumn());
      assertEquals((-553), streamId0.getSequence());
      assertNotNull(streamId0);
      
      int int0 = streamId0.getSequence();
      assertEquals((-553), int0);
      assertEquals(Stream.StreamKind.IN_DICTIONARY, streamId0.getStreamKind());
      assertEquals((-553), streamId0.getColumn());
      assertEquals((-553), streamId0.getSequence());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.PRESENT;
      StreamId streamId0 = new StreamId(2, 1035, stream_StreamKind0);
      assertEquals(2, streamId0.getColumn());
      assertEquals(Stream.StreamKind.PRESENT, streamId0.getStreamKind());
      assertEquals(1035, streamId0.getSequence());
      assertNotNull(streamId0);
      
      int int0 = streamId0.getColumn();
      assertEquals(2, int0);
      assertEquals(2, streamId0.getColumn());
      assertEquals(Stream.StreamKind.PRESENT, streamId0.getStreamKind());
      assertEquals(1035, streamId0.getSequence());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.DICTIONARY_DATA;
      StreamId streamId0 = new StreamId((-186), 2, stream_StreamKind0);
      assertEquals(2, streamId0.getSequence());
      assertEquals((-186), streamId0.getColumn());
      assertEquals(Stream.StreamKind.DICTIONARY_DATA, streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      int int0 = streamId0.getColumn();
      assertEquals((-186), int0);
      assertEquals(2, streamId0.getSequence());
      assertEquals((-186), streamId0.getColumn());
      assertEquals(Stream.StreamKind.DICTIONARY_DATA, streamId0.getStreamKind());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StreamId streamId0 = null;
      try {
        streamId0 = new StreamId((Stream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.StreamId", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.BLOOM_FILTER_UTF8;
      StreamId streamId0 = new StreamId(0, 0, stream_StreamKind0);
      assertEquals(0, streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertEquals(Stream.StreamKind.BLOOM_FILTER_UTF8, streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId1 = new StreamId(stream0);
      assertFalse(streamId1.equals((Object)streamId0));
      assertEquals(0, streamId1.getSequence());
      assertNull(streamId1.getStreamKind());
      assertEquals(0, streamId1.getColumn());
      assertNotNull(streamId1);
      
      boolean boolean0 = streamId0.equals(streamId1);
      assertFalse(streamId0.equals((Object)streamId1));
      assertFalse(streamId1.equals((Object)streamId0));
      assertFalse(boolean0);
      assertNotSame(streamId0, streamId1);
      assertNotSame(streamId1, streamId0);
      assertEquals(0, streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertEquals(Stream.StreamKind.BLOOM_FILTER_UTF8, streamId0.getStreamKind());
      assertEquals(0, streamId1.getSequence());
      assertNull(streamId1.getStreamKind());
      assertEquals(0, streamId1.getColumn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getColumn());
      assertNotNull(streamId0);
      
      StreamId streamId1 = new StreamId(0, 6, (Stream.StreamKind) null);
      assertFalse(streamId1.equals((Object)streamId0));
      assertEquals(0, streamId1.getColumn());
      assertEquals(6, streamId1.getSequence());
      assertNull(streamId1.getStreamKind());
      assertNotNull(streamId1);
      
      boolean boolean0 = streamId0.equals(streamId1);
      assertFalse(streamId0.equals((Object)streamId1));
      assertFalse(streamId1.equals((Object)streamId0));
      assertFalse(boolean0);
      assertNotSame(streamId0, streamId1);
      assertNotSame(streamId1, streamId0);
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getColumn());
      assertEquals(0, streamId1.getColumn());
      assertEquals(6, streamId1.getSequence());
      assertNull(streamId1.getStreamKind());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.DATA;
      StreamId streamId0 = new StreamId(993, 993, stream_StreamKind0);
      assertEquals(993, streamId0.getSequence());
      assertEquals(993, streamId0.getColumn());
      assertEquals(Stream.StreamKind.DATA, streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn((-2)).when(stream0).getColumn();
      doReturn(993).when(stream0).getSequence();
      doReturn(stream_StreamKind0).when(stream0).getStreamKind();
      StreamId streamId1 = new StreamId(stream0);
      assertFalse(streamId1.equals((Object)streamId0));
      assertEquals((-2), streamId1.getColumn());
      assertEquals(Stream.StreamKind.DATA, streamId1.getStreamKind());
      assertEquals(993, streamId1.getSequence());
      assertNotNull(streamId1);
      
      boolean boolean0 = streamId0.equals(streamId1);
      assertFalse(streamId0.equals((Object)streamId1));
      assertFalse(streamId1.equals((Object)streamId0));
      assertFalse(boolean0);
      assertNotSame(streamId0, streamId1);
      assertNotSame(streamId1, streamId0);
      assertEquals(993, streamId0.getSequence());
      assertEquals(993, streamId0.getColumn());
      assertEquals(Stream.StreamKind.DATA, streamId0.getStreamKind());
      assertEquals((-2), streamId1.getColumn());
      assertEquals(Stream.StreamKind.DATA, streamId1.getStreamKind());
      assertEquals(993, streamId1.getSequence());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNull(streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      Stream stream1 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream1).getColumn();
      doReturn(0).when(stream1).getSequence();
      doReturn((Stream.StreamKind) null).when(stream1).getStreamKind();
      StreamId streamId1 = new StreamId(stream1);
      assertTrue(streamId1.equals((Object)streamId0));
      assertEquals(0, streamId1.getSequence());
      assertNull(streamId1.getStreamKind());
      assertEquals(0, streamId1.getColumn());
      assertNotNull(streamId1);
      
      boolean boolean0 = streamId0.equals(streamId1);
      assertTrue(streamId0.equals((Object)streamId1));
      assertTrue(streamId1.equals((Object)streamId0));
      assertTrue(boolean0);
      assertNotSame(streamId0, streamId1);
      assertNotSame(streamId1, streamId0);
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId1.getSequence());
      assertNull(streamId1.getStreamKind());
      assertEquals(0, streamId1.getColumn());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stream.StreamKind stream_StreamKind0 = Stream.StreamKind.DICTIONARY_COUNT;
      StreamId streamId0 = new StreamId(2017, 2017, stream_StreamKind0);
      assertEquals(2017, streamId0.getSequence());
      assertEquals(Stream.StreamKind.DICTIONARY_COUNT, streamId0.getStreamKind());
      assertEquals(2017, streamId0.getColumn());
      assertNotNull(streamId0);
      
      boolean boolean0 = streamId0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(2017, streamId0.getSequence());
      assertEquals(Stream.StreamKind.DICTIONARY_COUNT, streamId0.getStreamKind());
      assertEquals(2017, streamId0.getColumn());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNotNull(streamId0);
      
      boolean boolean0 = streamId0.equals(streamId0);
      assertTrue(boolean0);
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNull(streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      boolean boolean0 = streamId0.equals("StreamId{column=0, sequence=0, streamKind=null}");
      assertFalse(boolean0);
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNull(streamId0.getStreamKind());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertEquals(0, streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      streamId0.hashCode();
      assertEquals(0, streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertEquals(0, streamId0.getColumn());
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
      assertNotNull(streamId0);
      
      int int0 = streamId0.getColumn();
      assertEquals(0, int0);
      assertEquals(0, streamId0.getColumn());
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getColumn());
      assertNotNull(streamId0);
      
      streamId0.getStreamKind();
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getColumn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertEquals(0, streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
      assertNotNull(streamId0);
      
      int int0 = streamId0.getSequence();
      assertEquals(0, int0);
      assertEquals(0, streamId0.getColumn());
      assertEquals(0, streamId0.getSequence());
      assertNull(streamId0.getStreamKind());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stream stream0 = mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(stream0).getColumn();
      doReturn(0).when(stream0).getSequence();
      doReturn((Stream.StreamKind) null).when(stream0).getStreamKind();
      StreamId streamId0 = new StreamId(stream0);
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNotNull(streamId0);
      
      String string0 = streamId0.toString();
      assertEquals("StreamId{column=0, sequence=0, streamKind=null}", string0);
      assertNull(streamId0.getStreamKind());
      assertEquals(0, streamId0.getSequence());
      assertEquals(0, streamId0.getColumn());
      assertNotNull(string0);
  }
}
