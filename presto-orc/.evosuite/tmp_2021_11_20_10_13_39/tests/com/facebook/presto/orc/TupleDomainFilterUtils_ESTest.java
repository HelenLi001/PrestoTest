/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 18:28:11 GMT 2021
 */

package com.facebook.presto.orc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.predicate.Domain;
import com.facebook.presto.common.type.TimeWithTimeZoneType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.orc.TupleDomainFilter;
import com.facebook.presto.orc.TupleDomainFilterUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TupleDomainFilterUtils_ESTest extends TupleDomainFilterUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1151;
      TupleDomainFilter tupleDomainFilter0 = TupleDomainFilterUtils.toBigintValues(longArray0, true);
      assertTrue(tupleDomainFilter0.testNull());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        TupleDomainFilterUtils.toFilter((Domain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.TupleDomainFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        TupleDomainFilterUtils.toBigintValues((long[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.TupleDomainFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        TupleDomainFilterUtils.toBigintValues(longArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.facebook.presto.orc.TupleDomainFilterUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-839L);
      TupleDomainFilter tupleDomainFilter0 = TupleDomainFilterUtils.toBigintValues(longArray0, true);
      assertTrue(tupleDomainFilter0.testNull());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[7] = 9223372036854775807L;
      TupleDomainFilter tupleDomainFilter0 = TupleDomainFilterUtils.toBigintValues(longArray0, false);
      assertFalse(tupleDomainFilter0.testNull());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        TupleDomainFilterUtils.toBigintValues(longArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // min must be less than max
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.VARCHAR;
      Domain domain0 = Domain.notNull(varcharType0);
      TupleDomainFilter tupleDomainFilter0 = TupleDomainFilterUtils.toFilter(domain0);
      assertFalse(tupleDomainFilter0.isPositionalFilter());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeWithTimeZoneType timeWithTimeZoneType0 = TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;
      Domain domain0 = Domain.all(timeWithTimeZoneType0);
      // Undeclared exception!
      try { 
        TupleDomainFilterUtils.toFilter(domain0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected allways-true filter
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createVarcharType(1185);
      Domain domain0 = Domain.onlyNull(varcharType0);
      TupleDomainFilter tupleDomainFilter0 = TupleDomainFilterUtils.toFilter(domain0);
      assertTrue(tupleDomainFilter0.testNull());
  }
}
