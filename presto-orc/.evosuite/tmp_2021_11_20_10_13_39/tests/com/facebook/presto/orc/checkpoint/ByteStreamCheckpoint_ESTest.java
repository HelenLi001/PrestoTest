/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 20:08:34 GMT 2021
 */

package com.facebook.presto.orc.checkpoint;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.orc.checkpoint.ByteStreamCheckpoint;
import com.facebook.presto.orc.checkpoint.Checkpoints;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteStreamCheckpoint_ESTest extends ByteStreamCheckpoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint(0, 0);
      byteStreamCheckpoint0.getOffset();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint(187, 187);
      byteStreamCheckpoint0.getOffset();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint(0, 0);
      byteStreamCheckpoint0.getInputStreamCheckpoint();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint(8, 8);
      byteStreamCheckpoint0.getInputStreamCheckpoint();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint((-13), (-13));
      byteStreamCheckpoint0.getOffset();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint((-13), (-13));
      assertEquals((-13), byteStreamCheckpoint0.getOffset());
      assertEquals((-13L), byteStreamCheckpoint0.getInputStreamCheckpoint());
      assertNotNull(byteStreamCheckpoint0);
      
      List<Integer> list0 = byteStreamCheckpoint0.toPositionList(true);
      assertEquals((-13), byteStreamCheckpoint0.getOffset());
      assertEquals((-13L), byteStreamCheckpoint0.getInputStreamCheckpoint());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      assertTrue(list0.contains((-13)));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint((-13), (-13));
      assertEquals((-13), byteStreamCheckpoint0.getOffset());
      assertEquals((-13L), byteStreamCheckpoint0.getInputStreamCheckpoint());
      assertNotNull(byteStreamCheckpoint0);
      
      String string0 = byteStreamCheckpoint0.toString();
      assertEquals((-13), byteStreamCheckpoint0.getOffset());
      assertEquals((-13L), byteStreamCheckpoint0.getInputStreamCheckpoint());
      assertEquals("ByteStreamCheckpoint{offset=-13, inputStreamCheckpoint=InputStreamCheckpoint{decompressedOffset=-13, compressedBlockOffset=-1}}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = null;
      try {
        byteStreamCheckpoint0 = new ByteStreamCheckpoint(false, (Checkpoints.ColumnPositionsList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.orc.checkpoint.InputStreamCheckpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ByteStreamCheckpoint byteStreamCheckpoint0 = new ByteStreamCheckpoint((-13), (-13));
      assertEquals((-13), byteStreamCheckpoint0.getOffset());
      assertEquals((-13L), byteStreamCheckpoint0.getInputStreamCheckpoint());
      assertNotNull(byteStreamCheckpoint0);
      
      long long0 = byteStreamCheckpoint0.getInputStreamCheckpoint();
      assertEquals((-13), byteStreamCheckpoint0.getOffset());
      assertEquals((-13L), byteStreamCheckpoint0.getInputStreamCheckpoint());
      assertEquals((-13L), long0);
  }
}
