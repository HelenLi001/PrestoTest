/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 19 01:04:35 GMT 2021
 */

package com.facebook.presto.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.sql.parser.AstBuilder;
import com.facebook.presto.sql.parser.ParsingOptions;
import com.facebook.presto.sql.parser.ParsingWarning;
import com.facebook.presto.sql.parser.SqlBaseParser;
import com.facebook.presto.sql.tree.Node;
import com.facebook.presto.sql.tree.NodeLocation;
import com.google.common.collect.ImmutableList;
import java.io.StringReader;
import java.util.function.Consumer;
import org.antlr.v4.runtime.CommonToken;
import org.antlr.v4.runtime.InterpreterRuleContext;
import org.antlr.v4.runtime.LexerInterpreter;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.UnbufferedCharStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNType;
import org.antlr.v4.runtime.tree.TerminalNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AstBuilder_ESTest extends AstBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonToken commonToken0 = new CommonToken(0);
      NodeLocation nodeLocation0 = AstBuilder.getLocation((Token) commonToken0);
      assertEquals(0, nodeLocation0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      Node node0 = astBuilder0.defaultResult();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.RelationPrimaryContext sqlBaseParser_RelationPrimaryContext0 = new SqlBaseParser.RelationPrimaryContext();
      SqlBaseParser.ParenthesizedRelationContext sqlBaseParser_ParenthesizedRelationContext0 = new SqlBaseParser.ParenthesizedRelationContext(sqlBaseParser_RelationPrimaryContext0);
      SqlBaseParser.TableNameContext sqlBaseParser_TableNameContext0 = new SqlBaseParser.TableNameContext(sqlBaseParser_ParenthesizedRelationContext0);
      SqlBaseParser.LateralContext sqlBaseParser_LateralContext0 = new SqlBaseParser.LateralContext(sqlBaseParser_TableNameContext0);
      SqlBaseParser.UnnestContext sqlBaseParser_UnnestContext0 = new SqlBaseParser.UnnestContext(sqlBaseParser_LateralContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitUnnest(sqlBaseParser_UnnestContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.TransactionModeContext sqlBaseParser_TransactionModeContext0 = new SqlBaseParser.TransactionModeContext();
      SqlBaseParser.TransactionAccessModeContext sqlBaseParser_TransactionAccessModeContext0 = new SqlBaseParser.TransactionAccessModeContext(sqlBaseParser_TransactionModeContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitTransactionAccessMode(sqlBaseParser_TransactionAccessModeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitSetRole((SqlBaseParser.SetRoleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitSampledRelation((SqlBaseParser.SampledRelationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitQueryNoWith((SqlBaseParser.QueryNoWithContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.LogicalBinaryContext sqlBaseParser_LogicalBinaryContext0 = new SqlBaseParser.LogicalBinaryContext(sqlBaseParser_BooleanExpressionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitLogicalBinary(sqlBaseParser_LogicalBinaryContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.PredicateContext sqlBaseParser_PredicateContext0 = new SqlBaseParser.PredicateContext();
      SqlBaseParser.ComparisonContext sqlBaseParser_ComparisonContext0 = new SqlBaseParser.ComparisonContext(sqlBaseParser_PredicateContext0);
      SqlBaseParser.InSubqueryContext sqlBaseParser_InSubqueryContext0 = new SqlBaseParser.InSubqueryContext(sqlBaseParser_ComparisonContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitInSubquery(sqlBaseParser_InSubqueryContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.LogicalBinaryContext sqlBaseParser_LogicalBinaryContext0 = new SqlBaseParser.LogicalBinaryContext(sqlBaseParser_BooleanExpressionContext0);
      SqlBaseParser.PredicateContext sqlBaseParser_PredicateContext0 = new SqlBaseParser.PredicateContext(sqlBaseParser_LogicalBinaryContext0, (-1));
      SqlBaseParser.InListContext sqlBaseParser_InListContext0 = new SqlBaseParser.InListContext(sqlBaseParser_PredicateContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitInList(sqlBaseParser_InListContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitGrant((SqlBaseParser.GrantContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.TransactionModeContext sqlBaseParser_TransactionModeContext0 = new SqlBaseParser.TransactionModeContext((ParserRuleContext) null, 1255);
      SqlBaseParser.QuerySpecificationContext sqlBaseParser_QuerySpecificationContext0 = new SqlBaseParser.QuerySpecificationContext(sqlBaseParser_TransactionModeContext0, 1255);
      SqlBaseParser.ExplainOptionContext sqlBaseParser_ExplainOptionContext0 = new SqlBaseParser.ExplainOptionContext(sqlBaseParser_QuerySpecificationContext0, 1255);
      SqlBaseParser.ExplainTypeContext sqlBaseParser_ExplainTypeContext0 = new SqlBaseParser.ExplainTypeContext(sqlBaseParser_ExplainOptionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitExplainType(sqlBaseParser_ExplainTypeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.GrantContext sqlBaseParser_GrantContext0 = new SqlBaseParser.GrantContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.DropTableContext sqlBaseParser_DropTableContext0 = new SqlBaseParser.DropTableContext(sqlBaseParser_GrantContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitDropTable(sqlBaseParser_DropTableContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.NamedQueryContext sqlBaseParser_NamedQueryContext0 = new SqlBaseParser.NamedQueryContext(sqlBaseParser_BooleanExpressionContext0, (-2059));
      SqlBaseParser.AliasedRelationContext sqlBaseParser_AliasedRelationContext0 = new SqlBaseParser.AliasedRelationContext(sqlBaseParser_NamedQueryContext0, 2582);
      // Undeclared exception!
      try { 
        astBuilder0.visitAliasedRelation(sqlBaseParser_AliasedRelationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.runtime.tree.AbstractParseTreeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AstBuilder astBuilder0 = null;
      try {
        astBuilder0 = new AstBuilder((ParsingOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parsingOptions is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        AstBuilder.getLocation((ParserRuleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        AstBuilder.getLocation((TerminalNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // terminalNode is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.NamedQueryContext sqlBaseParser_NamedQueryContext0 = new SqlBaseParser.NamedQueryContext(sqlBaseParser_BooleanExpressionContext0, (-2059));
      SqlBaseParser.GrantorContext sqlBaseParser_GrantorContext0 = new SqlBaseParser.GrantorContext(sqlBaseParser_NamedQueryContext0, (-2059));
      SqlBaseParser.CurrentUserGrantorContext sqlBaseParser_CurrentUserGrantorContext0 = new SqlBaseParser.CurrentUserGrantorContext(sqlBaseParser_GrantorContext0);
      sqlBaseParser_NamedQueryContext0.addAnyChild(sqlBaseParser_CurrentUserGrantorContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitChildren(sqlBaseParser_NamedQueryContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // not yet implemented
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions.DecimalLiteralTreatment parsingOptions_DecimalLiteralTreatment0 = ParsingOptions.DecimalLiteralTreatment.REJECT;
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(parsingOptions_DecimalLiteralTreatment0).when(parsingOptions0).getDecimalLiteralTreatment();
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.NumberContext sqlBaseParser_NumberContext0 = new SqlBaseParser.NumberContext();
      SqlBaseParser.DecimalLiteralContext sqlBaseParser_DecimalLiteralContext0 = new SqlBaseParser.DecimalLiteralContext(sqlBaseParser_NumberContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitDecimalLiteral(sqlBaseParser_DecimalLiteralContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // line 1:1: Unexpected decimal literal: 
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions.DecimalLiteralTreatment parsingOptions_DecimalLiteralTreatment0 = ParsingOptions.DecimalLiteralTreatment.AS_DECIMAL;
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(parsingOptions_DecimalLiteralTreatment0).when(parsingOptions0).getDecimalLiteralTreatment();
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.NumberContext sqlBaseParser_NumberContext0 = new SqlBaseParser.NumberContext();
      SqlBaseParser.DecimalLiteralContext sqlBaseParser_DecimalLiteralContext0 = new SqlBaseParser.DecimalLiteralContext(sqlBaseParser_NumberContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitDecimalLiteral(sqlBaseParser_DecimalLiteralContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions.DecimalLiteralTreatment parsingOptions_DecimalLiteralTreatment0 = ParsingOptions.DecimalLiteralTreatment.AS_DOUBLE;
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(parsingOptions_DecimalLiteralTreatment0).when(parsingOptions0).getDecimalLiteralTreatment();
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.NumberContext sqlBaseParser_NumberContext0 = new SqlBaseParser.NumberContext();
      SqlBaseParser.DecimalLiteralContext sqlBaseParser_DecimalLiteralContext0 = new SqlBaseParser.DecimalLiteralContext(sqlBaseParser_NumberContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitDecimalLiteral(sqlBaseParser_DecimalLiteralContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.RelationPrimaryContext sqlBaseParser_RelationPrimaryContext0 = new SqlBaseParser.RelationPrimaryContext();
      SqlBaseParser.ParenthesizedRelationContext sqlBaseParser_ParenthesizedRelationContext0 = new SqlBaseParser.ParenthesizedRelationContext(sqlBaseParser_RelationPrimaryContext0);
      SqlBaseParser.ColumnDefinitionContext sqlBaseParser_ColumnDefinitionContext0 = new SqlBaseParser.ColumnDefinitionContext(sqlBaseParser_ParenthesizedRelationContext0, (-1));
      // Undeclared exception!
      try { 
        astBuilder0.visitColumnDefinition(sqlBaseParser_ColumnDefinitionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.PrimaryExpressionContext sqlBaseParser_PrimaryExpressionContext0 = new SqlBaseParser.PrimaryExpressionContext();
      SqlBaseParser.IntervalLiteralContext sqlBaseParser_IntervalLiteralContext0 = new SqlBaseParser.IntervalLiteralContext(sqlBaseParser_PrimaryExpressionContext0);
      SqlBaseParser.CastContext sqlBaseParser_CastContext0 = new SqlBaseParser.CastContext(sqlBaseParser_IntervalLiteralContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitCast(sqlBaseParser_CastContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.LogicalBinaryContext sqlBaseParser_LogicalBinaryContext0 = new SqlBaseParser.LogicalBinaryContext(sqlBaseParser_BooleanExpressionContext0);
      SqlBaseParser.PredicatedContext sqlBaseParser_PredicatedContext0 = new SqlBaseParser.PredicatedContext(sqlBaseParser_LogicalBinaryContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitPredicated(sqlBaseParser_PredicatedContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.runtime.tree.AbstractParseTreeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.PrepareContext sqlBaseParser_PrepareContext0 = new SqlBaseParser.PrepareContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.DropFunctionContext sqlBaseParser_DropFunctionContext0 = new SqlBaseParser.DropFunctionContext(sqlBaseParser_PrepareContext0);
      SqlBaseParser.RenameColumnContext sqlBaseParser_RenameColumnContext0 = new SqlBaseParser.RenameColumnContext(sqlBaseParser_DropFunctionContext0);
      SqlBaseParser.RevokeContext sqlBaseParser_RevokeContext0 = new SqlBaseParser.RevokeContext(sqlBaseParser_RenameColumnContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitRevoke(sqlBaseParser_RevokeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.TransactionModeContext sqlBaseParser_TransactionModeContext0 = new SqlBaseParser.TransactionModeContext((ParserRuleContext) null, 1255);
      SqlBaseParser.QuerySpecificationContext sqlBaseParser_QuerySpecificationContext0 = new SqlBaseParser.QuerySpecificationContext(sqlBaseParser_TransactionModeContext0, 1255);
      // Undeclared exception!
      try { 
        astBuilder0.visitQuerySpecification(sqlBaseParser_QuerySpecificationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.ShowCreateFunctionContext sqlBaseParser_ShowCreateFunctionContext0 = new SqlBaseParser.ShowCreateFunctionContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.AlterFunctionContext sqlBaseParser_AlterFunctionContext0 = new SqlBaseParser.AlterFunctionContext(sqlBaseParser_ShowCreateFunctionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitAlterFunction(sqlBaseParser_AlterFunctionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.CreateMaterializedViewContext sqlBaseParser_CreateMaterializedViewContext0 = new SqlBaseParser.CreateMaterializedViewContext(sqlBaseParser_StatementContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitCreateMaterializedView(sqlBaseParser_CreateMaterializedViewContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.PrepareContext sqlBaseParser_PrepareContext0 = new SqlBaseParser.PrepareContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.DropFunctionContext sqlBaseParser_DropFunctionContext0 = new SqlBaseParser.DropFunctionContext(sqlBaseParser_PrepareContext0);
      SqlBaseParser.InsertIntoContext sqlBaseParser_InsertIntoContext0 = new SqlBaseParser.InsertIntoContext(sqlBaseParser_DropFunctionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitInsertInto(sqlBaseParser_InsertIntoContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.PrepareContext sqlBaseParser_PrepareContext0 = new SqlBaseParser.PrepareContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.CreateTableAsSelectContext sqlBaseParser_CreateTableAsSelectContext0 = new SqlBaseParser.CreateTableAsSelectContext(sqlBaseParser_PrepareContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitCreateTableAsSelect(sqlBaseParser_CreateTableAsSelectContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.CallArgumentContext sqlBaseParser_CallArgumentContext0 = new SqlBaseParser.CallArgumentContext();
      SqlBaseParser.NamedArgumentContext sqlBaseParser_NamedArgumentContext0 = new SqlBaseParser.NamedArgumentContext(sqlBaseParser_CallArgumentContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitNamedArgument(sqlBaseParser_NamedArgumentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      String[] stringArray0 = new String[4];
      Vocabulary vocabulary0 = VocabularyImpl.fromTokenNames(stringArray0);
      ImmutableList<String> immutableList0 = ImmutableList.of("`]H VV&CYF']m)", "Invalid hexadecimal digit: ", "`]H VV&CYF']m)", "H~<", "", "uoqbt=+D-jZ", "", "H~<", "`]H VV&CYF']m)", "0N&%H@u:ko,");
      ATNType aTNType0 = ATNType.LEXER;
      ATN aTN0 = new ATN(aTNType0, 4948);
      StringReader stringReader0 = new StringReader("0N&%H@u:ko,");
      UnbufferedCharStream unbufferedCharStream0 = new UnbufferedCharStream(stringReader0, 84);
      LexerInterpreter lexerInterpreter0 = new LexerInterpreter("`]H VV&CYF']m)", vocabulary0, immutableList0, immutableList0, immutableList0, aTN0, unbufferedCharStream0);
      Token token0 = lexerInterpreter0.emitEOF();
      SqlBaseParser.AddColumnContext sqlBaseParser_AddColumnContext0 = mock(SqlBaseParser.AddColumnContext.class, new ViolatedAssumptionAnswer());
      doReturn((SqlBaseParser.QualifiedNameContext) null).when(sqlBaseParser_AddColumnContext0).qualifiedName();
      doReturn(token0).when(sqlBaseParser_AddColumnContext0).getStart();
      // Undeclared exception!
      try { 
        astBuilder0.visitAddColumn(sqlBaseParser_AddColumnContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.DropMaterializedViewContext sqlBaseParser_DropMaterializedViewContext0 = new SqlBaseParser.DropMaterializedViewContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.RevokeRolesContext sqlBaseParser_RevokeRolesContext0 = new SqlBaseParser.RevokeRolesContext(sqlBaseParser_DropMaterializedViewContext0);
      SqlBaseParser.ShowRoleGrantsContext sqlBaseParser_ShowRoleGrantsContext0 = new SqlBaseParser.ShowRoleGrantsContext(sqlBaseParser_RevokeRolesContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitShowRoleGrants(sqlBaseParser_ShowRoleGrantsContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitUnquotedIdentifier((SqlBaseParser.UnquotedIdentifierContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      SqlBaseParser.ParameterContext sqlBaseParser_ParameterContext0 = mock(SqlBaseParser.ParameterContext.class, new ViolatedAssumptionAnswer());
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.FilterContext sqlBaseParser_FilterContext0 = new SqlBaseParser.FilterContext(sqlBaseParser_ParameterContext0, 0);
      // Undeclared exception!
      try { 
        astBuilder0.visitFilter(sqlBaseParser_FilterContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.runtime.tree.AbstractParseTreeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitPrepare((SqlBaseParser.PrepareContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.PrimaryExpressionContext sqlBaseParser_PrimaryExpressionContext0 = new SqlBaseParser.PrimaryExpressionContext();
      SqlBaseParser.GroupingOperationContext sqlBaseParser_GroupingOperationContext0 = new SqlBaseParser.GroupingOperationContext(sqlBaseParser_PrimaryExpressionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitGroupingOperation(sqlBaseParser_GroupingOperationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.ShowCatalogsContext sqlBaseParser_ShowCatalogsContext0 = new SqlBaseParser.ShowCatalogsContext(sqlBaseParser_StatementContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitShowCatalogs(sqlBaseParser_ShowCatalogsContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.PredicateContext sqlBaseParser_PredicateContext0 = new SqlBaseParser.PredicateContext();
      SqlBaseParser.BetweenContext sqlBaseParser_BetweenContext0 = new SqlBaseParser.BetweenContext(sqlBaseParser_PredicateContext0);
      SqlBaseParser.QuantifiedComparisonContext sqlBaseParser_QuantifiedComparisonContext0 = new SqlBaseParser.QuantifiedComparisonContext(sqlBaseParser_BetweenContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitQuantifiedComparison(sqlBaseParser_QuantifiedComparisonContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitStandaloneExpression((SqlBaseParser.StandaloneExpressionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.NumberContext sqlBaseParser_NumberContext0 = new SqlBaseParser.NumberContext();
      SqlBaseParser.DecimalLiteralContext sqlBaseParser_DecimalLiteralContext0 = new SqlBaseParser.DecimalLiteralContext(sqlBaseParser_NumberContext0);
      SqlBaseParser.DoubleLiteralContext sqlBaseParser_DoubleLiteralContext0 = new SqlBaseParser.DoubleLiteralContext(sqlBaseParser_DecimalLiteralContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitDoubleLiteral(sqlBaseParser_DoubleLiteralContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.PrimaryExpressionContext sqlBaseParser_PrimaryExpressionContext0 = new SqlBaseParser.PrimaryExpressionContext((ParserRuleContext) null, 0);
      SqlBaseParser.NullLiteralContext sqlBaseParser_NullLiteralContext0 = new SqlBaseParser.NullLiteralContext(sqlBaseParser_PrimaryExpressionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitNullLiteral(sqlBaseParser_NullLiteralContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.QueryPrimaryContext sqlBaseParser_QueryPrimaryContext0 = new SqlBaseParser.QueryPrimaryContext();
      SqlBaseParser.InlineTableContext sqlBaseParser_InlineTableContext0 = new SqlBaseParser.InlineTableContext(sqlBaseParser_QueryPrimaryContext0);
      SqlBaseParser.SubqueryContext sqlBaseParser_SubqueryContext0 = new SqlBaseParser.SubqueryContext(sqlBaseParser_InlineTableContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitSubquery(sqlBaseParser_SubqueryContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext(sqlBaseParser_BooleanExpressionContext0, 0);
      SqlBaseParser.ShowCatalogsContext sqlBaseParser_ShowCatalogsContext0 = new SqlBaseParser.ShowCatalogsContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.ShowColumnsContext sqlBaseParser_ShowColumnsContext0 = new SqlBaseParser.ShowColumnsContext(sqlBaseParser_ShowCatalogsContext0);
      SqlBaseParser.RevokeContext sqlBaseParser_RevokeContext0 = new SqlBaseParser.RevokeContext(sqlBaseParser_ShowColumnsContext0);
      SqlBaseParser.DescribeOutputContext sqlBaseParser_DescribeOutputContext0 = new SqlBaseParser.DescribeOutputContext(sqlBaseParser_RevokeContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitDescribeOutput(sqlBaseParser_DescribeOutputContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitSingleGroupingSet((SqlBaseParser.SingleGroupingSetContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.PrepareContext sqlBaseParser_PrepareContext0 = new SqlBaseParser.PrepareContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.DropFunctionContext sqlBaseParser_DropFunctionContext0 = new SqlBaseParser.DropFunctionContext(sqlBaseParser_PrepareContext0);
      SqlBaseParser.RenameColumnContext sqlBaseParser_RenameColumnContext0 = new SqlBaseParser.RenameColumnContext(sqlBaseParser_DropFunctionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitRenameColumn(sqlBaseParser_RenameColumnContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitArrayConstructor((SqlBaseParser.ArrayConstructorContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.ReturnStatementContext sqlBaseParser_ReturnStatementContext0 = new SqlBaseParser.ReturnStatementContext((ParserRuleContext) null, (-344));
      // Undeclared exception!
      try { 
        astBuilder0.visitReturnStatement(sqlBaseParser_ReturnStatementContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.runtime.tree.AbstractParseTreeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.SubqueryRelationContext sqlBaseParser_SubqueryRelationContext0 = mock(SqlBaseParser.SubqueryRelationContext.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(sqlBaseParser_SubqueryRelationContext0).getStart();
      // Undeclared exception!
      try { 
        astBuilder0.visitSubqueryRelation(sqlBaseParser_SubqueryRelationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.FrameBoundContext sqlBaseParser_FrameBoundContext0 = new SqlBaseParser.FrameBoundContext();
      SqlBaseParser.UnboundedFrameContext sqlBaseParser_UnboundedFrameContext0 = new SqlBaseParser.UnboundedFrameContext(sqlBaseParser_FrameBoundContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitUnboundedFrame(sqlBaseParser_UnboundedFrameContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitShowColumns((SqlBaseParser.ShowColumnsContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitRepeatableRead((SqlBaseParser.RepeatableReadContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitConcatenation((SqlBaseParser.ConcatenationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext();
      SqlBaseParser.CreateMaterializedViewContext sqlBaseParser_CreateMaterializedViewContext0 = new SqlBaseParser.CreateMaterializedViewContext(sqlBaseParser_StatementContext0);
      SqlBaseParser.CreateTypeContext sqlBaseParser_CreateTypeContext0 = new SqlBaseParser.CreateTypeContext(sqlBaseParser_CreateMaterializedViewContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitCreateType(sqlBaseParser_CreateTypeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitRowConstructor((SqlBaseParser.RowConstructorContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.LogicalBinaryContext sqlBaseParser_LogicalBinaryContext0 = new SqlBaseParser.LogicalBinaryContext(sqlBaseParser_BooleanExpressionContext0);
      SqlBaseParser.GroupingElementContext sqlBaseParser_GroupingElementContext0 = new SqlBaseParser.GroupingElementContext(sqlBaseParser_LogicalBinaryContext0, 0);
      SqlBaseParser.RollupContext sqlBaseParser_RollupContext0 = new SqlBaseParser.RollupContext(sqlBaseParser_GroupingElementContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitRollup(sqlBaseParser_RollupContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitRollback((SqlBaseParser.RollbackContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.RelationPrimaryContext sqlBaseParser_RelationPrimaryContext0 = new SqlBaseParser.RelationPrimaryContext();
      SqlBaseParser.ParenthesizedRelationContext sqlBaseParser_ParenthesizedRelationContext0 = new SqlBaseParser.ParenthesizedRelationContext(sqlBaseParser_RelationPrimaryContext0);
      SqlBaseParser.TableNameContext sqlBaseParser_TableNameContext0 = new SqlBaseParser.TableNameContext(sqlBaseParser_ParenthesizedRelationContext0);
      SqlBaseParser.LateralContext sqlBaseParser_LateralContext0 = new SqlBaseParser.LateralContext(sqlBaseParser_TableNameContext0);
      SqlBaseParser.ValueExpressionContext sqlBaseParser_ValueExpressionContext0 = new SqlBaseParser.ValueExpressionContext(sqlBaseParser_LateralContext0, 0);
      SqlBaseParser.ArithmeticUnaryContext sqlBaseParser_ArithmeticUnaryContext0 = new SqlBaseParser.ArithmeticUnaryContext(sqlBaseParser_ValueExpressionContext0);
      SqlBaseParser.ArithmeticBinaryContext sqlBaseParser_ArithmeticBinaryContext0 = new SqlBaseParser.ArithmeticBinaryContext(sqlBaseParser_ArithmeticUnaryContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitArithmeticBinary(sqlBaseParser_ArithmeticBinaryContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.BooleanExpressionContext sqlBaseParser_BooleanExpressionContext0 = new SqlBaseParser.BooleanExpressionContext();
      SqlBaseParser.LogicalBinaryContext sqlBaseParser_LogicalBinaryContext0 = new SqlBaseParser.LogicalBinaryContext(sqlBaseParser_BooleanExpressionContext0);
      InterpreterRuleContext interpreterRuleContext0 = new InterpreterRuleContext(sqlBaseParser_LogicalBinaryContext0, (-154), (-1));
      SqlBaseParser.TransactionModeContext sqlBaseParser_TransactionModeContext0 = new SqlBaseParser.TransactionModeContext(interpreterRuleContext0, (-1));
      SqlBaseParser.TransactionAccessModeContext sqlBaseParser_TransactionAccessModeContext0 = new SqlBaseParser.TransactionAccessModeContext(sqlBaseParser_TransactionModeContext0);
      SqlBaseParser.IsolationLevelContext sqlBaseParser_IsolationLevelContext0 = new SqlBaseParser.IsolationLevelContext(sqlBaseParser_TransactionAccessModeContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitIsolationLevel(sqlBaseParser_IsolationLevelContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.runtime.tree.AbstractParseTreeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitLikeClause((SqlBaseParser.LikeClauseContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.LevelOfIsolationContext sqlBaseParser_LevelOfIsolationContext0 = new SqlBaseParser.LevelOfIsolationContext();
      SqlBaseParser.SerializableContext sqlBaseParser_SerializableContext0 = new SqlBaseParser.SerializableContext(sqlBaseParser_LevelOfIsolationContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitSerializable(sqlBaseParser_SerializableContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitParenthesizedExpression((SqlBaseParser.ParenthesizedExpressionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.StatementContext sqlBaseParser_StatementContext0 = new SqlBaseParser.StatementContext((ParserRuleContext) null, (-1221));
      SqlBaseParser.ShowStatsForQueryContext sqlBaseParser_ShowStatsForQueryContext0 = new SqlBaseParser.ShowStatsForQueryContext(sqlBaseParser_StatementContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitShowStatsForQuery(sqlBaseParser_ShowStatsForQueryContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.PrimaryExpressionContext sqlBaseParser_PrimaryExpressionContext0 = new SqlBaseParser.PrimaryExpressionContext();
      SqlBaseParser.ParenthesizedExpressionContext sqlBaseParser_ParenthesizedExpressionContext0 = new SqlBaseParser.ParenthesizedExpressionContext(sqlBaseParser_PrimaryExpressionContext0);
      SqlBaseParser.SearchedCaseContext sqlBaseParser_SearchedCaseContext0 = new SqlBaseParser.SearchedCaseContext(sqlBaseParser_ParenthesizedExpressionContext0);
      SqlBaseParser.SubscriptContext sqlBaseParser_SubscriptContext0 = new SqlBaseParser.SubscriptContext(sqlBaseParser_SearchedCaseContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitSubscript(sqlBaseParser_SubscriptContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.RelationPrimaryContext sqlBaseParser_RelationPrimaryContext0 = new SqlBaseParser.RelationPrimaryContext();
      SqlBaseParser.PrimaryExpressionContext sqlBaseParser_PrimaryExpressionContext0 = new SqlBaseParser.PrimaryExpressionContext(sqlBaseParser_RelationPrimaryContext0, 3002);
      SqlBaseParser.SubstringContext sqlBaseParser_SubstringContext0 = new SqlBaseParser.SubstringContext(sqlBaseParser_PrimaryExpressionContext0);
      SqlBaseParser.SearchedCaseContext sqlBaseParser_SearchedCaseContext0 = new SqlBaseParser.SearchedCaseContext(sqlBaseParser_SubstringContext0);
      SqlBaseParser.NormalizeContext sqlBaseParser_NormalizeContext0 = new SqlBaseParser.NormalizeContext(sqlBaseParser_SearchedCaseContext0);
      SqlBaseParser.PositionContext sqlBaseParser_PositionContext0 = new SqlBaseParser.PositionContext(sqlBaseParser_NormalizeContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitPosition(sqlBaseParser_PositionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.WhenClauseContext sqlBaseParser_WhenClauseContext0 = new SqlBaseParser.WhenClauseContext((ParserRuleContext) null, (-1));
      // Undeclared exception!
      try { 
        astBuilder0.visitWhenClause(sqlBaseParser_WhenClauseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitCube((SqlBaseParser.CubeContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      SqlBaseParser.ParameterContext sqlBaseParser_ParameterContext0 = mock(SqlBaseParser.ParameterContext.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(sqlBaseParser_ParameterContext0).getStart();
      // Undeclared exception!
      try { 
        astBuilder0.visitParameter(sqlBaseParser_ParameterContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        AstBuilder.getLocation((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // token is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitColumnReference((SqlBaseParser.ColumnReferenceContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.sql.parser.AstBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      // Undeclared exception!
      try { 
        astBuilder0.visitBooleanValue((SqlBaseParser.BooleanValueContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parserRuleContext is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Consumer<ParsingWarning> consumer0 = (Consumer<ParsingWarning>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ParsingOptions parsingOptions0 = mock(ParsingOptions.class, new ViolatedAssumptionAnswer());
      doReturn(consumer0).when(parsingOptions0).getWarningConsumer();
      AstBuilder astBuilder0 = new AstBuilder(parsingOptions0);
      ParserRuleContext parserRuleContext0 = new ParserRuleContext();
      SqlBaseParser.PrimaryExpressionContext sqlBaseParser_PrimaryExpressionContext0 = new SqlBaseParser.PrimaryExpressionContext(parserRuleContext0, 0);
      SqlBaseParser.CurrentUserContext sqlBaseParser_CurrentUserContext0 = new SqlBaseParser.CurrentUserContext(sqlBaseParser_PrimaryExpressionContext0);
      // Undeclared exception!
      try { 
        astBuilder0.visitCurrentUser(sqlBaseParser_CurrentUserContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // terminalNode is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
