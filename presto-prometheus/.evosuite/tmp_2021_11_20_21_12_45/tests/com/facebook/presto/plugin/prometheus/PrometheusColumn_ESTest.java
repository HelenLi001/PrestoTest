/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 21 05:21:11 GMT 2021
 */

package com.facebook.presto.plugin.prometheus;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeSignature;
import com.facebook.presto.plugin.prometheus.PrometheusColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrometheusColumn_ESTest extends PrometheusColumn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeSignature typeSignature0 = mock(TypeSignature.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(typeSignature0).isCalculated();
      TypeSignature typeSignature1 = PrometheusColumn.mapType(typeSignature0, typeSignature0);
      assertTrue(typeSignature1.isCalculated());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        PrometheusColumn.mapType((TypeSignature) null, (TypeSignature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // value is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrometheusColumn prometheusColumn0 = null;
      try {
        prometheusColumn0 = new PrometheusColumn("labels", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("labels", type0);
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      PrometheusColumn prometheusColumn1 = new PrometheusColumn("labels", type1);
      boolean boolean0 = prometheusColumn0.equals(prometheusColumn1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("labels", type0);
      Type type1 = prometheusColumn0.getType();
      PrometheusColumn prometheusColumn1 = new PrometheusColumn("timestamp", type1);
      boolean boolean0 = prometheusColumn0.equals(prometheusColumn1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("labels", type0);
      Type type1 = prometheusColumn0.getType();
      PrometheusColumn prometheusColumn1 = new PrometheusColumn("labels", type1);
      boolean boolean0 = prometheusColumn0.equals(prometheusColumn1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("labels", type0);
      boolean boolean0 = prometheusColumn0.equals(prometheusColumn0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("value", type0);
      Type type1 = prometheusColumn0.getType();
      boolean boolean0 = prometheusColumn0.equals(type1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("value", type0);
      Type type1 = prometheusColumn0.getType();
      PrometheusColumn prometheusColumn1 = null;
      try {
        prometheusColumn1 = new PrometheusColumn("P4HyperLogLog", type1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column name must be in (\"labels\"), (\"timestamp\"), (\"value\")
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("timestamp", type0);
      boolean boolean0 = prometheusColumn0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrometheusColumn prometheusColumn0 = null;
      try {
        prometheusColumn0 = new PrometheusColumn("", (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is null or is empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("labels", type0);
      String string0 = prometheusColumn0.getName();
      assertEquals("labels", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("labels", type0);
      String string0 = prometheusColumn0.toString();
      assertEquals("labels:null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      PrometheusColumn prometheusColumn0 = new PrometheusColumn("value", type0);
      prometheusColumn0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeSignature typeSignature0 = mock(TypeSignature.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(typeSignature0).isCalculated();
      TypeSignature typeSignature1 = PrometheusColumn.mapType(typeSignature0, typeSignature0);
      TypeSignature typeSignature2 = PrometheusColumn.mapType(typeSignature1, typeSignature1);
      TypeSignature typeSignature3 = PrometheusColumn.mapType(typeSignature2, typeSignature1);
      assertFalse(typeSignature3.equals((Object)typeSignature2));
  }
}
