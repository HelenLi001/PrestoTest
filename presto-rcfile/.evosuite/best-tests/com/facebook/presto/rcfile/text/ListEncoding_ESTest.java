/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 20:24:20 GMT 2021
 */

package com.facebook.presto.rcfile.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.block.Block;
import com.facebook.presto.common.block.BlockBuilder;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.rcfile.ColumnData;
import com.facebook.presto.rcfile.text.ListEncoding;
import com.facebook.presto.rcfile.text.TextColumnEncoding;
import io.airlift.slice.Slice;
import io.airlift.slice.SliceOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ListEncoding_ESTest extends ListEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)1, textColumnEncoding0);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(blockBuilder0).beginBlockEntry();
      doReturn((BlockBuilder) null).when(blockBuilder0).closeEntry();
      listEncoding0.decodeValueInto(0, blockBuilder0, (Slice) null, (byte)1, (-3833));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(block0).getBlock(anyInt());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(blockBuilder0).build();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      byte[] byteArray0 = new byte[3];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)95, textColumnEncoding0);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn((int)(byte) (-1)).when(columnData0).rowCount();
      Block block1 = listEncoding0.decodeColumn(columnData0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        listEncoding0.encodeValueInto(1, block1, 1024, sliceOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.ListEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(blockBuilder0).build();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      byte[] byteArray0 = new byte[3];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)95, textColumnEncoding0);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn((int)(byte) (-1)).when(columnData0).rowCount();
      Block block1 = listEncoding0.decodeColumn(columnData0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        listEncoding0.encodeValueInto((byte) (-69), block1, (byte)95, sliceOutput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -69
         //
         verifyException("com.facebook.presto.rcfile.text.BlockEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) (byte) (-48), textColumnEncoding0);
      // Undeclared exception!
      try { 
        listEncoding0.decodeValueInto((byte) (-48), (BlockBuilder) null, (Slice) null, (byte)98, (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -48
         //
         verifyException("com.facebook.presto.rcfile.text.BlockEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) byteArray0[1], textColumnEncoding0);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(blockBuilder1).beginBlockEntry();
      // Undeclared exception!
      try { 
        listEncoding0.decodeValueInto(0, blockBuilder1, (Slice) null, (-175), (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.ListEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)0, textColumnEncoding0);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(blockBuilder1).beginBlockEntry();
      doReturn(blockBuilder0).when(blockBuilder1).closeEntry();
      listEncoding0.decodeValueInto(0, blockBuilder1, (Slice) null, (byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(2305, 2305, 2305, 2305, 2305).when(block0).getPositionCount();
      doReturn(false, false, true, true, true).when(block0).isNull(anyInt());
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(block1).getBlock(anyInt());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block1).when(blockBuilder0).build();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      byte[] byteArray0 = new byte[3];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)95, textColumnEncoding0);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn((int)(byte) (-1)).when(columnData0).rowCount();
      Block block2 = listEncoding0.decodeColumn(columnData0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      listEncoding0.encodeValueInto(1, block2, 1024, sliceOutput0);
      assertNotSame(block2, block0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(1048576, 0).when(block0).getPositionCount();
      doReturn(false).when(block0).isNull(anyInt());
      Block block1 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(block1).getBlock(anyInt());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block1).when(blockBuilder0).build();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      byte[] byteArray0 = new byte[3];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      ListEncoding listEncoding0 = new ListEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)95, textColumnEncoding0);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn((int)(byte) (-1)).when(columnData0).rowCount();
      Block block2 = listEncoding0.decodeColumn(columnData0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      listEncoding0.encodeValueInto(1, block2, 1024, sliceOutput0);
      assertNotSame(block2, block0);
  }
}
