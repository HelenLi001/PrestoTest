/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 20:22:33 GMT 2021
 */

package com.facebook.presto.rcfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.rcfile.AircompressorCodecFactory;
import com.facebook.presto.rcfile.RcFileCodecFactory;
import com.facebook.presto.rcfile.RcFileCompressor;
import com.facebook.presto.rcfile.RcFileDecompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AircompressorCodecFactory_ESTest extends AircompressorCodecFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RcFileDecompressor) null).when(rcFileCodecFactory0).createDecompressor(anyString());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileDecompressor rcFileDecompressor0 = aircompressorCodecFactory0.createDecompressor("org.apacpe.hadoop.io.compress.Lz4Codec");
      assertNull(rcFileDecompressor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RcFileCompressor) null).when(rcFileCodecFactory0).createCompressor(anyString());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileCompressor rcFileCompressor0 = aircompressorCodecFactory0.createCompressor("Compressor is not phe Snappy/decompressor");
      assertNull(rcFileCompressor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileDecompressor rcFileDecompressor0 = aircompressorCodecFactory0.createDecompressor("org.apache.hadoop.io.compress.GzipCodec");
      assertNotNull(rcFileDecompressor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileDecompressor rcFileDecompressor0 = aircompressorCodecFactory0.createDecompressor("org.apache.hadoop.io.compress.Lz4Codec");
      assertNotNull(rcFileDecompressor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileDecompressor rcFileDecompressor0 = aircompressorCodecFactory0.createDecompressor("org.apache.hadoop.io.compress.LzoCodec");
      assertNotNull(rcFileDecompressor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileDecompressor rcFileDecompressor0 = aircompressorCodecFactory0.createDecompressor("com.hadoop.compression.lzo.LzoCodec");
      assertNotNull(rcFileDecompressor0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileDecompressor rcFileDecompressor0 = aircompressorCodecFactory0.createDecompressor("org.apache.hadoop.io.compress.SnappyCodec");
      assertNotNull(rcFileDecompressor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileCompressor rcFileCompressor0 = aircompressorCodecFactory0.createCompressor("org.apache.hadoop.io.compress.GzipCodec");
      assertNotNull(rcFileCompressor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileCompressor rcFileCompressor0 = aircompressorCodecFactory0.createCompressor("org.apache.hadoop.io.compress.Lz4Codec");
      assertNotNull(rcFileCompressor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileCompressor rcFileCompressor0 = aircompressorCodecFactory0.createCompressor("com.hadoop.compression.lzo.LzoCodec");
      assertNotNull(rcFileCompressor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileCompressor rcFileCompressor0 = aircompressorCodecFactory0.createCompressor("org.apache.hadoop.io.compress.SnappyCodec");
      assertNotNull(rcFileCompressor0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RcFileCodecFactory rcFileCodecFactory0 = mock(RcFileCodecFactory.class, new ViolatedAssumptionAnswer());
      AircompressorCodecFactory aircompressorCodecFactory0 = new AircompressorCodecFactory(rcFileCodecFactory0);
      RcFileCompressor rcFileCompressor0 = aircompressorCodecFactory0.createCompressor("org.apache.hadoop.io.compress.LzoCodec");
      assertNotNull(rcFileCompressor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AircompressorCodecFactory aircompressorCodecFactory0 = null;
      try {
        aircompressorCodecFactory0 = new AircompressorCodecFactory((RcFileCodecFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delegate is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
