/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 20:21:07 GMT 2021
 */

package com.facebook.presto.rcfile.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.block.Block;
import com.facebook.presto.common.block.BlockBuilder;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.rcfile.ColumnData;
import com.facebook.presto.rcfile.EncodeOutput;
import com.facebook.presto.rcfile.text.DecimalEncoding;
import io.airlift.slice.Slice;
import io.airlift.slice.SliceOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecimalEncoding_ESTest extends DecimalEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        decimalEncoding0.decodeValueInto((-916), blockBuilder0, (Slice) null, 1024, (-916));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        decimalEncoding0.decodeValueInto(0, blockBuilder0, (Slice) null, 0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      // Undeclared exception!
      try { 
        decimalEncoding0.decodeValueInto((-1038), blockBuilder0, (Slice) null, 1, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        decimalEncoding0.decodeValueInto(968, blockBuilder0, (Slice) null, 33, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.DecimalEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        decimalEncoding0.encodeValueInto(1038, (Block) null, 54, sliceOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.DecimalEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(blockBuilder0).getPositionCount();
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      decimalEncoding0.encodeColumn(blockBuilder0, sliceOutput0, encodeOutput0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((-943)).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        decimalEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.DecimalEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DecimalEncoding decimalEncoding0 = null;
      try {
        decimalEncoding0 = new DecimalEncoding(type0, (Slice) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.common.type.Type$MockitoMock$800933384 cannot be cast to com.facebook.presto.common.type.DecimalType
         //
         verifyException("com.facebook.presto.rcfile.text.DecimalEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        decimalEncoding0.decodeValueInto(2221, blockBuilder0, (Slice) null, 2221, 2221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(78, 78).when(blockBuilder0).getPositionCount();
      doReturn(true, false).when(blockBuilder0).isNull(anyInt());
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        decimalEncoding0.encodeColumn(blockBuilder0, sliceOutput0, encodeOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.DecimalEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((-943)).when(blockBuilder0).getPositionCount();
      DecimalEncoding decimalEncoding0 = new DecimalEncoding((Type) null, (Slice) null);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      decimalEncoding0.encodeColumn(blockBuilder0, sliceOutput0, encodeOutput0);
  }
}
