/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 20:17:21 GMT 2021
 */

package com.facebook.presto.rcfile.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.block.Block;
import com.facebook.presto.common.block.BlockBuilder;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.rcfile.text.MapEncoding;
import com.facebook.presto.rcfile.text.TextColumnEncoding;
import io.airlift.slice.Slice;
import io.airlift.slice.SliceOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapEncoding_ESTest extends MapEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) byteArray0[3], (TextColumnEncoding) null, (TextColumnEncoding) null);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(blockBuilder0).beginBlockEntry();
      doReturn((BlockBuilder) null).when(blockBuilder0).closeEntry();
      mapEncoding0.decodeValueInto((byte)0, blockBuilder0, (Slice) null, (byte) (-102), (-969));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(60, 1430, 60, 26, 1430).when(block0).getPositionCount();
      doReturn(false, false, false, false, false).when(block0).isNull(anyInt());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(blockBuilder0).getBlock(anyInt());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) null, textColumnEncoding0, textColumnEncoding0);
      mapEncoding0.encodeValueInto(0, blockBuilder0, 278, sliceOutput0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)0, textColumnEncoding0, textColumnEncoding0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapEncoding0.encodeValueInto(0, (Block) null, 88, sliceOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.MapEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)88, (TextColumnEncoding) null, (TextColumnEncoding) null);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapEncoding0.encodeValueInto(0, (Block) null, 0, sliceOutput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.facebook.presto.rcfile.text.BlockEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)30, (TextColumnEncoding) null, (TextColumnEncoding) null);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapEncoding0.decodeValueInto((byte)30, blockBuilder0, (Slice) null, 61, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("com.facebook.presto.rcfile.text.BlockEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) (byte)0, (TextColumnEncoding) null, (TextColumnEncoding) null);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(blockBuilder1).beginBlockEntry();
      // Undeclared exception!
      try { 
        mapEncoding0.decodeValueInto((byte)0, blockBuilder1, (Slice) null, (byte)56, (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.MapEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      MapEncoding mapEncoding0 = new MapEncoding((Type) null, (Slice) null, byteArray0, (Byte) (byte)0, textColumnEncoding0, textColumnEncoding0);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(blockBuilder1).beginBlockEntry();
      doReturn((BlockBuilder) null).when(blockBuilder1).closeEntry();
      mapEncoding0.decodeValueInto(0, blockBuilder1, (Slice) null, (byte)5, (byte)0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(60, 60, 60).when(block0).getPositionCount();
      doReturn(false, false, false, true, true).when(block0).isNull(anyInt());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(blockBuilder0).getBlock(anyInt());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[15];
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) null, textColumnEncoding0, textColumnEncoding0);
      // Undeclared exception!
      try { 
        mapEncoding0.encodeValueInto(0, blockBuilder0, 278, sliceOutput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Map must never contain null keys
         //
         verifyException("com.facebook.presto.rcfile.text.MapEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(3544, 0).when(block0).getPositionCount();
      doReturn(false, false).when(block0).isNull(anyInt());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(blockBuilder0).getBlock(anyInt());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      TextColumnEncoding textColumnEncoding0 = mock(TextColumnEncoding.class, new ViolatedAssumptionAnswer());
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      MapEncoding mapEncoding0 = new MapEncoding(type0, (Slice) null, byteArray0, (Byte) null, textColumnEncoding0, textColumnEncoding0);
      mapEncoding0.encodeValueInto(0, blockBuilder0, 278, sliceOutput0);
  }
}
