/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 20:19:05 GMT 2021
 */

package com.facebook.presto.rcfile.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.block.Block;
import com.facebook.presto.common.block.BlockBuilder;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.rcfile.ColumnData;
import com.facebook.presto.rcfile.EncodeOutput;
import com.facebook.presto.rcfile.text.StringEncoding;
import io.airlift.slice.Slice;
import io.airlift.slice.SliceOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringEncoding_ESTest extends StringEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      StringEncoding stringEncoding0 = new StringEncoding(type0, (Slice) null, (Byte) null);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn(608).when(columnData0).getLength(anyInt());
      doReturn(608).when(columnData0).getOffset(anyInt());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(219).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        stringEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.StringEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      StringEncoding stringEncoding0 = new StringEncoding(type0, (Slice) null, (Byte) null);
      Slice slice1 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn((-1034)).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        stringEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.StringEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((Block) null).when(blockBuilder0).build();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      StringEncoding stringEncoding0 = new StringEncoding(type0, (Slice) null, (Byte) null);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(0).when(columnData0).rowCount();
      Block block0 = stringEncoding0.decodeColumn(columnData0);
      assertNull(block0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(4096, 20, 297, 2839, 2147483639).when(blockBuilder0).getPositionCount();
      doReturn(false, false, false, false, false).when(blockBuilder0).isNull(anyInt());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null, (Slice) null, (Slice) null, (Slice) null, (Slice) null).when(type0).getSlice(any(com.facebook.presto.common.block.Block.class) , anyInt());
      StringEncoding stringEncoding0 = new StringEncoding(type0, (Slice) null, (Byte) null);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      stringEncoding0.encodeColumn(blockBuilder0, sliceOutput0, encodeOutput0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      StringEncoding stringEncoding0 = new StringEncoding((Type) null, (Slice) null, byte0);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      // Undeclared exception!
      try { 
        stringEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.StringEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(type0).getSlice(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Byte byte0 = new Byte((byte)106);
      StringEncoding stringEncoding0 = new StringEncoding(type0, (Slice) null, byte0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stringEncoding0.encodeValueInto(9, (Block) null, 9, sliceOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.StringEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(1369, 0).when(blockBuilder0).getPositionCount();
      doReturn(true).when(blockBuilder0).isNull(anyInt());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-2));
      StringEncoding stringEncoding0 = new StringEncoding(type0, (Slice) null, byte0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      stringEncoding0.encodeColumn(blockBuilder0, sliceOutput0, encodeOutput0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      StringEncoding stringEncoding0 = new StringEncoding((Type) null, (Slice) null, byte0);
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stringEncoding0.decodeValueInto((byte)0, blockBuilder0, (Slice) null, 1421, 1421);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
