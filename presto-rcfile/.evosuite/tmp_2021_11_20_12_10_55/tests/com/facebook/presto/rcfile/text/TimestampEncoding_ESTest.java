/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 20 20:26:03 GMT 2021
 */

package com.facebook.presto.rcfile.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.block.Block;
import com.facebook.presto.common.block.BlockBuilder;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.rcfile.ColumnData;
import com.facebook.presto.rcfile.EncodeOutput;
import com.facebook.presto.rcfile.text.TimestampEncoding;
import io.airlift.slice.Slice;
import io.airlift.slice.SliceOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimestampEncoding_ESTest extends TimestampEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(418L).when(type0).getLong(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(2650, (-4614)).when(blockBuilder1).getPositionCount();
      doReturn(true).when(blockBuilder1).isNull(anyInt());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((-260)).when(dateTimeZone0).getOffset(anyLong());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeColumn(blockBuilder1, sliceOutput0, encodeOutput0);
      SliceOutput sliceOutput1 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeValueInto((-260), blockBuilder0, 2650, sliceOutput1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(type0).getLong(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(2146, 0).when(blockBuilder1).getPositionCount();
      doReturn(false).when(blockBuilder1).isNull(anyInt());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeZone0).getOffset(anyLong());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeColumn(blockBuilder1, sliceOutput0, encodeOutput0);
      int int0 = 1164;
      Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(type0).getLong(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(1024, 0).when(blockBuilder1).getPositionCount();
      doReturn(false).when(blockBuilder1).isNull(anyInt());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeZone0).getOffset(anyLong());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeColumn(blockBuilder1, sliceOutput0, encodeOutput0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((-1157)).when(blockBuilder1).getPositionCount();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeColumn(blockBuilder1, sliceOutput0, encodeOutput0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder2 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder1).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      int int0 = 677;
      Slice slice1 = null;
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((-3144)).when(columnData0).getLength(anyInt());
      doReturn(23).when(columnData0).getOffset(anyInt());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(677).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(block0).getPositionCount();
      doReturn((String) null).when(block0).toString();
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(block0).when(blockBuilder0).build();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      doReturn(0L, 0L).when(type0).getLong(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dateTimeZone0).getOffset(anyLong());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      Slice slice1 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn((-1106)).when(columnData0).rowCount();
      Block block1 = timestampEncoding0.decodeColumn(columnData0);
      assertNotNull(block1);
      assertSame(block1, block0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      Random.setNextRandom((-4938));
      timestampEncoding0.encodeColumn(block1, sliceOutput0, encodeOutput0);
      assertSame(block1, block0);
      
      SliceOutput sliceOutput1 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput1 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeColumn(block1, sliceOutput1, encodeOutput1);
      assertSame(block1, block0);
      
      SliceOutput sliceOutput2 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeValueInto(2634, block1, 3218, sliceOutput2);
      assertSame(block1, block0);
      
      SliceOutput sliceOutput3 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeValueInto(0, block1, 14, sliceOutput3);
      assertSame(block1, block0);
      
      SliceOutput sliceOutput4 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput2 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeColumn(block1, sliceOutput4, encodeOutput2);
      assertSame(block1, block0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder2 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder3 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder3).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      Slice slice0 = null;
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      int int0 = 2194;
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn(865).when(columnData0).getLength(anyInt());
      doReturn(1213).when(columnData0).getOffset(anyInt());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(2194).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null, (BlockBuilder) null, (BlockBuilder) null, (BlockBuilder) null, (BlockBuilder) null).when(blockBuilder0).appendNull();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      int int0 = 0;
      Slice slice1 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(columnData0).getLength(anyInt());
      doReturn(0, 0, 0, 0, 0).when(columnData0).getOffset(anyInt());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(23118750).when(columnData0).rowCount();
      // Undeclared exception!
      timestampEncoding0.decodeColumn(columnData0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      int int0 = (-1170);
      Slice slice1 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn((-1170)).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null, (BlockBuilder) null, (BlockBuilder) null, (BlockBuilder) null, (BlockBuilder) null).when(blockBuilder0).appendNull();
      doReturn((Block) null).when(blockBuilder0).build();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(blockBuilder0).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      doReturn(0L).when(type0).getLong(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeZone0).getOffset(anyLong());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      Slice slice1 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(columnData0).getLength(anyInt());
      doReturn(0, 0, 0, 0, 0).when(columnData0).getOffset(anyInt());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(34).when(columnData0).rowCount();
      Block block0 = timestampEncoding0.decodeColumn(columnData0);
      assertNull(block0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeValueInto(34, (Block) null, 0, sliceOutput0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(type0).getLong(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeZone0).getOffset(anyLong());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeValueInto((-1), (Block) null, 0, sliceOutput0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding((Type) null, (Slice) null, (DateTimeZone) null);
      assertNotNull(timestampEncoding0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timestampEncoding0.encodeValueInto(37, (Block) null, 121, sliceOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      int int0 = 39;
      Block block0 = null;
      int int1 = 21;
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timestampEncoding0.encodeColumn((Block) null, sliceOutput0, encodeOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timestampEncoding0.encodeColumn((Block) null, sliceOutput0, encodeOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      int int0 = 21;
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Slice slice1 = mock(Slice.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeValueInto((-1236), blockBuilder1, (Slice) null, 21, 2374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeValueInto(734, blockBuilder0, (Slice) null, 734, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding((Type) null, (Slice) null, (DateTimeZone) null);
      assertNotNull(timestampEncoding0);
      
      int int0 = (-1);
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(0).when(columnData0).rowCount();
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding((Type) null, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn((ColumnData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeValueInto(28, blockBuilder0, (Slice) null, 28, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      Slice slice1 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(columnData0).getLength(anyInt());
      doReturn(1).when(columnData0).getOffset(anyInt());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(1).when(columnData0).rowCount();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      assertNotNull(timestampEncoding0);
      
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockBuilder blockBuilder0 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      BlockBuilder blockBuilder1 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((BlockBuilder) null).when(type0).createBlockBuilder(any(com.facebook.presto.common.block.BlockBuilderStatus.class) , anyInt());
      doReturn(0L, 0L, 0L, 0L).when(type0).getLong(any(com.facebook.presto.common.block.Block.class) , anyInt());
      Slice slice0 = mock(Slice.class, new ViolatedAssumptionAnswer());
      ColumnData columnData0 = mock(ColumnData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(columnData0).getLength(anyInt());
      doReturn(0).when(columnData0).getOffset(anyInt());
      doReturn((Slice) null).when(columnData0).getSlice();
      doReturn(633).when(columnData0).rowCount();
      BlockBuilder blockBuilder2 = mock(BlockBuilder.class, new ViolatedAssumptionAnswer());
      doReturn(2650, 1781, 6, 2650, (-260)).when(blockBuilder2).getPositionCount();
      doReturn(false, false, false, true).when(blockBuilder2).isNull(anyInt());
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1781, 24, 24, 1781).when(dateTimeZone0).getOffset(anyLong());
      TimestampEncoding timestampEncoding0 = new TimestampEncoding(type0, (Slice) null, dateTimeZone0);
      SliceOutput sliceOutput0 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      EncodeOutput encodeOutput0 = mock(EncodeOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeColumn(blockBuilder2, sliceOutput0, encodeOutput0);
      SliceOutput sliceOutput1 = mock(SliceOutput.class, new ViolatedAssumptionAnswer());
      timestampEncoding0.encodeValueInto((-260), blockBuilder0, 2650, sliceOutput1);
      // Undeclared exception!
      try { 
        timestampEncoding0.decodeColumn(columnData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.rcfile.text.TimestampEncoding", e);
      }
  }
}
