/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 08:50:54 GMT 2021
 */

package com.facebook.presto.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.connector.ConnectorAwareNodeManager;
import com.facebook.presto.execution.warnings.WarningCollectorConfig;
import com.facebook.presto.metadata.InMemoryNodeManager;
import com.facebook.presto.redis.RedisConnectorConfig;
import com.facebook.presto.redis.RedisConnectorId;
import com.facebook.presto.redis.RedisJedisManager;
import com.facebook.presto.redis.RedisSplitManager;
import com.facebook.presto.redis.RedisTableHandle;
import com.facebook.presto.redis.RedisTableLayoutHandle;
import com.facebook.presto.redis.RedisTransactionHandle;
import com.facebook.presto.spi.ConnectorId;
import com.facebook.presto.spi.ConnectorSession;
import com.facebook.presto.spi.ConnectorSplitSource;
import com.facebook.presto.spi.ConnectorTableLayoutHandle;
import com.facebook.presto.spi.connector.ConnectorSplitManager;
import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
import com.facebook.presto.testing.TestingHandle;
import com.facebook.presto.testing.TestingNodeManager;
import com.facebook.presto.testing.TestingTransactionHandle;
import com.facebook.presto.testing.TestingWarningCollector;
import com.facebook.presto.testing.TestingWarningCollectorConfig;
import com.facebook.presto.tpch.TpchTransactionHandle;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RedisSplitManager_ESTest extends RedisSplitManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RedisConnectorId redisConnectorId0 = new RedisConnectorId("");
      RedisConnectorConfig redisConnectorConfig0 = new RedisConnectorConfig();
      TestingNodeManager testingNodeManager0 = new TestingNodeManager("");
      RedisJedisManager redisJedisManager0 = new RedisJedisManager(redisConnectorConfig0, testingNodeManager0);
      RedisSplitManager redisSplitManager0 = new RedisSplitManager(redisConnectorId0, redisConnectorConfig0, redisJedisManager0);
      ConnectorSplitManager.SplitSchedulingStrategy connectorSplitManager_SplitSchedulingStrategy0 = ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;
      WarningCollectorConfig warningCollectorConfig0 = new WarningCollectorConfig();
      TestingWarningCollectorConfig testingWarningCollectorConfig0 = new TestingWarningCollectorConfig();
      TestingWarningCollector testingWarningCollector0 = new TestingWarningCollector(warningCollectorConfig0, testingWarningCollectorConfig0);
      ConnectorSplitManager.SplitSchedulingContext connectorSplitManager_SplitSchedulingContext0 = new ConnectorSplitManager.SplitSchedulingContext(connectorSplitManager_SplitSchedulingStrategy0, true, testingWarningCollector0);
      // Undeclared exception!
      try { 
        redisSplitManager0.getSplits((ConnectorTransactionHandle) null, (ConnectorSession) null, (ConnectorTableLayoutHandle) null, connectorSplitManager_SplitSchedulingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // layout is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RedisConnectorId redisConnectorId0 = new RedisConnectorId("_TRcrxe\"2");
      RedisConnectorConfig redisConnectorConfig0 = new RedisConnectorConfig();
      InMemoryNodeManager inMemoryNodeManager0 = new InMemoryNodeManager();
      ConnectorId connectorId0 = new ConnectorId("9UCK^z3}?9MXV.X");
      ConnectorAwareNodeManager connectorAwareNodeManager0 = new ConnectorAwareNodeManager(inMemoryNodeManager0, "_TRcrxe\"2", connectorId0);
      RedisJedisManager redisJedisManager0 = new RedisJedisManager(redisConnectorConfig0, connectorAwareNodeManager0);
      RedisSplitManager redisSplitManager0 = new RedisSplitManager(redisConnectorId0, redisConnectorConfig0, redisJedisManager0);
      TpchTransactionHandle tpchTransactionHandle0 = TpchTransactionHandle.INSTANCE;
      TestingHandle testingHandle0 = TestingHandle.INSTANCE;
      ConnectorSplitManager.SplitSchedulingStrategy connectorSplitManager_SplitSchedulingStrategy0 = ConnectorSplitManager.SplitSchedulingStrategy.REWINDABLE_GROUPED_SCHEDULING;
      WarningCollectorConfig warningCollectorConfig0 = new WarningCollectorConfig();
      TestingWarningCollectorConfig testingWarningCollectorConfig0 = new TestingWarningCollectorConfig();
      TestingWarningCollector testingWarningCollector0 = new TestingWarningCollector(warningCollectorConfig0, testingWarningCollectorConfig0);
      ConnectorSplitManager.SplitSchedulingContext connectorSplitManager_SplitSchedulingContext0 = new ConnectorSplitManager.SplitSchedulingContext(connectorSplitManager_SplitSchedulingStrategy0, false, testingWarningCollector0);
      // Undeclared exception!
      try { 
        redisSplitManager0.getSplits(tpchTransactionHandle0, (ConnectorSession) null, testingHandle0, connectorSplitManager_SplitSchedulingContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // layout is not an instance of RedisTableLayoutHandle
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RedisConnectorId redisConnectorId0 = new RedisConnectorId("nullCallClause");
      RedisSplitManager redisSplitManager0 = null;
      try {
        redisSplitManager0 = new RedisSplitManager(redisConnectorId0, (RedisConnectorConfig) null, (RedisJedisManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // redisConfig is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RedisConnectorId redisConnectorId0 = new RedisConnectorId("#set");
      RedisConnectorConfig redisConnectorConfig0 = new RedisConnectorConfig();
      TestingNodeManager testingNodeManager0 = new TestingNodeManager();
      RedisJedisManager redisJedisManager0 = new RedisJedisManager(redisConnectorConfig0, testingNodeManager0);
      RedisSplitManager redisSplitManager0 = new RedisSplitManager(redisConnectorId0, redisConnectorConfig0, redisJedisManager0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 6379);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      RedisTransactionHandle redisTransactionHandle0 = RedisTransactionHandle.INSTANCE;
      RedisTableHandle redisTableHandle0 = new RedisTableHandle("#set", "#set", "#set", "zset", "zset", "#set");
      RedisTableLayoutHandle redisTableLayoutHandle0 = new RedisTableLayoutHandle(redisTableHandle0);
      redisConnectorConfig0.setNodes("zset");
      // Undeclared exception!
      try { 
        redisSplitManager0.getSplits(redisTransactionHandle0, (ConnectorSession) null, redisTableLayoutHandle0, (ConnectorSplitManager.SplitSchedulingContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of stream.
         //
         verifyException("redis.clients.util.RedisInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RedisConnectorId redisConnectorId0 = new RedisConnectorId("Us~t");
      RedisConnectorConfig redisConnectorConfig0 = new RedisConnectorConfig();
      TestingNodeManager testingNodeManager0 = new TestingNodeManager("Us~t");
      RedisJedisManager redisJedisManager0 = new RedisJedisManager(redisConnectorConfig0, testingNodeManager0);
      RedisSplitManager redisSplitManager0 = new RedisSplitManager(redisConnectorId0, redisConnectorConfig0, redisJedisManager0);
      RedisTransactionHandle redisTransactionHandle0 = RedisTransactionHandle.INSTANCE;
      RedisTableHandle redisTableHandle0 = new RedisTableHandle("Us~t", "Us~t", "Us~t", "Us~t", "Us~t", "Us~t");
      RedisTableLayoutHandle redisTableLayoutHandle0 = new RedisTableLayoutHandle(redisTableHandle0);
      redisConnectorConfig0.setNodes("Us~t");
      ConnectorSplitManager.SplitSchedulingStrategy connectorSplitManager_SplitSchedulingStrategy0 = ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;
      WarningCollectorConfig warningCollectorConfig0 = new WarningCollectorConfig();
      TestingWarningCollectorConfig testingWarningCollectorConfig0 = new TestingWarningCollectorConfig();
      TestingWarningCollector testingWarningCollector0 = new TestingWarningCollector(warningCollectorConfig0, testingWarningCollectorConfig0);
      ConnectorSplitManager.SplitSchedulingContext connectorSplitManager_SplitSchedulingContext0 = new ConnectorSplitManager.SplitSchedulingContext(connectorSplitManager_SplitSchedulingStrategy0, true, testingWarningCollector0);
      ConnectorSplitSource connectorSplitSource0 = redisSplitManager0.getSplits(redisTransactionHandle0, (ConnectorSession) null, redisTableLayoutHandle0, connectorSplitManager_SplitSchedulingContext0);
      assertFalse(connectorSplitSource0.isFinished());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RedisConnectorId redisConnectorId0 = new RedisConnectorId("TLS");
      RedisConnectorConfig redisConnectorConfig0 = new RedisConnectorConfig();
      TestingNodeManager testingNodeManager0 = new TestingNodeManager("");
      RedisJedisManager redisJedisManager0 = new RedisJedisManager(redisConnectorConfig0, testingNodeManager0);
      RedisSplitManager redisSplitManager0 = new RedisSplitManager(redisConnectorId0, redisConnectorConfig0, redisJedisManager0);
      UUID uUID0 = MockUUID.randomUUID();
      TestingTransactionHandle testingTransactionHandle0 = new TestingTransactionHandle(uUID0);
      RedisTableHandle redisTableHandle0 = new RedisTableHandle("TLS", "-inf", ">E", "TLS", "", "0+X9oLuG~");
      RedisTableLayoutHandle redisTableLayoutHandle0 = new RedisTableLayoutHandle(redisTableHandle0);
      ConnectorSplitManager.SplitSchedulingStrategy connectorSplitManager_SplitSchedulingStrategy0 = ConnectorSplitManager.SplitSchedulingStrategy.REWINDABLE_GROUPED_SCHEDULING;
      WarningCollectorConfig warningCollectorConfig0 = new WarningCollectorConfig();
      TestingWarningCollectorConfig testingWarningCollectorConfig0 = new TestingWarningCollectorConfig();
      TestingWarningCollector testingWarningCollector0 = new TestingWarningCollector(warningCollectorConfig0, testingWarningCollectorConfig0);
      ConnectorSplitManager.SplitSchedulingContext connectorSplitManager_SplitSchedulingContext0 = new ConnectorSplitManager.SplitSchedulingContext(connectorSplitManager_SplitSchedulingStrategy0, false, testingWarningCollector0);
      // Undeclared exception!
      try { 
        redisSplitManager0.getSplits(testingTransactionHandle0, (ConnectorSession) null, redisTableLayoutHandle0, connectorSplitManager_SplitSchedulingContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No Redis nodes available
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
