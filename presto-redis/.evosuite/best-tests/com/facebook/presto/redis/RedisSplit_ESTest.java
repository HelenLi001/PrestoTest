/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 08:54:48 GMT 2021
 */

package com.facebook.presto.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.redis.RedisDataType;
import com.facebook.presto.redis.RedisSplit;
import com.facebook.presto.spi.HostAddress;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RedisSplit_ESTest extends RedisSplit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 0L, (-1L), linkedList0);
      redisSplit0.getValueDataFormat();
      assertEquals(0L, redisSplit0.getStart());
      assertEquals((-1L), redisSplit0.getEnd());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "@:XSv|p@0wvB7wWB", "", "S$]dFl+CaM-`vrE{FV", "S$]dFl+CaM-`vrE{FV", (-2147483648L), (-2147483648L), linkedList0);
      redisSplit0.getTableName();
      assertEquals("", redisSplit0.getConnectorId());
      assertEquals("", redisSplit0.getKeyDataFormat());
      assertEquals("", redisSplit0.getSchemaName());
      assertEquals("S$]dFl+CaM-`vrE{FV", redisSplit0.getKeyName());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
      assertEquals((-2147483648L), redisSplit0.getEnd());
      assertEquals((-2147483648L), redisSplit0.getStart());
      assertEquals("S$]dFl+CaM-`vrE{FV", redisSplit0.getValueDataFormat());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "end", "", "", "", "", 0L, 0L, linkedList0);
      redisSplit0.getStart();
      assertEquals("", redisSplit0.getConnectorId());
      assertEquals("", redisSplit0.getTableName());
      assertEquals("", redisSplit0.getKeyDataFormat());
      assertEquals("", redisSplit0.getKeyName());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
      assertEquals("end", redisSplit0.getSchemaName());
      assertEquals("", redisSplit0.getValueDataFormat());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("v<", ",uvyDbzIe}v&", ",uvyDbzIe}v&", ",uvyDbzIe}v&", "v<", "c%0:C~VnhZ6)a9", (-391L), (-391L), linkedList0);
      long long0 = redisSplit0.getStart();
      assertEquals((-391L), long0);
      assertEquals("v<", redisSplit0.getValueDataFormat());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
      assertEquals((-391L), redisSplit0.getEnd());
      assertEquals("c%0:C~VnhZ6)a9", redisSplit0.getKeyName());
      assertEquals(",uvyDbzIe}v&", redisSplit0.getSchemaName());
      assertEquals("v<", redisSplit0.getConnectorId());
      assertEquals(",uvyDbzIe}v&", redisSplit0.getKeyDataFormat());
      assertEquals(",uvyDbzIe}v&", redisSplit0.getTableName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("@OI5", "@OI5", "@OI5", "@OI5", "", "@OI5", (-2983L), (-2983L), linkedList0);
      String string0 = redisSplit0.getSchemaName();
      assertEquals("@OI5", redisSplit0.getTableName());
      assertEquals((-2983L), redisSplit0.getStart());
      assertEquals("@OI5", string0);
      assertEquals("@OI5", redisSplit0.getConnectorId());
      assertEquals("@OI5", redisSplit0.getKeyName());
      assertEquals("", redisSplit0.getValueDataFormat());
      assertEquals((-2983L), redisSplit0.getEnd());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
      assertEquals("@OI5", redisSplit0.getKeyDataFormat());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("nodes", "+\"#", "!|3nq5 zI8`kB", "IegrStsGePcX!R", "", (String) null, (-1150L), 504L, linkedList0);
      String string0 = redisSplit0.getKeyName();
      assertEquals("+\"#", redisSplit0.getSchemaName());
      assertNull(string0);
      assertEquals("!|3nq5 zI8`kB", redisSplit0.getTableName());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
      assertEquals("IegrStsGePcX!R", redisSplit0.getKeyDataFormat());
      assertEquals("nodes", redisSplit0.getConnectorId());
      assertEquals((-1150L), redisSplit0.getStart());
      assertEquals(504L, redisSplit0.getEnd());
      assertEquals("", redisSplit0.getValueDataFormat());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("keyDataFormat", "", "", "", "", "valueDataFormat is null", 0L, (-3068L), linkedList0);
      String string0 = redisSplit0.getKeyName();
      assertEquals((-3068L), redisSplit0.getEnd());
      assertEquals("", redisSplit0.getKeyDataFormat());
      assertEquals("", redisSplit0.getSchemaName());
      assertEquals("", redisSplit0.getValueDataFormat());
      assertEquals(0L, redisSplit0.getStart());
      assertEquals("valueDataFormat is null", string0);
      assertEquals("keyDataFormat", redisSplit0.getConnectorId());
      assertEquals("", redisSplit0.getTableName());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("v<", ",uvyDbzIe}v&", ",uvyDbzIe}v&", ",uvyDbzIe}v&", "v<", "c%0:C~VnhZ6)a9", (-391L), (-391L), linkedList0);
      String string0 = redisSplit0.getKeyDataFormat();
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
      assertEquals((-391L), redisSplit0.getStart());
      assertEquals("c%0:C~VnhZ6)a9", redisSplit0.getKeyName());
      assertEquals(",uvyDbzIe}v&", redisSplit0.getSchemaName());
      assertEquals((-391L), redisSplit0.getEnd());
      assertEquals("v<", redisSplit0.getConnectorId());
      assertEquals(",uvyDbzIe}v&", string0);
      assertEquals(",uvyDbzIe}v&", redisSplit0.getTableName());
      assertEquals("v<", redisSplit0.getValueDataFormat());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "(BW0;Mo6wh", 0L, 0L, linkedList0);
      redisSplit0.getEnd();
      assertEquals("", redisSplit0.getConnectorId());
      assertEquals("", redisSplit0.getTableName());
      assertEquals("(BW0;Mo6wh", redisSplit0.getKeyName());
      assertEquals("", redisSplit0.getKeyDataFormat());
      assertEquals("", redisSplit0.getSchemaName());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
      assertEquals("", redisSplit0.getValueDataFormat());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<HostAddress> arrayList0 = new ArrayList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("@3+asZP@P8yUf", "com.google.common.base.Converter$FunctionBasedConverter", "com.google.common.base.Converter$FunctionBasedConverter", "com.google.common.base.Converter$FunctionBasedConverter", "' found, can't replace", "!{MlTyh", (-9223372036854775808L), (-9223372036854775808L), arrayList0);
      redisSplit0.getEnd();
      assertEquals("com.google.common.base.Converter$FunctionBasedConverter", redisSplit0.getSchemaName());
      assertEquals("@3+asZP@P8yUf", redisSplit0.getConnectorId());
      assertEquals("com.google.common.base.Converter$FunctionBasedConverter", redisSplit0.getTableName());
      assertEquals("com.google.common.base.Converter$FunctionBasedConverter", redisSplit0.getKeyDataFormat());
      assertEquals("' found, can't replace", redisSplit0.getValueDataFormat());
      assertEquals("!{MlTyh", redisSplit0.getKeyName());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("v<", ",uvyDbzIe}v&", ",uvyDbzIe}v&", ",uvyDbzIe}v&", "v<", "c%0:C~VnhZ6)a9", (-391L), (-391L), linkedList0);
      String string0 = redisSplit0.getConnectorId();
      assertEquals("v<", redisSplit0.getValueDataFormat());
      assertEquals((-391L), redisSplit0.getStart());
      assertEquals(",uvyDbzIe}v&", redisSplit0.getSchemaName());
      assertEquals("c%0:C~VnhZ6)a9", redisSplit0.getKeyName());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
      assertEquals(",uvyDbzIe}v&", redisSplit0.getTableName());
      assertEquals((-391L), redisSplit0.getEnd());
      assertEquals("v<", string0);
      assertEquals(",uvyDbzIe}v&", redisSplit0.getKeyDataFormat());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RedisSplit redisSplit0 = null;
      try {
        redisSplit0 = new RedisSplit("t4yARQTh>;>fc@I?x", "t4yARQTh>;>fc@I?x", "t4yARQTh>;>fc@I?x", "t4yARQTh>;>fc@I?x", "t4yARQTh>;>fc@I?x", "t4yARQTh>;>fc@I?x", 16L, 16L, (List<HostAddress>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // addresses is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      linkedList0.offerLast((HostAddress) null);
      RedisSplit redisSplit0 = null;
      try {
        redisSplit0 = new RedisSplit("connector id is null", "connector id is null", "connector id is null", "f&%=JvIb2pU2tsVrasi", "connector id is null", "|:d+wYY", 3864L, 5000L, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", 4L, 4L, linkedList0);
      String string0 = redisSplit0.toString();
      assertEquals("RedisSplit{connectorId=A8_n!, schemaName=A8_n!, tableName=A8_n!, keyDataFormat=A8_n!, valueDataFormat=A8_n!, keyName=A8_n!, start=4, end=4, nodes=[]}", string0);
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("zset", "zset", "zset", "hash", "zset", "zset", (-8663945395140668427L), (-8663945395140668427L), linkedList0);
      redisSplit0.getNodes();
      assertEquals("zset", redisSplit0.getTableName());
      assertEquals("zset", redisSplit0.getKeyName());
      assertEquals("zset", redisSplit0.getConnectorId());
      assertEquals("hash", redisSplit0.getKeyDataFormat());
      assertEquals((-8663945395140668427L), redisSplit0.getStart());
      assertEquals("zset", redisSplit0.getSchemaName());
      assertEquals(RedisDataType.HASH, redisSplit0.getKeyDataType());
      assertEquals((-8663945395140668427L), redisSplit0.getEnd());
      assertEquals(RedisDataType.ZSET, redisSplit0.getValueDataType());
      assertEquals("zset", redisSplit0.getValueDataFormat());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", 4L, 4L, linkedList0);
      redisSplit0.getValueDataFormat();
      assertEquals(4L, redisSplit0.getEnd());
      assertEquals(4L, redisSplit0.getStart());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      redisSplit0.getPreferredNodes(linkedList0);
      assertEquals(1661L, redisSplit0.getEnd());
      assertEquals(1661L, redisSplit0.getStart());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      redisSplit0.getKeyName();
      assertEquals(1661L, redisSplit0.getStart());
      assertEquals(1661L, redisSplit0.getEnd());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("dbxU5fagR/s\"@Y:t", "hash", "dbxU5fagR/s\"@Y:t", "hash", "dbxU5fagR/s\"@Y:t", "dbxU5fagR/s\"@Y:t", (-19L), (-19L), linkedList0);
      RedisSplit redisSplit1 = (RedisSplit)redisSplit0.getInfo();
      assertEquals("dbxU5fagR/s\"@Y:t", redisSplit1.getValueDataFormat());
      assertEquals("dbxU5fagR/s\"@Y:t", redisSplit1.getTableName());
      assertEquals((-19L), redisSplit1.getStart());
      assertEquals("dbxU5fagR/s\"@Y:t", redisSplit1.getKeyName());
      assertEquals("dbxU5fagR/s\"@Y:t", redisSplit1.getConnectorId());
      assertEquals("hash", redisSplit1.getSchemaName());
      assertEquals("hash", redisSplit1.getKeyDataFormat());
      assertEquals((-19L), redisSplit1.getEnd());
      assertEquals(RedisDataType.STRING, redisSplit1.getValueDataType());
      assertEquals(RedisDataType.HASH, redisSplit1.getKeyDataType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      redisSplit0.getSchemaName();
      assertEquals(1661L, redisSplit0.getEnd());
      assertEquals(1661L, redisSplit0.getStart());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      redisSplit0.getKeyDataFormat();
      assertEquals(1661L, redisSplit0.getStart());
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
      assertEquals(1661L, redisSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      redisSplit0.getTableName();
      assertEquals(1661L, redisSplit0.getEnd());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
      assertEquals(1661L, redisSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      redisSplit0.getConnectorId();
      assertEquals(1661L, redisSplit0.getStart());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
      assertEquals(1661L, redisSplit0.getEnd());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", 4L, 4L, linkedList0);
      long long0 = redisSplit0.getEnd();
      assertEquals(4L, long0);
      assertEquals(RedisDataType.STRING, redisSplit0.getKeyDataType());
      assertEquals(4L, redisSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      long long0 = redisSplit0.getStart();
      assertEquals(1661L, long0);
      assertEquals(1661L, redisSplit0.getEnd());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", "A8_n!", 4L, 4L, linkedList0);
      RedisDataType redisDataType0 = redisSplit0.getValueDataType();
      assertEquals(RedisDataType.STRING, redisDataType0);
      assertEquals(4L, redisSplit0.getEnd());
      assertEquals(4L, redisSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      redisSplit0.getNodeSelectionStrategy();
      assertEquals(1661L, redisSplit0.getEnd());
      assertEquals(RedisDataType.STRING, redisSplit0.getValueDataType());
      assertEquals(1661L, redisSplit0.getStart());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      RedisSplit redisSplit0 = new RedisSplit("", "", "", "", "", "", 1661L, 1661L, linkedList0);
      RedisDataType redisDataType0 = redisSplit0.getKeyDataType();
      assertEquals(1661L, redisSplit0.getEnd());
      assertEquals(RedisDataType.STRING, redisDataType0);
      assertEquals(1661L, redisSplit0.getStart());
  }
}
