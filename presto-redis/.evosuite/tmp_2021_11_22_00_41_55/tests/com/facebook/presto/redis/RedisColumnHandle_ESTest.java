/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 08:48:44 GMT 2021
 */

package com.facebook.presto.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.ArrayType;
import com.facebook.presto.common.type.BigintEnumType;
import com.facebook.presto.common.type.HyperLogLogType;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.P4HyperLogLogType;
import com.facebook.presto.common.type.RowType;
import com.facebook.presto.common.type.SmallintType;
import com.facebook.presto.common.type.TimestampType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeSignature;
import com.facebook.presto.common.type.VarbinaryType;
import com.facebook.presto.common.type.VarcharEnumType;
import com.facebook.presto.common.type.VarcharType;
import com.facebook.presto.redis.RedisColumnHandle;
import com.facebook.presto.spi.ColumnMetadata;
import com.facebook.presto.transaction.TransactionManagerConfig;
import java.util.ArrayList;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RedisColumnHandle_ESTest extends RedisColumnHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmallintType smallintType0 = SmallintType.SMALLINT;
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("", 3598, "", smallintType0, "", "\"eYkL#4[rQevCN", "\"eYkL#4[rQevCN", true, true, true);
      boolean boolean0 = redisColumnHandle0.isKeyDecoder();
      assertTrue(redisColumnHandle0.isInternal());
      assertEquals("", redisColumnHandle0.getMapping());
      assertEquals(3598, redisColumnHandle0.getOrdinalPosition());
      assertTrue(redisColumnHandle0.isHidden());
      assertEquals("\"eYkL#4[rQevCN", redisColumnHandle0.getDataFormat());
      assertTrue(boolean0);
      assertEquals("\"eYkL#4[rQevCN", redisColumnHandle0.getFormatHint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("g=+XF8Ki,D_IPi2|E", 0, "g=+XF8Ki,D_IPi2|E", timestampType0, "g=+XF8Ki,D_IPi2|E", "Map keys must not be null", "", false, false, false);
      boolean boolean0 = redisColumnHandle0.isInternal();
      assertEquals("", redisColumnHandle0.getFormatHint());
      assertEquals(0, redisColumnHandle0.getOrdinalPosition());
      assertFalse(boolean0);
      assertEquals("g=+XF8Ki,D_IPi2|E", redisColumnHandle0.getMapping());
      assertEquals("Map keys must not be null", redisColumnHandle0.getDataFormat());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(redisColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransactionManagerConfig transactionManagerConfig0 = new TransactionManagerConfig();
      Map<String, String> map0 = transactionManagerConfig0.getCompanionCatalogs();
      VarcharEnumType.VarcharEnumMap varcharEnumType_VarcharEnumMap0 = new VarcharEnumType.VarcharEnumMap("4}=[\"11wK@$i_+", map0);
      VarcharEnumType varcharEnumType0 = new VarcharEnumType(varcharEnumType_VarcharEnumMap0);
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("q;", 3, "q;", varcharEnumType0, "", "", "BrU", false, false, false);
      boolean boolean0 = redisColumnHandle0.isHidden();
      assertEquals("", redisColumnHandle0.getDataFormat());
      assertFalse(boolean0);
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals("BrU", redisColumnHandle0.getFormatHint());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertEquals("", redisColumnHandle0.getMapping());
      assertEquals(3, redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IdentityHashMap<String, Long> identityHashMap0 = new IdentityHashMap<String, Long>();
      BigintEnumType.LongEnumMap bigintEnumType_LongEnumMap0 = new BigintEnumType.LongEnumMap("V%[Xjm~1{VY{m\"zJ", identityHashMap0);
      BigintEnumType bigintEnumType0 = new BigintEnumType(bigintEnumType_LongEnumMap0);
      Type type0 = bigintEnumType0.getValueType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("formatHint", 0, "V%[Xjm~1{VY{m\"zJ", type0, "V%[Xjm~1{VY{m\"zJ", "\"%s\": \"%s\"", "T%^cs]+-;c", false, false, false);
      int int0 = redisColumnHandle0.getOrdinalPosition();
      assertEquals("V%[Xjm~1{VY{m\"zJ", redisColumnHandle0.getMapping());
      assertEquals("V%[Xjm~1{VY{m\"zJ", redisColumnHandle0.getName());
      assertFalse(redisColumnHandle0.isHidden());
      assertEquals("T%^cs]+-;c", redisColumnHandle0.getFormatHint());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertEquals(0, int0);
      assertEquals("\"%s\": \"%s\"", redisColumnHandle0.getDataFormat());
      assertEquals("formatHint", redisColumnHandle0.getConnectorId());
      assertFalse(redisColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("w>}AJMmM]", (-352), "w>}AJMmM]", kdbTreeType0, "KdbTree", "w>}AJMmM]", "KdbTree", false, false, false);
      int int0 = redisColumnHandle0.getOrdinalPosition();
      assertEquals("w>}AJMmM]", redisColumnHandle0.getDataFormat());
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals("KdbTree", redisColumnHandle0.getMapping());
      assertFalse(redisColumnHandle0.isHidden());
      assertEquals((-352), int0);
      assertEquals("KdbTree", redisColumnHandle0.getFormatHint());
      assertFalse(redisColumnHandle0.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("EaG},2786rHI[mx*", 774, "", hyperLogLogType0, "", "EaG},2786rHI[mx*", "", false, false, false);
      String string0 = redisColumnHandle0.getName();
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(redisColumnHandle0.isHidden());
      assertEquals(774, redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals("", redisColumnHandle0.getMapping());
      assertEquals("", redisColumnHandle0.getFormatHint());
      assertEquals("", string0);
      assertEquals("EaG},2786rHI[mx*", redisColumnHandle0.getConnectorId());
      assertEquals("EaG},2786rHI[mx*", redisColumnHandle0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("KdbTree type cannot be serialized", (-1698), "#N~Fv&J", type0, (String) null, "row(", "1jCgOaLL", false, false, false);
      String string0 = redisColumnHandle0.getMapping();
      assertEquals("#N~Fv&J", redisColumnHandle0.getName());
      assertEquals("KdbTree type cannot be serialized", redisColumnHandle0.getConnectorId());
      assertEquals((-1698), redisColumnHandle0.getOrdinalPosition());
      assertEquals("1jCgOaLL", redisColumnHandle0.getFormatHint());
      assertNull(string0);
      assertEquals("row(", redisColumnHandle0.getDataFormat());
      assertFalse(redisColumnHandle0.isInternal());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(redisColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("hidden", (-3496), "", type0, "", "", "hidden", true, true, true);
      String string0 = redisColumnHandle0.getMapping();
      assertEquals("hidden", redisColumnHandle0.getConnectorId());
      assertEquals((-3496), redisColumnHandle0.getOrdinalPosition());
      assertTrue(redisColumnHandle0.isHidden());
      assertEquals("", redisColumnHandle0.getDataFormat());
      assertTrue(redisColumnHandle0.isKeyDecoder());
      assertEquals("hidden", redisColumnHandle0.getFormatHint());
      assertTrue(redisColumnHandle0.isInternal());
      assertEquals("", redisColumnHandle0.getName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).toString();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("KdbTree type cannot be serialized", (-1698), "#N~Fv&J", type0, (String) null, "row(", "1jCgOaLL", false, false, false);
      Type type1 = redisColumnHandle0.getType();
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("KdbTree type cannot be serialized", 987, "1jCgOaLL", type1, "G", "1jCgOaLL", (String) null, true, false, true);
      String string0 = redisColumnHandle1.getFormatHint();
      assertFalse(redisColumnHandle1.isHidden());
      assertNull(string0);
      assertEquals("row(", redisColumnHandle0.getDataFormat());
      assertEquals("1jCgOaLL", redisColumnHandle1.getDataFormat());
      assertTrue(redisColumnHandle1.isInternal());
      assertEquals("KdbTree type cannot be serialized", redisColumnHandle1.getConnectorId());
      assertEquals(987, redisColumnHandle1.getOrdinalPosition());
      assertEquals("G", redisColumnHandle1.getMapping());
      assertEquals("1jCgOaLL", redisColumnHandle1.getName());
      assertTrue(redisColumnHandle1.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VarcharType varcharType0 = VarcharType.createUnboundedVarcharType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("<Idj^<$9%hLB#$&", 228, "<Idj^<$9%hLB#$&", varcharType0, "<Idj^<$9%hLB#$&", "<Idj^<$9%hLB#$&", "", true, true, false);
      String string0 = redisColumnHandle0.getFormatHint();
      assertEquals("<Idj^<$9%hLB#$&", redisColumnHandle0.getDataFormat());
      assertEquals("<Idj^<$9%hLB#$&", redisColumnHandle0.getMapping());
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals("", string0);
      assertEquals(228, redisColumnHandle0.getOrdinalPosition());
      assertTrue(redisColumnHandle0.isHidden());
      assertTrue(redisColumnHandle0.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("z.qz9Y*Ahq2YVU?c-", (-1197), "z.qz9Y*Ahq2YVU?c-", type0, "z.qz9Y*Ahq2YVU?c-", (String) null, "z.qz9Y*Ahq2YVU?c-", false, false, false);
      String string0 = redisColumnHandle0.getDataFormat();
      assertEquals((-1197), redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isInternal());
      assertNull(string0);
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(redisColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransactionManagerConfig transactionManagerConfig0 = new TransactionManagerConfig();
      Map<String, String> map0 = transactionManagerConfig0.getCompanionCatalogs();
      VarcharEnumType.VarcharEnumMap varcharEnumType_VarcharEnumMap0 = new VarcharEnumType.VarcharEnumMap("4}=[\"11wK@$i_+", map0);
      VarcharEnumType varcharEnumType0 = new VarcharEnumType(varcharEnumType_VarcharEnumMap0);
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("q;", 3, "q;", varcharEnumType0, "", "", "BrU", false, false, false);
      String string0 = redisColumnHandle0.getDataFormat();
      assertEquals("", redisColumnHandle0.getMapping());
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals("q;", redisColumnHandle0.getConnectorId());
      assertEquals("BrU", redisColumnHandle0.getFormatHint());
      assertEquals(3, redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(redisColumnHandle0.isHidden());
      assertEquals("", string0);
      assertEquals("q;", redisColumnHandle0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ArrayType arrayType0 = new ArrayType(kdbTreeType0);
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("", 0, "", arrayType0, "IzWh_vhp", "tvp=p6V:r6M\"NU~Zr{", "KdbTree", true, false, false);
      String string0 = redisColumnHandle0.getConnectorId();
      assertEquals("IzWh_vhp", redisColumnHandle0.getMapping());
      assertFalse(redisColumnHandle0.isInternal());
      assertTrue(redisColumnHandle0.isKeyDecoder());
      assertEquals("", redisColumnHandle0.getName());
      assertEquals("", string0);
      assertEquals(0, redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isHidden());
      assertEquals("KdbTree", redisColumnHandle0.getFormatHint());
      assertEquals("tvp=p6V:r6M\"NU~Zr{", redisColumnHandle0.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p").when(type0).toString();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, false, false);
      Type type1 = redisColumnHandle0.getType();
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type1, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", false, true, true);
      ColumnMetadata columnMetadata0 = redisColumnHandle1.getColumnMetadata();
      assertTrue(redisColumnHandle1.isInternal());
      assertFalse(redisColumnHandle1.isKeyDecoder());
      assertEquals((-2147483559), redisColumnHandle1.getOrdinalPosition());
      assertTrue(columnMetadata0.isHidden());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IdentityHashMap<String, Long> identityHashMap0 = new IdentityHashMap<String, Long>();
      BigintEnumType.LongEnumMap bigintEnumType_LongEnumMap0 = new BigintEnumType.LongEnumMap("V%[Xjm~1{VY{m\"zJ", identityHashMap0);
      BigintEnumType bigintEnumType0 = new BigintEnumType(bigintEnumType_LongEnumMap0);
      Type type0 = bigintEnumType0.getValueType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("formatHint", 0, "V%[Xjm~1{VY{m\"zJ", type0, "V%[Xjm~1{VY{m\"zJ", "\"%s\": \"%s\"", "T%^cs]+-;c", false, false, false);
      redisColumnHandle0.compareTo(redisColumnHandle0);
      assertEquals("formatHint", redisColumnHandle0.getConnectorId());
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals("V%[Xjm~1{VY{m\"zJ", redisColumnHandle0.getName());
      assertEquals("V%[Xjm~1{VY{m\"zJ", redisColumnHandle0.getMapping());
      assertFalse(redisColumnHandle0.isHidden());
      assertEquals("T%^cs]+-;c", redisColumnHandle0.getFormatHint());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertEquals("\"%s\": \"%s\"", redisColumnHandle0.getDataFormat());
      assertEquals(0, redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("%!", 657, "M_Dq0I_~", varbinaryType0, "%!", "%!", "%!", false, false, false);
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("/p5", (-1), "type", varbinaryType0, "M_Dq0I_~", "AB08ZyJ[xLUk", "%!", false, true, false);
      int int0 = redisColumnHandle0.compareTo(redisColumnHandle1);
      assertEquals("M_Dq0I_~", redisColumnHandle1.getMapping());
      assertTrue(redisColumnHandle1.isHidden());
      assertEquals("/p5", redisColumnHandle1.getConnectorId());
      assertFalse(redisColumnHandle1.isInternal());
      assertEquals((-1), redisColumnHandle1.getOrdinalPosition());
      assertEquals(1, int0);
      assertFalse(redisColumnHandle1.isKeyDecoder());
      assertEquals("%!", redisColumnHandle1.getFormatHint());
      assertEquals("type", redisColumnHandle1.getName());
      assertEquals("AB08ZyJ[xLUk", redisColumnHandle1.getDataFormat());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", 2147483630, "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, true, true);
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("4sl#4qo@FH-N.;p", 4, "4sl#4qo@FH-N.;p", type1, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, true, true);
      int int0 = redisColumnHandle1.compareTo(redisColumnHandle0);
      assertEquals((-1), int0);
      assertTrue(redisColumnHandle1.isInternal());
      assertTrue(redisColumnHandle1.isHidden());
      assertEquals(4, redisColumnHandle1.getOrdinalPosition());
      assertTrue(redisColumnHandle1.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<RowType.Field> arrayList0 = new ArrayList<RowType.Field>();
      RowType rowType0 = RowType.createWithTypeSignature((TypeSignature) null, arrayList0);
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("", (-2147483544), "8B&X", rowType0, "/pa0P_hV", "/pa0P_hV", "d&FU=[d", false, false, true);
      // Undeclared exception!
      try { 
        redisColumnHandle0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.AbstractType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<RowType.Field> vector0 = new Vector<RowType.Field>();
      RowType rowType0 = RowType.createWithTypeSignature((TypeSignature) null, vector0);
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("", (-1726), "", rowType0, "slNe>j", "", "slNe>j", false, false, false);
      // Undeclared exception!
      try { 
        redisColumnHandle0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.AbstractType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("@", 4862, "", type0, "", "", "b8mam/pum<t%@8$", true, true, true);
      // Undeclared exception!
      try { 
        redisColumnHandle0.getColumnMetadata();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = null;
      try {
        redisColumnHandle0 = new RedisColumnHandle((String) null, 0, ",", type0, (String) null, ",", "O6~` <U&Y>78W!|D", true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectorId is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransactionManagerConfig transactionManagerConfig0 = new TransactionManagerConfig();
      Map<String, String> map0 = transactionManagerConfig0.getCompanionCatalogs();
      VarcharEnumType.VarcharEnumMap varcharEnumType_VarcharEnumMap0 = new VarcharEnumType.VarcharEnumMap("4}=[\"11wK@$i_+", map0);
      VarcharEnumType varcharEnumType0 = new VarcharEnumType(varcharEnumType_VarcharEnumMap0);
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("q;", 3, "q;", varcharEnumType0, "", "", "BrU", false, false, false);
      int int0 = redisColumnHandle0.getOrdinalPosition();
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(redisColumnHandle0.isHidden());
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals("q;", redisColumnHandle0.getConnectorId());
      assertEquals("BrU", redisColumnHandle0.getFormatHint());
      assertEquals(3, int0);
      assertEquals("", redisColumnHandle0.getDataFormat());
      assertEquals("q;", redisColumnHandle0.getName());
      assertEquals("", redisColumnHandle0.getMapping());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("com.faceboo.presto.common.function.SqlFuntionProperties", (-2147483589), "com.faceboo.presto.common.function.SqlFuntionProperties", p4HyperLogLogType0, "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", true, true, true);
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("com.faceboo.presto.common.function.SqlFuntionProperties", (-2147483589), "com.faceboo.presto.common.function.SqlFuntionProperties", p4HyperLogLogType0, "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", true, true, true);
      boolean boolean0 = redisColumnHandle1.equals(redisColumnHandle0);
      assertTrue(boolean0);
      assertEquals((-2147483589), redisColumnHandle1.getOrdinalPosition());
      assertTrue(redisColumnHandle1.isInternal());
      assertTrue(redisColumnHandle1.isHidden());
      assertTrue(redisColumnHandle1.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("com.faceboo.resto.common.function.SqlFuntionProperties", (-2147483569), "com.faceboo.resto.common.function.SqlFuntionProperties", p4HyperLogLogType0, "com.faceboo.resto.common.function.SqlFuntionProperties", "com.faceboo.resto.common.function.SqlFuntionProperties", "com.faceboo.resto.common.function.SqlFuntionProperties", false, false, false);
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("com.faceboo.resto.common.function.SqlFuntionProperties", (-2147483569), "com.faceboo.resto.common.function.SqlFuntionProperties", p4HyperLogLogType0, "com.faceboo.resto.common.function.SqlFuntionProperties", "com.faceboo.resto.common.function.SqlFuntionProperties", "com.faceboo.resto.common.function.SqlFuntionProperties", false, true, true);
      boolean boolean0 = redisColumnHandle1.equals(redisColumnHandle0);
      assertFalse(redisColumnHandle1.isKeyDecoder());
      assertFalse(boolean0);
      assertEquals((-2147483569), redisColumnHandle1.getOrdinalPosition());
      assertTrue(redisColumnHandle1.isInternal());
      assertTrue(redisColumnHandle1.isHidden());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("com.faceboo.presto.common.function.SqlFuntionProperties").when(type0).toString();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("com.faceboo.presto.common.function.SqlFuntionProperties", (-2147483589), "com.faceboo.presto.common.function.SqlFuntionProperties", type0, "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", true, true, true);
      Type type1 = redisColumnHandle0.getType();
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("com.faceboo.presto.common.function.SqlFuntionProperties", (-2147483589), "com.faceboo.presto.common.function.SqlFuntionProperties", type1, "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", true, true, false);
      boolean boolean0 = redisColumnHandle1.equals(redisColumnHandle0);
      assertTrue(redisColumnHandle1.isKeyDecoder());
      assertTrue(redisColumnHandle1.isHidden());
      assertFalse(boolean0);
      assertEquals((-2147483589), redisColumnHandle1.getOrdinalPosition());
      assertTrue(redisColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483642), "4sl#4qo@FH-N.;p", p4HyperLogLogType0, "4sl#4qo@FH-N.;p", "`AbOQ#im^", "`AbOQ#im^", true, true, true);
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483642), "4sl#4qo@FH-N.;p", p4HyperLogLogType0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, true, true);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertEquals("4sl#4qo@FH-N.;p", redisColumnHandle0.getName());
      assertEquals("4sl#4qo@FH-N.;p", redisColumnHandle0.getMapping());
      assertEquals("`AbOQ#im^", redisColumnHandle0.getDataFormat());
      assertEquals("`AbOQ#im^", redisColumnHandle0.getFormatHint());
      assertTrue(redisColumnHandle1.isKeyDecoder());
      assertTrue(redisColumnHandle1.isHidden());
      assertEquals("4sl#4qo@FH-N.;p", redisColumnHandle0.getConnectorId());
      assertTrue(redisColumnHandle1.isInternal());
      assertEquals((-2147483642), redisColumnHandle1.getOrdinalPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("l:4qo@FH-N.;p", 1228, "l:4qo@FH-N.;p", hyperLogLogType0, "l:4qo@FH-N.;p", "bT0(FgP] pj", "bT0(FgP] pj", false, false, false);
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("l:4qo@FH-N.;p", 1228, "l:4qo@FH-N.;p", hyperLogLogType0, "bT0(FgP] pj", "bT0(FgP] pj", "bT0(FgP] pj", false, false, false);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertFalse(redisColumnHandle1.isHidden());
      assertEquals("l:4qo@FH-N.;p", redisColumnHandle1.getConnectorId());
      assertEquals(1228, redisColumnHandle1.getOrdinalPosition());
      assertFalse(redisColumnHandle1.isInternal());
      assertEquals("bT0(FgP] pj", redisColumnHandle0.getFormatHint());
      assertEquals("bT0(FgP] pj", redisColumnHandle0.getDataFormat());
      assertEquals("l:4qo@FH-N.;p", redisColumnHandle1.getName());
      assertFalse(boolean0);
      assertFalse(redisColumnHandle1.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("l:4qo@FH-N.;p", 1228, "l:4qo@FH-N.;p", hyperLogLogType0, "l:4qo@FH-N.;p", "bT0(FgP] pj", "bT0(FgP] pj", false, false, false);
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("l:4qo@FH-N.;p", 1228, "l:4qo@FH-N.;p", type0, "l:4qo@FH-N.;p", "bT0(FgP] pj", "l:4qo@FH-N.;p", false, false, false);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertFalse(redisColumnHandle1.isInternal());
      assertFalse(redisColumnHandle1.isHidden());
      assertFalse(redisColumnHandle1.isKeyDecoder());
      assertFalse(boolean0);
      assertEquals("bT0(FgP] pj", redisColumnHandle0.getFormatHint());
      assertEquals("l:4qo@FH-N.;p", redisColumnHandle1.getFormatHint());
      assertEquals("bT0(FgP] pj", redisColumnHandle1.getDataFormat());
      assertEquals(1228, redisColumnHandle1.getOrdinalPosition());
      assertEquals("l:4qo@FH-N.;p", redisColumnHandle0.getMapping());
      assertEquals("l:4qo@FH-N.;p", redisColumnHandle1.getConnectorId());
      assertEquals("l:4qo@FH-N.;p", redisColumnHandle1.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      P4HyperLogLogType p4HyperLogLogType0 = new P4HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("TS}r`3ekbu]j", (-459), "WcK@mr", p4HyperLogLogType0, "WcK@mr", "TS}r`3ekbu]j", "TS}r`3ekbu]j", false, false, false);
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("TS}r`3ekbu]j", (-459), "TS}r`3ekbu]j", p4HyperLogLogType0, "WcK@mr", "WcK@mr", "TS}r`3ekbu]j", false, false, false);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertEquals("TS}r`3ekbu]j", redisColumnHandle1.getConnectorId());
      assertEquals("WcK@mr", redisColumnHandle0.getMapping());
      assertEquals("WcK@mr", redisColumnHandle1.getMapping());
      assertEquals("TS}r`3ekbu]j", redisColumnHandle1.getFormatHint());
      assertEquals("WcK@mr", redisColumnHandle1.getDataFormat());
      assertFalse(boolean0);
      assertEquals("TS}r`3ekbu]j", redisColumnHandle0.getConnectorId());
      assertFalse(redisColumnHandle1.isKeyDecoder());
      assertFalse(redisColumnHandle1.isHidden());
      assertEquals("TS}r`3ekbu]j", redisColumnHandle0.getFormatHint());
      assertEquals("TS}r`3ekbu]j", redisColumnHandle0.getDataFormat());
      assertEquals("WcK@mr", redisColumnHandle0.getName());
      assertFalse(redisColumnHandle1.isInternal());
      assertEquals((-459), redisColumnHandle1.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", 2147483630, "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, true, true);
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("4sl#4qo@FH-N.;p", 4, "4sl#4qo@FH-N.;p", type1, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, true, true);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertFalse(boolean0);
      assertEquals(4, redisColumnHandle1.getOrdinalPosition());
      assertTrue(redisColumnHandle1.isKeyDecoder());
      assertTrue(redisColumnHandle1.isHidden());
      assertTrue(redisColumnHandle1.isInternal());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("ordinalPosition", (-1), "ordinalPosition", type0, "ordinalPosition", "ordinalPosition", "ordinalPosition", true, true, true);
      Type type1 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("!R;E", (-1), "ordinalPosition", type1, "ordinalPosition", "ordinalPosition", "!R;E", true, true, true);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertTrue(redisColumnHandle1.isHidden());
      assertEquals("!R;E", redisColumnHandle1.getFormatHint());
      assertEquals("!R;E", redisColumnHandle1.getConnectorId());
      assertFalse(boolean0);
      assertEquals("ordinalPosition", redisColumnHandle1.getMapping());
      assertTrue(redisColumnHandle1.isInternal());
      assertEquals("ordinalPosition", redisColumnHandle1.getDataFormat());
      assertEquals("ordinalPosition", redisColumnHandle1.getName());
      assertTrue(redisColumnHandle1.isKeyDecoder());
      assertEquals((-1), redisColumnHandle1.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("com.faceboo.presto.common.function.SqlFuntionProperties", (-2147483589), "com.faceboo.presto.common.function.SqlFuntionProperties", type0, "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", true, true, true);
      boolean boolean0 = redisColumnHandle0.equals("com.faceboo.presto.common.function.SqlFuntionProperties");
      assertTrue(redisColumnHandle0.isKeyDecoder());
      assertTrue(redisColumnHandle0.isHidden());
      assertFalse(boolean0);
      assertTrue(redisColumnHandle0.isInternal());
      assertEquals((-2147483589), redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("connectorId", 1532, "connectorId", type0, (String) null, "connectorId", (String) null, false, false, false);
      boolean boolean0 = redisColumnHandle0.equals((Object) null);
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals(1532, redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isHidden());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, false, false);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle0);
      assertFalse(redisColumnHandle0.isInternal());
      assertEquals((-2147483559), redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isHidden());
      assertTrue(boolean0);
      assertTrue(redisColumnHandle0.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("4sl#4qo@FH-N.;p").when(type0).toString();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, false, false);
      Type type1 = redisColumnHandle0.getType();
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type1, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", false, true, true);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertTrue(redisColumnHandle1.isHidden());
      assertEquals((-2147483559), redisColumnHandle1.getOrdinalPosition());
      assertFalse(redisColumnHandle1.isKeyDecoder());
      assertFalse(boolean0);
      assertTrue(redisColumnHandle1.isInternal());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("4sl#4qo@FH-N.;p").when(type0).toString();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, false, false);
      String string0 = redisColumnHandle0.toString();
      assertEquals("RedisColumnHandle{connectorId=4sl#4qo@FH-N.;p, ordinalPosition=-2147483559, name=4sl#4qo@FH-N.;p, type=4sl#4qo@FH-N.;p, mapping=4sl#4qo@FH-N.;p, dataFormat=4sl#4qo@FH-N.;p, formatHint=4sl#4qo@FH-N.;p, keyDecoder=true, hidden=false, internal=false}", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("ordinalPosition", (-1), "ordinalPosition", type0, "ordinalPosition", "ordinalPosition", "ordinalPosition", true, true, true);
      boolean boolean0 = redisColumnHandle0.isHidden();
      assertTrue(redisColumnHandle0.isKeyDecoder());
      assertTrue(boolean0);
      assertTrue(redisColumnHandle0.isInternal());
      assertEquals((-1), redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("rCR", (-50), "rCR", hyperLogLogType0, "rCR", "rCR", "rCR", false, false, false);
      redisColumnHandle0.getMapping();
      assertFalse(redisColumnHandle0.isInternal());
      assertFalse(redisColumnHandle0.isHidden());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertEquals((-50), redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("ordinalPosition", (-1), "ordinalPosition", type0, "ordinalPosition", "ordinalPosition", "ordinalPosition", true, true, true);
      redisColumnHandle0.getName();
      assertTrue(redisColumnHandle0.isHidden());
      assertTrue(redisColumnHandle0.isKeyDecoder());
      assertEquals((-1), redisColumnHandle0.getOrdinalPosition());
      assertTrue(redisColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("rCR", (-50), "rCR", hyperLogLogType0, "rCR", "rCR", "rCR", false, false, false);
      redisColumnHandle0.getFormatHint();
      assertEquals((-50), redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isHidden());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertFalse(redisColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("rCR", (-50), "rCR", hyperLogLogType0, "rCR", "rCR", "rCR", false, false, false);
      redisColumnHandle0.getDataFormat();
      assertEquals((-50), redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isHidden());
      assertFalse(redisColumnHandle0.isInternal());
      assertFalse(redisColumnHandle0.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("4sl#4qo@FH-N.;p").when(type0).toString();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, false, false);
      ColumnMetadata columnMetadata0 = redisColumnHandle0.getColumnMetadata();
      assertEquals((-2147483559), redisColumnHandle0.getOrdinalPosition());
      assertFalse(columnMetadata0.isHidden());
      assertFalse(redisColumnHandle0.isInternal());
      assertTrue(redisColumnHandle0.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("ordinalPosition", (-1), "ordinalPosition", type0, "ordinalPosition", "ordinalPosition", "ordinalPosition", true, true, true);
      boolean boolean0 = redisColumnHandle0.isInternal();
      assertEquals((-1), redisColumnHandle0.getOrdinalPosition());
      assertTrue(redisColumnHandle0.isKeyDecoder());
      assertTrue(redisColumnHandle0.isHidden());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483559), "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", "4sl#4qo@FH-N.;p", true, false, false);
      redisColumnHandle0.getConnectorId();
      assertEquals((-2147483559), redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isInternal());
      assertFalse(redisColumnHandle0.isHidden());
      assertTrue(redisColumnHandle0.isKeyDecoder());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("4sl#4qo@FH-N.;p").when(type0).toString();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483548), "4sl#4qo@FH-N.;p", type0, "4sl#4qo@FH-N.;p", "<h39vMxAIwwB", "<h39vMxAIwwB", false, false, false);
      Type type1 = redisColumnHandle0.getType();
      RedisColumnHandle redisColumnHandle1 = new RedisColumnHandle("4sl#4qo@FH-N.;p", (-2147483548), "4sl#4qo@FH-N.;p", type1, "4sl#4qo@FH-N.;p", "<h39vMxAIwwB", "4sl#4qo@FH-N.;p", false, true, true);
      boolean boolean0 = redisColumnHandle0.equals(redisColumnHandle1);
      assertTrue(redisColumnHandle1.isHidden());
      assertEquals("4sl#4qo@FH-N.;p", redisColumnHandle1.getFormatHint());
      assertEquals("<h39vMxAIwwB", redisColumnHandle1.getDataFormat());
      assertFalse(redisColumnHandle1.isKeyDecoder());
      assertFalse(boolean0);
      assertEquals((-2147483548), redisColumnHandle1.getOrdinalPosition());
      assertEquals("<h39vMxAIwwB", redisColumnHandle0.getFormatHint());
      assertEquals("4sl#4qo@FH-N.;p", redisColumnHandle0.getName());
      assertEquals("4sl#4qo@FH-N.;p", redisColumnHandle0.getMapping());
      assertTrue(redisColumnHandle1.isInternal());
      assertEquals("4sl#4qo@FH-N.;p", redisColumnHandle0.getConnectorId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("com.faceboo.presto.common.function.SqlFuntionProperties", (-2147483589), "com.faceboo.presto.common.function.SqlFuntionProperties", hyperLogLogType0, "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", "com.faceboo.presto.common.function.SqlFuntionProperties", true, true, true);
      redisColumnHandle0.hashCode();
      assertTrue(redisColumnHandle0.isInternal());
      assertTrue(redisColumnHandle0.isHidden());
      assertTrue(redisColumnHandle0.isKeyDecoder());
      assertEquals((-2147483589), redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("rCR", (-50), "rCR", hyperLogLogType0, "rCR", "rCR", "rCR", false, false, false);
      boolean boolean0 = redisColumnHandle0.isKeyDecoder();
      assertFalse(redisColumnHandle0.isInternal());
      assertFalse(redisColumnHandle0.isHidden());
      assertFalse(boolean0);
      assertEquals((-50), redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      RedisColumnHandle redisColumnHandle0 = new RedisColumnHandle("", (-231), "", type0, "", "connectorId", "connectorId", true, true, false);
      // Undeclared exception!
      try { 
        redisColumnHandle0.compareTo((RedisColumnHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.redis.RedisColumnHandle", e);
      }
  }
}
