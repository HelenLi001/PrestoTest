/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Nov 22 09:00:50 GMT 2021
 */

package com.facebook.presto.redis;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class RedisDecoderModule_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.facebook.presto.redis.RedisDecoderModule"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/mnt/c/Users/Helen/Documents/DataScience18668/GroupProject/project/presto/presto-redis"); 
    java.lang.System.setProperty("user.home", "/home/helen"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "helen"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RedisDecoderModule_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.collect.ImmutableEntry",
      "com.google.common.collect.ImmutableSet$SetBuilderImpl",
      "com.google.inject.Module",
      "com.google.common.collect.Hashing",
      "com.google.inject.internal.RealMapBinder",
      "com.facebook.presto.redis.RedisDecoderModule",
      "com.facebook.presto.decoder.RowDecoderFactory",
      "com.google.inject.Key",
      "com.google.common.collect.ImmutableCollection",
      "com.google.inject.spi.TypeConverter",
      "com.google.inject.binder.AnnotatedBindingBuilder",
      "com.google.inject.Key$AnnotationStrategy",
      "com.google.inject.spi.Message",
      "com.google.inject.multibindings.MapBinder",
      "com.google.common.collect.RegularImmutableMap$KeySet",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.collect.BiMap",
      "com.google.common.collect.IndexedImmutableSet",
      "com.google.inject.PrivateBinder",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.ImmutableMap",
      "com.google.common.collect.RegularImmutableMap",
      "com.google.common.collect.ImmutableMapEntry",
      "com.google.inject.spi.Dependency",
      "com.google.inject.ConfigurationException",
      "com.google.common.collect.CollectPreconditions",
      "com.google.inject.Binding",
      "com.google.inject.binder.ScopedBindingBuilder",
      "com.google.common.collect.RegularImmutableSet",
      "com.google.inject.Stage",
      "com.google.common.collect.AbstractMapEntry",
      "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap",
      "com.google.inject.binder.LinkedBindingBuilder",
      "com.google.inject.spi.Element",
      "com.google.inject.TypeLiteral",
      "com.google.common.collect.ImmutableMap$1",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet",
      "com.google.inject.binder.AnnotatedConstantBindingBuilder",
      "com.google.common.collect.RegularImmutableAsList",
      "com.google.common.collect.SingletonImmutableSet",
      "com.google.inject.internal.MoreTypes",
      "com.google.common.collect.ImmutableMapEntrySet",
      "com.google.common.collect.ImmutableBiMap",
      "org.aopalliance.intercept.Interceptor",
      "com.google.inject.Binder",
      "com.google.common.collect.ImmutableList",
      "org.aopalliance.aop.Advice",
      "com.google.inject.spi.ModuleAnnotatedMethodScanner",
      "com.google.common.collect.ImmutableBiMapFauxverideShim",
      "com.google.inject.Key$NullAnnotationStrategy",
      "com.google.inject.spi.ProvisionListener",
      "com.google.inject.Scope",
      "com.google.common.collect.ImmutableMap$Builder",
      "com.google.inject.Injector",
      "org.aopalliance.intercept.MethodInterceptor",
      "com.google.inject.Provider",
      "com.google.common.collect.ImmutableSet$RegularSetBuilderImpl",
      "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
      "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
      "com.google.common.base.Preconditions",
      "com.google.inject.matcher.Matcher",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.collect.RegularImmutableMap$Values",
      "com.google.inject.spi.TypeListener",
      "com.google.inject.MembersInjector"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.google.inject.Binder", false, RedisDecoderModule_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RedisDecoderModule_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.facebook.presto.redis.RedisDecoderModule",
      "com.google.inject.Key$NullAnnotationStrategy",
      "com.google.common.cache.CacheBuilder$1",
      "com.google.common.base.Suppliers",
      "com.google.common.base.Suppliers$SupplierOfInstance",
      "com.google.common.cache.CacheStats",
      "com.google.common.base.Preconditions",
      "com.google.common.cache.CacheBuilder$2",
      "com.google.common.base.Ticker$1",
      "com.google.common.base.Ticker",
      "com.google.common.cache.CacheBuilder$3",
      "com.google.common.cache.CacheBuilder",
      "com.google.common.cache.LocalCache$Strength",
      "com.google.common.cache.CacheLoader",
      "com.google.inject.internal.Annotations$1",
      "com.google.common.cache.LocalCache$LocalManualCache",
      "com.google.common.cache.LocalCache$LocalLoadingCache",
      "com.google.common.cache.LocalCache$1",
      "com.google.common.cache.LocalCache$2",
      "com.google.common.cache.LocalCache",
      "com.google.common.base.MoreObjects",
      "com.google.common.base.Equivalence",
      "com.google.common.base.Equivalence$Identity",
      "com.google.common.base.Equivalence$Equals",
      "com.google.common.cache.CacheBuilder$OneWeigher",
      "com.google.common.cache.CacheBuilder$NullListener",
      "com.google.common.cache.LocalCache$EntryFactory",
      "com.google.common.cache.LocalCache$Segment",
      "com.google.common.base.Joiner",
      "com.google.common.base.Joiner$MapJoiner",
      "com.google.inject.internal.Annotations$3",
      "com.google.inject.internal.Annotations$AnnotationChecker",
      "com.google.inject.internal.Annotations$AnnotationChecker$1",
      "com.google.inject.internal.Annotations",
      "com.google.common.collect.Maps",
      "com.google.common.collect.AbstractMultimap",
      "com.google.common.collect.AbstractMapBasedMultimap",
      "com.google.common.collect.AbstractSetMultimap",
      "com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies",
      "com.google.common.collect.LinkedHashMultimap",
      "com.google.common.collect.Platform",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.collect.AbstractMapEntry",
      "com.google.common.collect.ImmutableEntry",
      "com.google.common.collect.LinkedHashMultimap$ValueEntry",
      "com.google.inject.internal.CycleDetectingLock$CycleDetectingLockFactory",
      "com.google.inject.internal.SingletonScope",
      "com.google.inject.Scopes$1",
      "com.google.inject.Scopes$2",
      "com.google.inject.Scopes",
      "com.google.inject.multibindings.MapBinder",
      "com.google.inject.TypeLiteral",
      "com.google.common.collect.ImmutableMap$Builder",
      "com.google.common.collect.ImmutableMap",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.collect.RegularImmutableMap",
      "com.google.common.collect.ImmutableMapEntry",
      "com.google.common.collect.Hashing",
      "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry",
      "com.google.inject.internal.MoreTypes",
      "com.google.inject.Key",
      "com.google.inject.spi.Dependency",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.SingletonImmutableSet",
      "com.google.inject.internal.RealMapBinder"
    );
  }
}
