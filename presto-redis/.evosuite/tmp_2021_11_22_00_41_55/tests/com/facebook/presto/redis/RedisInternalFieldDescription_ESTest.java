/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 08:57:30 GMT 2021
 */

package com.facebook.presto.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.BooleanType;
import com.facebook.presto.redis.RedisColumnHandle;
import com.facebook.presto.redis.RedisInternalFieldDescription;
import com.facebook.presto.spi.ColumnMetadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RedisInternalFieldDescription_ESTest extends RedisInternalFieldDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.forColumnName("_key_length");
      RedisInternalFieldDescription redisInternalFieldDescription1 = RedisInternalFieldDescription.forColumnName("_value");
      assertNotSame(redisInternalFieldDescription1, redisInternalFieldDescription0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RedisInternalFieldDescription[] redisInternalFieldDescriptionArray0 = RedisInternalFieldDescription.values();
      assertEquals(6, redisInternalFieldDescriptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.valueOf("KEY_FIELD");
      assertEquals(RedisInternalFieldDescription.KEY_FIELD, redisInternalFieldDescription0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.KEY_FIELD;
      ColumnMetadata columnMetadata0 = redisInternalFieldDescription0.getColumnMetadata(true);
      assertTrue(columnMetadata0.isHidden());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.KEY_CORRUPT_FIELD;
      RedisColumnHandle redisColumnHandle0 = redisInternalFieldDescription0.getColumnHandle("$VALUES", 0, false);
      assertEquals(0, redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertTrue(redisColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.KEY_FIELD;
      RedisColumnHandle redisColumnHandle0 = redisInternalFieldDescription0.getColumnHandle("Row type must have at least 1 field", 3, true);
      assertEquals(3, redisColumnHandle0.getOrdinalPosition());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertTrue(redisColumnHandle0.isInternal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.VALUE_FIELD;
      RedisColumnHandle redisColumnHandle0 = redisInternalFieldDescription0.getColumnHandle("8Dr8SG", (-1), false);
      assertTrue(redisColumnHandle0.isInternal());
      assertFalse(redisColumnHandle0.isKeyDecoder());
      assertEquals((-1), redisColumnHandle0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.KEY_FIELD;
      String string0 = redisInternalFieldDescription0.getColumnName();
      assertEquals("_key", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.VALUE_CORRUPT_FIELD;
      BooleanType booleanType0 = (BooleanType)redisInternalFieldDescription0.getType();
      assertEquals(1, booleanType0.getFixedSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        RedisInternalFieldDescription.forColumnName("KEY_FIELD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown internal column name KEY_FIELD
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.forColumnName("_key_length");
      assertEquals(RedisInternalFieldDescription.KEY_LENGTH_FIELD, redisInternalFieldDescription0);
      
      ColumnMetadata columnMetadata0 = redisInternalFieldDescription0.getColumnMetadata(false);
      assertFalse(columnMetadata0.isHidden());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RedisInternalFieldDescription redisInternalFieldDescription0 = RedisInternalFieldDescription.VALUE_FIELD;
      // Undeclared exception!
      try { 
        redisInternalFieldDescription0.getColumnHandle((String) null, 2147483641, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // connectorId is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
