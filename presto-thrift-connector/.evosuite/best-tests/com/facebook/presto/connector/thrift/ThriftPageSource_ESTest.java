/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:03:46 GMT 2021
 */

package com.facebook.presto.connector.thrift;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.drift.client.DriftClient;
import com.facebook.presto.common.type.TinyintType;
import com.facebook.presto.common.type.VarbinaryType;
import com.facebook.presto.connector.thrift.ThriftColumnHandle;
import com.facebook.presto.connector.thrift.ThriftConnectorSplit;
import com.facebook.presto.connector.thrift.ThriftConnectorStats;
import com.facebook.presto.connector.thrift.ThriftPageSource;
import com.facebook.presto.connector.thrift.server.ThriftTpchService;
import com.facebook.presto.operator.TestingDriftClient;
import com.facebook.presto.spi.ColumnHandle;
import com.facebook.presto.spi.HostAddress;
import com.facebook.presto.thrift.api.connector.PrestoThriftId;
import com.facebook.presto.thrift.api.connector.PrestoThriftService;
import com.facebook.presto.tpch.TpchColumnHandle;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.CompletableFuture;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThriftPageSource_ESTest extends ThriftPageSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<HostAddress> vector0 = new Vector<HostAddress>();
      byte[] byteArray0 = new byte[1];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      ThriftConnectorSplit thriftConnectorSplit0 = mock(ThriftConnectorSplit.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(thriftConnectorSplit0).getAddresses();
      doReturn(prestoThriftId0).when(thriftConnectorSplit0).getSplitId();
      TestingDriftClient<PrestoThriftService> testingDriftClient0 = new TestingDriftClient<PrestoThriftService>();
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      ThriftPageSource thriftPageSource0 = null;
      try {
        thriftPageSource0 = new ThriftPageSource(testingDriftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, 7L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // this client is never expected to be called
         //
         verifyException("com.facebook.presto.operator.TestingDriftClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestingDriftClient<PrestoThriftService> testingDriftClient0 = new TestingDriftClient<PrestoThriftService>();
      byte[] byteArray0 = new byte[1];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      Vector<HostAddress> vector0 = new Vector<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, vector0);
      ArrayList<ColumnHandle> arrayList0 = new ArrayList<ColumnHandle>();
      ThriftPageSource thriftPageSource0 = null;
      try {
        thriftPageSource0 = new ThriftPageSource(testingDriftClient0, (Map<String, String>) null, thriftConnectorSplit0, arrayList0, (ThriftConnectorStats) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // stats is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestingDriftClient<PrestoThriftService> testingDriftClient0 = new TestingDriftClient<PrestoThriftService>();
      byte[] byteArray0 = new byte[7];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      ArrayList<HostAddress> arrayList0 = new ArrayList<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, arrayList0);
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      TinyintType tinyintType0 = TinyintType.TINYINT;
      TpchColumnHandle tpchColumnHandle0 = new TpchColumnHandle("PrestoThriftId{id=0038AA637EBB00}", tinyintType0);
      stack0.add((ColumnHandle) tpchColumnHandle0);
      ThriftPageSource thriftPageSource0 = null;
      try {
        thriftPageSource0 = new ThriftPageSource(testingDriftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, (ThriftConnectorStats) null, (byte) (-69));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.tpch.TpchColumnHandle cannot be cast to com.facebook.presto.connector.thrift.ThriftColumnHandle
         //
         verifyException("com.facebook.presto.connector.thrift.ThriftPageSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)46);
      thriftPageSource0.close();
      assertEquals(0L, thriftPageSource0.getReadTimeNanos());
      assertFalse(thriftPageSource0.isFinished());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      byte[] byteArray0 = new byte[5];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, hashtable0, thriftConnectorSplit0, stack0, thriftConnectorStats0, 7L);
      CompletableFuture<?> completableFuture0 = thriftPageSource0.isBlocked();
      assertEquals(0L, thriftPageSource0.getReadTimeNanos());
      assertNotNull(completableFuture0);
      assertFalse(thriftPageSource0.isFinished());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)46);
      boolean boolean0 = thriftPageSource0.isFinished();
      assertEquals(0L, thriftPageSource0.getReadTimeNanos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      byte[] byteArray0 = new byte[9];
      HostAddress hostAddress0 = new HostAddress("pipelines is null", (byte)0);
      linkedList0.add(hostAddress0);
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      ThriftConnectorSplit thriftConnectorSplit0 = mock(ThriftConnectorSplit.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(thriftConnectorSplit0).getAddresses();
      doReturn(prestoThriftId0).when(thriftConnectorSplit0).getSplitId();
      ThriftTpchService thriftTpchService0 = new ThriftTpchService();
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn(thriftTpchService0).when(driftClient0).get(nullable(java.util.Optional.class) , anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)108);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      TestingDriftClient<PrestoThriftService> testingDriftClient0 = new TestingDriftClient<PrestoThriftService>();
      LinkedList<ColumnHandle> linkedList0 = new LinkedList<ColumnHandle>();
      ThriftPageSource thriftPageSource0 = null;
      try {
        thriftPageSource0 = new ThriftPageSource(testingDriftClient0, (Map<String, String>) null, (ThriftConnectorSplit) null, linkedList0, thriftConnectorStats0, (-1518L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBytesPerResponse is zero or negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<HostAddress> linkedList0 = new LinkedList<HostAddress>();
      byte[] byteArray0 = new byte[9];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      ThriftConnectorSplit thriftConnectorSplit0 = mock(ThriftConnectorSplit.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(thriftConnectorSplit0).getAddresses();
      doReturn(prestoThriftId0).when(thriftConnectorSplit0).getSplitId();
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      VarbinaryType varbinaryType0 = VarbinaryType.VARBINARY;
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("pipelines is null", varbinaryType0, "pipelines is null", true);
      stack0.add((ColumnHandle) thriftColumnHandle0);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)108);
      assertEquals(0L, thriftPageSource0.getReadTimeNanos());
      assertFalse(thriftPageSource0.isFinished());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)46);
      long long0 = thriftPageSource0.getReadTimeNanos();
      assertEquals(0L, long0);
      assertFalse(thriftPageSource0.isFinished());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)46);
      thriftPageSource0.getCompletedBytes();
      assertFalse(thriftPageSource0.isFinished());
      assertEquals(0L, thriftPageSource0.getReadTimeNanos());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)46);
      // Undeclared exception!
      try { 
        thriftPageSource0.getNextPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.connector.thrift.ThriftPageSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)58);
      thriftPageSource0.getCompletedPositions();
      assertFalse(thriftPageSource0.isFinished());
      assertEquals(0L, thriftPageSource0.getReadTimeNanos());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PrestoThriftId prestoThriftId0 = new PrestoThriftId(byteArray0);
      DriftClient<PrestoThriftService> driftClient0 = (DriftClient<PrestoThriftService>) mock(DriftClient.class, new ViolatedAssumptionAnswer());
      doReturn((PrestoThriftService) null).when(driftClient0).get(anyMap());
      ThriftConnectorStats thriftConnectorStats0 = mock(ThriftConnectorStats.class, new ViolatedAssumptionAnswer());
      Stack<ColumnHandle> stack0 = new Stack<ColumnHandle>();
      Stack<HostAddress> stack1 = new Stack<HostAddress>();
      ThriftConnectorSplit thriftConnectorSplit0 = new ThriftConnectorSplit(prestoThriftId0, stack1);
      ThriftPageSource thriftPageSource0 = new ThriftPageSource(driftClient0, (Map<String, String>) null, thriftConnectorSplit0, stack0, thriftConnectorStats0, (byte)46);
      long long0 = thriftPageSource0.getSystemMemoryUsage();
      assertEquals(0L, long0);
      assertEquals(0L, thriftPageSource0.getReadTimeNanos());
      assertFalse(thriftPageSource0.isFinished());
  }
}
