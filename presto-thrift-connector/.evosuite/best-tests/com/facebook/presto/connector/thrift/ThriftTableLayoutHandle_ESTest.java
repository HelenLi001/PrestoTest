/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:08:36 GMT 2021
 */

package com.facebook.presto.connector.thrift;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.predicate.TupleDomain;
import com.facebook.presto.connector.thrift.ThriftTableLayoutHandle;
import com.facebook.presto.spi.ColumnHandle;
import java.sql.SQLRecoverableException;
import java.util.LinkedHashSet;
import java.util.Optional;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThriftTableLayoutHandle_ESTest extends ThriftTableLayoutHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optional<Set<ColumnHandle>> optional0 = Optional.ofNullable((Set<ColumnHandle>) null);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("", "", optional0, tupleDomain0);
      String string0 = thriftTableLayoutHandle0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Optional<Set<ColumnHandle>> optional0 = Optional.ofNullable((Set<ColumnHandle>) null);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("", "", optional0, tupleDomain0);
      String string0 = thriftTableLayoutHandle0.getSchemaName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = null;
      try {
        thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("", "jp UBr&MDWN#mMk%3", (Optional<Set<ColumnHandle>>) null, (TupleDomain<ColumnHandle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columns is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.ofNullable((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      linkedHashSet0.add((ColumnHandle) null);
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = null;
      try {
        thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("bTS", "zI|^p%1=0/G", optional0, tupleDomain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.all();
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.ofNullable((Set<ColumnHandle>) linkedHashSet0);
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("~[0.->zE,aGQZ`u", "com.facebook.presto.sql.tree.BetweenPredicate", optional0, tupleDomain0);
      ThriftTableLayoutHandle thriftTableLayoutHandle1 = new ThriftTableLayoutHandle("schemaName is null", "", optional0, tupleDomain0);
      boolean boolean0 = thriftTableLayoutHandle0.equals(thriftTableLayoutHandle1);
      assertFalse(boolean0);
      assertEquals("schemaName is null", thriftTableLayoutHandle1.getSchemaName());
      assertEquals("", thriftTableLayoutHandle1.getTableName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Optional<Set<ColumnHandle>> optional0 = Optional.empty();
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("\"#eKR>", "2wM9", optional0, tupleDomain0);
      ThriftTableLayoutHandle thriftTableLayoutHandle1 = new ThriftTableLayoutHandle("\"#eKR>", "\"#eKR>", optional0, tupleDomain0);
      boolean boolean0 = thriftTableLayoutHandle0.equals(thriftTableLayoutHandle1);
      assertFalse(boolean0);
      assertEquals("\"#eKR>", thriftTableLayoutHandle0.getSchemaName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>(2571, 2571);
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.all();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("a!", "$',:4", optional0, tupleDomain0);
      boolean boolean0 = thriftTableLayoutHandle0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("a!", thriftTableLayoutHandle0.getSchemaName());
      assertEquals("$',:4", thriftTableLayoutHandle0.getTableName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>(2571, 2571);
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.all();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("a!", "$',:4", optional0, tupleDomain0);
      boolean boolean0 = thriftTableLayoutHandle0.equals(thriftTableLayoutHandle0);
      assertEquals("$',:4", thriftTableLayoutHandle0.getTableName());
      assertEquals("a!", thriftTableLayoutHandle0.getSchemaName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("_", "_", optional0, tupleDomain0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("_");
      boolean boolean0 = thriftTableLayoutHandle0.equals(sQLRecoverableException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("_", "_", optional0, tupleDomain0);
      Optional<Set<ColumnHandle>> optional1 = thriftTableLayoutHandle0.getColumns();
      assertTrue(optional1.equals((Object)optional0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("_", "_", optional0, tupleDomain0);
      String string0 = thriftTableLayoutHandle0.getSchemaName();
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("_", "_", optional0, tupleDomain0);
      TupleDomain<ColumnHandle> tupleDomain1 = thriftTableLayoutHandle0.getConstraint();
      assertSame(tupleDomain0, tupleDomain1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("_", "_", optional0, tupleDomain0);
      thriftTableLayoutHandle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("_", "_", optional0, tupleDomain0);
      String string0 = thriftTableLayoutHandle0.toString();
      assertEquals("_:_", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<ColumnHandle> linkedHashSet0 = new LinkedHashSet<ColumnHandle>();
      Optional<Set<ColumnHandle>> optional0 = Optional.of((Set<ColumnHandle>) linkedHashSet0);
      TupleDomain<ColumnHandle> tupleDomain0 = TupleDomain.none();
      ThriftTableLayoutHandle thriftTableLayoutHandle0 = new ThriftTableLayoutHandle("_", "_", optional0, tupleDomain0);
      String string0 = thriftTableLayoutHandle0.getTableName();
      assertEquals("_", string0);
  }
}
