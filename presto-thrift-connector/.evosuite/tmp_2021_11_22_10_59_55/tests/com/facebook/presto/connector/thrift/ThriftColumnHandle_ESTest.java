/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 19:08:32 GMT 2021
 */

package com.facebook.presto.connector.thrift;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.DateType;
import com.facebook.presto.common.type.HyperLogLogType;
import com.facebook.presto.common.type.IntegerType;
import com.facebook.presto.common.type.KdbTreeType;
import com.facebook.presto.common.type.RowType;
import com.facebook.presto.common.type.TimeType;
import com.facebook.presto.common.type.TimestampType;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.common.type.TypeSignature;
import com.facebook.presto.connector.thrift.ThriftColumnHandle;
import com.facebook.presto.spi.ColumnMetadata;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThriftColumnHandle_ESTest extends ThriftColumnHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimestampType timestampType0 = TimestampType.TIMESTAMP;
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("Kv@,Pg[D\",o1qZ/", timestampType0, "Kv@,Pg[D\",o1qZ/", true);
      ColumnMetadata columnMetadata0 = thriftColumnHandle0.toColumnMetadata();
      assertTrue(columnMetadata0.isHidden());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeType timeType0 = TimeType.TIME;
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("-Ac4j{f`F3{HR", timeType0, "-Ac4j{f`F3{HR", true);
      boolean boolean0 = thriftColumnHandle0.isHidden();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerType integerType0 = IntegerType.INTEGER;
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("S@}*X ", integerType0, "S@}*X ", false);
      thriftColumnHandle0.getComment();
      assertFalse(thriftColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HyperLogLogType hyperLogLogType0 = new HyperLogLogType();
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("", hyperLogLogType0, "", true);
      thriftColumnHandle0.getComment();
      assertTrue(thriftColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateType dateType0 = DateType.DATE;
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("", dateType0, (String) null, false);
      thriftColumnHandle0.getColumnName();
      assertFalse(thriftColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<RowType.Field> linkedList0 = new LinkedList<RowType.Field>();
      RowType rowType0 = RowType.createWithTypeSignature((TypeSignature) null, linkedList0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("`:a%qP1$l_K/T>I", rowType0, "`:a%qP1$l_K/T>I", true);
      // Undeclared exception!
      try { 
        thriftColumnHandle0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.common.type.AbstractType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateType dateType0 = DateType.DATE;
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("", dateType0, (String) null, false);
      // Undeclared exception!
      try { 
        thriftColumnHandle0.toColumnMetadata();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name is empty
         //
         verifyException("com.facebook.presto.spi.SchemaUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThriftColumnHandle thriftColumnHandle0 = null;
      try {
        thriftColumnHandle0 = new ThriftColumnHandle("columnType is null", (Type) null, "com.facebook.presto.connector.thrift.ThriftColumnHandle", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // columnType is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThriftColumnHandle thriftColumnHandle0 = null;
      try {
        thriftColumnHandle0 = new ThriftColumnHandle((ColumnMetadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.connector.thrift.ThriftColumnHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      ThriftColumnHandle thriftColumnHandle1 = new ThriftColumnHandle("/^yv/a/)#so,i", kdbTreeType0, (String) null, false);
      boolean boolean0 = thriftColumnHandle0.equals(thriftColumnHandle1);
      assertTrue(boolean0);
      assertFalse(thriftColumnHandle1.isHidden());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      ThriftColumnHandle thriftColumnHandle1 = new ThriftColumnHandle("/^yv/a/)#so,i", kdbTreeType0, (String) null, true);
      boolean boolean0 = thriftColumnHandle0.equals(thriftColumnHandle1);
      assertTrue(thriftColumnHandle1.isHidden());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeType timeType0 = TimeType.TIME;
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle("A-c4{=F?T3{a;HR", timeType0, "A-c4{=F?T3{a;HR", false);
      ColumnMetadata columnMetadata0 = new ColumnMetadata("A-c4{=F?T3{a;HR", timeType0);
      ThriftColumnHandle thriftColumnHandle1 = new ThriftColumnHandle(columnMetadata0);
      boolean boolean0 = thriftColumnHandle0.equals(thriftColumnHandle1);
      assertFalse(boolean0);
      assertFalse(thriftColumnHandle1.isHidden());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      ThriftColumnHandle thriftColumnHandle1 = new ThriftColumnHandle("/^yv/a/)#so,i", kdbTreeType0, "/^yv/A/)#SO,I", false);
      boolean boolean0 = thriftColumnHandle0.equals(thriftColumnHandle1);
      assertFalse(boolean0);
      assertFalse(thriftColumnHandle1.isHidden());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("=/^yv1@A/)#Sr,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      boolean boolean0 = thriftColumnHandle0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(thriftColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      boolean boolean0 = thriftColumnHandle0.equals(thriftColumnHandle0);
      assertFalse(thriftColumnHandle0.isHidden());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      boolean boolean0 = thriftColumnHandle0.equals("/^yv/a/)#so,i:KdbTree");
      assertFalse(boolean0);
      assertFalse(thriftColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      ColumnMetadata columnMetadata1 = thriftColumnHandle0.toColumnMetadata();
      assertTrue(columnMetadata1.equals((Object)columnMetadata0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      String string0 = thriftColumnHandle0.toString();
      assertFalse(thriftColumnHandle0.isHidden());
      assertEquals("/^yv/a/)#so,i:KdbTree", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      boolean boolean0 = thriftColumnHandle0.isHidden();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      thriftColumnHandle0.getColumnName();
      assertFalse(thriftColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      thriftColumnHandle0.hashCode();
      assertFalse(thriftColumnHandle0.isHidden());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata("/^yv/A/)#SO,I", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      String string0 = thriftColumnHandle0.getComment();
      assertFalse(thriftColumnHandle0.isHidden());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KdbTreeType kdbTreeType0 = KdbTreeType.KDB_TREE;
      ColumnMetadata columnMetadata0 = new ColumnMetadata(".fom0Ig^Bjg$", kdbTreeType0);
      ThriftColumnHandle thriftColumnHandle0 = new ThriftColumnHandle(columnMetadata0);
      thriftColumnHandle0.getColumnType();
      assertFalse(thriftColumnHandle0.isHidden());
  }
}
