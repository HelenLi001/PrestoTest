/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 09:21:06 GMT 2021
 */

package com.facebook.presto.tpcds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.tpcds.TpcdsPartitioningHandle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TpcdsPartitioningHandle_ESTest extends TpcdsPartitioningHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("", 1842L);
      tpcdsPartitioningHandle0.getTable();
      assertEquals(1842L, tpcdsPartitioningHandle0.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = null;
      try {
        tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // table is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("PROPERTIES", 765L);
      TpcdsPartitioningHandle tpcdsPartitioningHandle1 = new TpcdsPartitioningHandle("PROPERTIES", 765L);
      boolean boolean0 = tpcdsPartitioningHandle0.equals(tpcdsPartitioningHandle1);
      assertTrue(boolean0);
      assertEquals(765L, tpcdsPartitioningHandle1.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("WICER'gBrn#);{gQE(D", 765L);
      TpcdsPartitioningHandle tpcdsPartitioningHandle1 = new TpcdsPartitioningHandle("PROPERTIES", 765L);
      boolean boolean0 = tpcdsPartitioningHandle1.equals(tpcdsPartitioningHandle0);
      assertFalse(boolean0);
      assertEquals(765L, tpcdsPartitioningHandle1.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 1835L);
      TpcdsPartitioningHandle tpcdsPartitioningHandle1 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 11L);
      boolean boolean0 = tpcdsPartitioningHandle1.equals(tpcdsPartitioningHandle0);
      assertFalse(boolean0);
      assertEquals(11L, tpcdsPartitioningHandle1.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 1835L);
      boolean boolean0 = tpcdsPartitioningHandle0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1835L, tpcdsPartitioningHandle0.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 1835L);
      boolean boolean0 = tpcdsPartitioningHandle0.equals(tpcdsPartitioningHandle0);
      assertTrue(boolean0);
      assertEquals(1835L, tpcdsPartitioningHandle0.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 1835L);
      boolean boolean0 = tpcdsPartitioningHandle0.equals("q]a)]Z3SP`dg$'NlP=n");
      assertFalse(boolean0);
      assertEquals(1835L, tpcdsPartitioningHandle0.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = null;
      try {
        tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("", 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // totalRows must be at least 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 1835L);
      long long0 = tpcdsPartitioningHandle0.getTotalRows();
      assertEquals(1835L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 1835L);
      tpcdsPartitioningHandle0.getTable();
      assertEquals(1835L, tpcdsPartitioningHandle0.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("q]a)]Z3SP`dg$'NlP=n", 1835L);
      String string0 = tpcdsPartitioningHandle0.toString();
      assertEquals("q]a)]Z3SP`dg$'NlP=n:1835", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TpcdsPartitioningHandle tpcdsPartitioningHandle0 = new TpcdsPartitioningHandle("WICER'gBrn#);{gQE(D", 765L);
      tpcdsPartitioningHandle0.hashCode();
      assertEquals(765L, tpcdsPartitioningHandle0.getTotalRows());
  }
}
