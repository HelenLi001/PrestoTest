/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 09:24:11 GMT 2021
 */

package com.facebook.presto.tpcds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.spi.ConnectorSession;
import com.facebook.presto.spi.Node;
import com.facebook.presto.spi.NodeManager;
import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;
import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
import com.facebook.presto.tpcds.TpcdsNodePartitioningProvider;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TpcdsNodePartitioningProvider_ESTest extends TpcdsNodePartitioningProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TpcdsNodePartitioningProvider tpcdsNodePartitioningProvider0 = null;
      try {
        tpcdsNodePartitioningProvider0 = new TpcdsNodePartitioningProvider((NodeManager) null, 2148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeManager is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NodeManager nodeManager0 = mock(NodeManager.class, new ViolatedAssumptionAnswer());
      ConnectorTransactionHandle connectorTransactionHandle0 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle0 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle1 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle2 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      NodeManager nodeManager1 = mock(NodeManager.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeManager1).getRequiredWorkerNodes();
      TpcdsNodePartitioningProvider tpcdsNodePartitioningProvider0 = new TpcdsNodePartitioningProvider(nodeManager1, 159);
      // Undeclared exception!
      try { 
        tpcdsNodePartitioningProvider0.getBucketCount(connectorTransactionHandle0, (ConnectorSession) null, connectorPartitioningHandle1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No TPCDS nodes available
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NodeManager nodeManager0 = mock(NodeManager.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeManager0).getRequiredWorkerNodes();
      TpcdsNodePartitioningProvider tpcdsNodePartitioningProvider0 = new TpcdsNodePartitioningProvider(nodeManager0, 3599);
      ConnectorTransactionHandle connectorTransactionHandle0 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession1 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      tpcdsNodePartitioningProvider0.listPartitionHandles((ConnectorTransactionHandle) null, connectorSession1, (ConnectorPartitioningHandle) null);
      ConnectorPartitioningHandle connectorPartitioningHandle0 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      tpcdsNodePartitioningProvider0.getSplitBucketFunction(connectorTransactionHandle0, connectorSession0, connectorPartitioningHandle0);
      ConnectorTransactionHandle connectorTransactionHandle1 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorTransactionHandle connectorTransactionHandle2 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession2 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle1 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      tpcdsNodePartitioningProvider0.listPartitionHandles(connectorTransactionHandle2, connectorSession2, connectorPartitioningHandle1);
      ConnectorSession connectorSession3 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle2 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      tpcdsNodePartitioningProvider0.getSplitBucketFunction(connectorTransactionHandle1, connectorSession3, connectorPartitioningHandle2);
      ConnectorSession connectorSession4 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      tpcdsNodePartitioningProvider0.listPartitionHandles((ConnectorTransactionHandle) null, connectorSession4, (ConnectorPartitioningHandle) null);
      ConnectorTransactionHandle connectorTransactionHandle3 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorTransactionHandle connectorTransactionHandle4 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession5 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle3 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        tpcdsNodePartitioningProvider0.getBucketNodeMap(connectorTransactionHandle4, connectorSession5, connectorPartitioningHandle3, (List<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NodeManager nodeManager0 = mock(NodeManager.class, new ViolatedAssumptionAnswer());
      TpcdsNodePartitioningProvider tpcdsNodePartitioningProvider0 = null;
      try {
        tpcdsNodePartitioningProvider0 = new TpcdsNodePartitioningProvider(nodeManager0, (-502));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // splitsPerNode must be at least 1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConnectorTransactionHandle connectorTransactionHandle0 = mock(ConnectorTransactionHandle.class, new ViolatedAssumptionAnswer());
      ConnectorSession connectorSession0 = mock(ConnectorSession.class, new ViolatedAssumptionAnswer());
      ConnectorPartitioningHandle connectorPartitioningHandle0 = mock(ConnectorPartitioningHandle.class, new ViolatedAssumptionAnswer());
      NodeManager nodeManager0 = mock(NodeManager.class, new ViolatedAssumptionAnswer());
      TpcdsNodePartitioningProvider tpcdsNodePartitioningProvider0 = new TpcdsNodePartitioningProvider(nodeManager0, 487);
      // Undeclared exception!
      try { 
        tpcdsNodePartitioningProvider0.getBucketFunction(connectorTransactionHandle0, connectorSession0, connectorPartitioningHandle0, (List<Type>) null, 487);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.tpcds.TpcdsNodePartitioningProvider", e);
      }
  }
}
