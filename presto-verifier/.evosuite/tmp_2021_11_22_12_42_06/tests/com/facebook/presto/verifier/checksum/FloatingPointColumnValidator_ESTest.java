/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:12:21 GMT 2021
 */

package com.facebook.presto.verifier.checksum;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.common.type.Type;
import com.facebook.presto.sql.tree.Expression;
import com.facebook.presto.sql.tree.SingleColumn;
import com.facebook.presto.verifier.checksum.ChecksumResult;
import com.facebook.presto.verifier.checksum.FloatingPointColumnValidator;
import com.facebook.presto.verifier.framework.Column;
import com.facebook.presto.verifier.framework.VerifierConfig;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FloatingPointColumnValidator_ESTest extends FloatingPointColumnValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VerifierConfig verifierConfig0 = mock(VerifierConfig.class, new ViolatedAssumptionAnswer());
      doReturn(2144.842945258).when(verifierConfig0).getAbsoluteErrorMargin();
      doReturn((-3341.393924)).when(verifierConfig0).getRelativeErrorMargin();
      FloatingPointColumnValidator floatingPointColumnValidator0 = new FloatingPointColumnValidator(verifierConfig0);
      Column column0 = mock(Column.class, new ViolatedAssumptionAnswer());
      ChecksumResult checksumResult0 = mock(ChecksumResult.class, new ViolatedAssumptionAnswer());
      doReturn(266L, 0L, 0L, (-3049L)).when(checksumResult0).getRowCount();
      // Undeclared exception!
      try { 
        floatingPointColumnValidator0.validate(column0, checksumResult0, checksumResult0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Test row count (0) does not match control row count (-3049)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VerifierConfig verifierConfig0 = mock(VerifierConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(verifierConfig0).getAbsoluteErrorMargin();
      doReturn(0.0).when(verifierConfig0).getRelativeErrorMargin();
      FloatingPointColumnValidator floatingPointColumnValidator0 = new FloatingPointColumnValidator(verifierConfig0);
      ChecksumResult checksumResult0 = mock(ChecksumResult.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L).when(checksumResult0).getRowCount();
      ChecksumResult checksumResult1 = mock(ChecksumResult.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(checksumResult1).getRowCount();
      // Undeclared exception!
      try { 
        floatingPointColumnValidator0.validate((Column) null, checksumResult0, checksumResult1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.verifier.checksum.FloatingPointColumnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VerifierConfig verifierConfig0 = mock(VerifierConfig.class, new ViolatedAssumptionAnswer());
      doReturn(3445.356563026837).when(verifierConfig0).getAbsoluteErrorMargin();
      doReturn(3445.356563026837).when(verifierConfig0).getRelativeErrorMargin();
      FloatingPointColumnValidator floatingPointColumnValidator0 = new FloatingPointColumnValidator(verifierConfig0);
      Column column0 = mock(Column.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "6]").when(column0).getName();
      ChecksumResult checksumResult0 = mock(ChecksumResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, floatingPointColumnValidator0).when(checksumResult0).getChecksum(anyString());
      doReturn(1L, 1L, 1L, 1L, 1611L).when(checksumResult0).getRowCount();
      // Undeclared exception!
      try { 
        floatingPointColumnValidator0.validate(column0, checksumResult0, checksumResult0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.facebook.presto.verifier.checksum.FloatingPointColumnValidator cannot be cast to java.lang.Long
         //
         verifyException("com.facebook.presto.verifier.checksum.FloatingPointColumnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VerifierConfig verifierConfig0 = mock(VerifierConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(verifierConfig0).getAbsoluteErrorMargin();
      doReturn(0.0).when(verifierConfig0).getRelativeErrorMargin();
      FloatingPointColumnValidator floatingPointColumnValidator0 = new FloatingPointColumnValidator(verifierConfig0);
      Column column0 = mock(Column.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(column0).getType();
      // Undeclared exception!
      try { 
        floatingPointColumnValidator0.generateChecksumColumns(column0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.verifier.checksum.FloatingPointColumnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VerifierConfig verifierConfig0 = mock(VerifierConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-298.53990459)).when(verifierConfig0).getAbsoluteErrorMargin();
      doReturn((-298.53990459)).when(verifierConfig0).getRelativeErrorMargin();
      FloatingPointColumnValidator floatingPointColumnValidator0 = new FloatingPointColumnValidator(verifierConfig0);
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      Column column0 = mock(Column.class, new ViolatedAssumptionAnswer());
      doReturn(expression0, (Expression) null).when(column0).getExpression();
      doReturn(type0).when(column0).getType();
      // Undeclared exception!
      try { 
        floatingPointColumnValidator0.generateChecksumColumns(column0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FloatingPointColumnValidator floatingPointColumnValidator0 = null;
      try {
        floatingPointColumnValidator0 = new FloatingPointColumnValidator((VerifierConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.facebook.presto.verifier.checksum.FloatingPointColumnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChecksumResult checksumResult0 = mock(ChecksumResult.class, new ViolatedAssumptionAnswer());
      doReturn(4834L, 4294967295L, 4294967295L, 4294967295L).when(checksumResult0).getRowCount();
      VerifierConfig verifierConfig0 = mock(VerifierConfig.class, new ViolatedAssumptionAnswer());
      doReturn((double)4294967295L).when(verifierConfig0).getAbsoluteErrorMargin();
      doReturn((double)4834L).when(verifierConfig0).getRelativeErrorMargin();
      FloatingPointColumnValidator floatingPointColumnValidator0 = new FloatingPointColumnValidator(verifierConfig0);
      Column column0 = mock(Column.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        floatingPointColumnValidator0.validate(column0, checksumResult0, checksumResult0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Test row count (4294967295) does not match control row count (4294967295)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      VerifierConfig verifierConfig0 = mock(VerifierConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-298.53990459)).when(verifierConfig0).getAbsoluteErrorMargin();
      doReturn((-298.53990459)).when(verifierConfig0).getRelativeErrorMargin();
      FloatingPointColumnValidator floatingPointColumnValidator0 = new FloatingPointColumnValidator(verifierConfig0);
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Expression expression0 = mock(Expression.class, new ViolatedAssumptionAnswer());
      Expression expression1 = mock(Expression.class, new ViolatedAssumptionAnswer());
      Column column0 = mock(Column.class, new ViolatedAssumptionAnswer());
      doReturn(expression0, expression1, expression1, expression1, expression1).when(column0).getExpression();
      doReturn("", "", "", "").when(column0).getName();
      doReturn(type0).when(column0).getType();
      List<SingleColumn> list0 = floatingPointColumnValidator0.generateChecksumColumns(column0);
      assertFalse(list0.isEmpty());
  }
}
