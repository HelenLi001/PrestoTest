/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 20:54:52 GMT 2021
 */

package com.facebook.presto.verifier.framework;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.sql.tree.Statement;
import com.facebook.presto.verifier.event.DeterminismAnalysisDetails;
import com.facebook.presto.verifier.framework.LimitQueryDeterminismAnalysis;
import com.facebook.presto.verifier.framework.LimitQueryDeterminismAnalyzer;
import com.facebook.presto.verifier.prestoaction.PrestoAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LimitQueryDeterminismAnalyzer_ESTest extends LimitQueryDeterminismAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      DeterminismAnalysisDetails.Builder determinismAnalysisDetails_Builder0 = mock(DeterminismAnalysisDetails.Builder.class, new ViolatedAssumptionAnswer());
      LimitQueryDeterminismAnalyzer limitQueryDeterminismAnalyzer0 = null;
      try {
        limitQueryDeterminismAnalyzer0 = new LimitQueryDeterminismAnalyzer((PrestoAction) null, false, statement0, 2147483647L, determinismAnalysisDetails_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prestoAction is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      DeterminismAnalysisDetails.Builder determinismAnalysisDetails_Builder0 = mock(DeterminismAnalysisDetails.Builder.class, new ViolatedAssumptionAnswer());
      PrestoAction prestoAction0 = mock(PrestoAction.class, new ViolatedAssumptionAnswer());
      LimitQueryDeterminismAnalyzer limitQueryDeterminismAnalyzer0 = new LimitQueryDeterminismAnalyzer(prestoAction0, true, statement0, 2920L, determinismAnalysisDetails_Builder0);
      LimitQueryDeterminismAnalysis limitQueryDeterminismAnalysis0 = limitQueryDeterminismAnalyzer0.analyze();
      assertEquals(LimitQueryDeterminismAnalysis.NOT_RUN, limitQueryDeterminismAnalysis0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PrestoAction prestoAction0 = mock(PrestoAction.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      DeterminismAnalysisDetails.Builder determinismAnalysisDetails_Builder0 = mock(DeterminismAnalysisDetails.Builder.class, new ViolatedAssumptionAnswer());
      LimitQueryDeterminismAnalyzer limitQueryDeterminismAnalyzer0 = null;
      try {
        limitQueryDeterminismAnalyzer0 = new LimitQueryDeterminismAnalyzer(prestoAction0, true, statement0, (-2029L), determinismAnalysisDetails_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rowCount is negative: -2029
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PrestoAction prestoAction0 = mock(PrestoAction.class, new ViolatedAssumptionAnswer());
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      DeterminismAnalysisDetails.Builder determinismAnalysisDetails_Builder0 = mock(DeterminismAnalysisDetails.Builder.class, new ViolatedAssumptionAnswer());
      LimitQueryDeterminismAnalyzer limitQueryDeterminismAnalyzer0 = new LimitQueryDeterminismAnalyzer(prestoAction0, false, statement0, 1318L, determinismAnalysisDetails_Builder0);
      LimitQueryDeterminismAnalysis limitQueryDeterminismAnalysis0 = limitQueryDeterminismAnalyzer0.analyze();
      assertEquals(LimitQueryDeterminismAnalysis.NOT_RUN, limitQueryDeterminismAnalysis0);
  }
}
