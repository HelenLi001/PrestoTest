/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 22 21:02:38 GMT 2021
 */

package com.facebook.presto.verifier.prestoaction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.facebook.presto.spi.ErrorCodeSupplier;
import com.facebook.presto.spi.StandardErrorCode;
import com.facebook.presto.verifier.framework.PrestoQueryException;
import com.facebook.presto.verifier.framework.QueryException;
import com.facebook.presto.verifier.framework.QueryStage;
import com.facebook.presto.verifier.prestoaction.PrestoExceptionClassifier;
import com.facebook.presto.verifier.prestoaction.QueryActionStats;
import java.io.EOFException;
import java.io.UncheckedIOException;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Optional;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrestoExceptionClassifier_ESTest extends PrestoExceptionClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      StandardErrorCode standardErrorCode0 = StandardErrorCode.EXCEEDED_TIME_LIMIT;
      Optional<QueryStage> optional0 = Optional.empty();
      Pattern pattern0 = Pattern.compile("Error not recognized: %s", (-3476));
      Optional<Pattern> optional1 = Optional.ofNullable(pattern0);
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder1 = prestoExceptionClassifier_Builder0.addRetryableError((ErrorCodeSupplier) standardErrorCode0, optional0, optional1);
      assertSame(prestoExceptionClassifier_Builder0, prestoExceptionClassifier_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      StandardErrorCode standardErrorCode0 = StandardErrorCode.EXCEEDED_TIME_LIMIT;
      Optional<QueryStage> optional0 = Optional.empty();
      Pattern pattern0 = Pattern.compile("Error not recognized: %s", (-3476));
      Optional<Pattern> optional1 = Optional.ofNullable(pattern0);
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder1 = prestoExceptionClassifier_Builder0.addResubmittedError((ErrorCodeSupplier) standardErrorCode0, optional0, optional1);
      assertSame(prestoExceptionClassifier_Builder1, prestoExceptionClassifier_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      StandardErrorCode standardErrorCode0 = StandardErrorCode.OPERATOR_NOT_FOUND;
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder1 = prestoExceptionClassifier_Builder0.addResubmittedError((ErrorCodeSupplier) standardErrorCode0);
      assertSame(prestoExceptionClassifier_Builder0, prestoExceptionClassifier_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = PrestoExceptionClassifier.isClusterConnectionException((Throwable) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(mockThrowable0);
      Throwable throwable0 = mockThrowable0.initCause(batchUpdateException0);
      // Undeclared exception!
      PrestoExceptionClassifier.isClusterConnectionException(throwable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PriorityBlockingQueue<ErrorCodeSupplier> priorityBlockingQueue0 = new PriorityBlockingQueue<ErrorCodeSupplier>();
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder1 = prestoExceptionClassifier_Builder0.addRecognizedErrors(priorityBlockingQueue0);
      assertSame(prestoExceptionClassifier_Builder1, prestoExceptionClassifier_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      StandardErrorCode standardErrorCode0 = StandardErrorCode.OPERATOR_NOT_FOUND;
      prestoExceptionClassifier_Builder0.addRetryableError((ErrorCodeSupplier) standardErrorCode0);
      QueryStage queryStage0 = QueryStage.TEST_MAIN;
      prestoExceptionClassifier0.isRetryable(standardErrorCode0, queryStage0, "!4RL}*KZ/~6>@xqF8'");
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder1 = PrestoExceptionClassifier.defaultBuilder();
      assertFalse(prestoExceptionClassifier_Builder1.equals((Object)prestoExceptionClassifier_Builder0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder1 = PrestoExceptionClassifier.defaultBuilder();
      assertFalse(prestoExceptionClassifier_Builder1.equals((Object)prestoExceptionClassifier_Builder0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      QueryStage queryStage0 = QueryStage.REWRITE;
      QueryActionStats queryActionStats0 = QueryActionStats.EMPTY_STATS;
      TimeoutException timeoutException0 = new TimeoutException("e9df");
      SQLDataException sQLDataException0 = new SQLDataException("", "+", timeoutException0);
      QueryException queryException0 = prestoExceptionClassifier0.createException(queryStage0, queryActionStats0, sQLDataException0);
      assertEquals(QueryStage.REWRITE, queryException0.getQueryStage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      QueryStage queryStage0 = QueryStage.REWRITE;
      QueryActionStats queryActionStats0 = QueryActionStats.EMPTY_STATS;
      EOFException eOFException0 = new EOFException();
      UncheckedIOException uncheckedIOException0 = new UncheckedIOException("@UQiQ", eOFException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(uncheckedIOException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, (-1), sQLTransientException0);
      QueryException queryException0 = prestoExceptionClassifier0.createException(queryStage0, queryActionStats0, dataTruncation0);
      assertTrue(queryException0.isRetryable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SocketTimeoutException socketTimeoutException0 = new SocketTimeoutException();
      boolean boolean0 = PrestoExceptionClassifier.isClusterConnectionException(socketTimeoutException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      SQLWarning sQLWarning0 = new SQLWarning("errorCode");
      boolean boolean0 = prestoExceptionClassifier0.shouldResubmit(sQLWarning0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      StandardErrorCode standardErrorCode0 = StandardErrorCode.NO_NODES_AVAILABLE;
      QueryStage queryStage0 = QueryStage.CONTROL_SETUP;
      boolean boolean0 = prestoExceptionClassifier0.isRetryable(standardErrorCode0, queryStage0, "number");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      QueryStage queryStage0 = QueryStage.CONTROL_CHECKSUM;
      Optional<ErrorCodeSupplier> optional0 = prestoExceptionClassifier0.getErrorCode(0);
      QueryActionStats queryActionStats0 = QueryActionStats.EMPTY_STATS;
      PrestoQueryException prestoQueryException0 = new PrestoQueryException("", false, queryStage0, optional0, queryActionStats0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("D", "j>>6WKA", prestoQueryException0);
      QueryException queryException0 = prestoExceptionClassifier0.createException(queryStage0, queryActionStats0, sQLRecoverableException0);
      assertFalse(queryException0.isRetryable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      QueryStage queryStage0 = QueryStage.TEST_TEARDOWN;
      SocketException socketException0 = new SocketException((String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(socketException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/{-$6yO<mR%+4`", (String) null, mockRuntimeException0);
      QueryException queryException0 = prestoExceptionClassifier0.createException(queryStage0, (QueryActionStats) null, sQLSyntaxErrorException0);
      assertTrue(queryException0.isRetryable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrestoExceptionClassifier.Builder prestoExceptionClassifier_Builder0 = PrestoExceptionClassifier.defaultBuilder();
      PrestoExceptionClassifier prestoExceptionClassifier0 = prestoExceptionClassifier_Builder0.build();
      QueryStage queryStage0 = QueryStage.TEST_TEARDOWN;
      SQLTransientException sQLTransientException0 = new SQLTransientException("errorCode", "errorCode", 2784);
      // Undeclared exception!
      try { 
        prestoExceptionClassifier0.createException(queryStage0, (QueryActionStats) null, sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // queryActionStats is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
